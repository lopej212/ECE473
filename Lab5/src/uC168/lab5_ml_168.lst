
lab5_ml_168.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000dc4  00000e58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dc4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000081  00800108  00800108  00000e60  2**0
                  ALLOC
  3 .stab         00001818  00000000  00000000  00000e60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001256  00000000  00000000  00002678  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000038ce  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000038e0  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  0000391c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00003f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000044b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  000044cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 02 01 	jmp	0x204	; 0x204 <__ctors_end>
   4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  48:	0c 94 21 01 	jmp	0x242	; 0x242 <__vector_18>
  4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  60:	0c 94 30 02 	jmp	0x460	; 0x460 <__vector_24>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  68:	4b 02       	muls	r20, r27
  6a:	a4 02       	muls	r26, r20
  6c:	a4 02       	muls	r26, r20
  6e:	a4 02       	muls	r26, r20
  70:	a4 02       	muls	r26, r20
  72:	a4 02       	muls	r26, r20
  74:	a4 02       	muls	r26, r20
  76:	a4 02       	muls	r26, r20
  78:	4b 02       	muls	r20, r27
  7a:	a4 02       	muls	r26, r20
  7c:	a4 02       	muls	r26, r20
  7e:	a4 02       	muls	r26, r20
  80:	a4 02       	muls	r26, r20
  82:	a4 02       	muls	r26, r20
  84:	a4 02       	muls	r26, r20
  86:	a4 02       	muls	r26, r20
  88:	55 02       	muls	r21, r21
  8a:	a4 02       	muls	r26, r20
  8c:	a4 02       	muls	r26, r20
  8e:	a4 02       	muls	r26, r20
  90:	a4 02       	muls	r26, r20
  92:	a4 02       	muls	r26, r20
  94:	a4 02       	muls	r26, r20
  96:	a4 02       	muls	r26, r20
  98:	a4 02       	muls	r26, r20
  9a:	a4 02       	muls	r26, r20
  9c:	a4 02       	muls	r26, r20
  9e:	a4 02       	muls	r26, r20
  a0:	a4 02       	muls	r26, r20
  a2:	a4 02       	muls	r26, r20
  a4:	a4 02       	muls	r26, r20
  a6:	a4 02       	muls	r26, r20
  a8:	55 02       	muls	r21, r21
  aa:	a4 02       	muls	r26, r20
  ac:	a4 02       	muls	r26, r20
  ae:	a4 02       	muls	r26, r20
  b0:	a4 02       	muls	r26, r20
  b2:	a4 02       	muls	r26, r20
  b4:	a4 02       	muls	r26, r20
  b6:	a4 02       	muls	r26, r20
  b8:	a4 02       	muls	r26, r20
  ba:	a4 02       	muls	r26, r20
  bc:	a4 02       	muls	r26, r20
  be:	a4 02       	muls	r26, r20
  c0:	a4 02       	muls	r26, r20
  c2:	a4 02       	muls	r26, r20
  c4:	a4 02       	muls	r26, r20
  c6:	a4 02       	muls	r26, r20
  c8:	a0 02       	muls	r26, r16
  ca:	a4 02       	muls	r26, r20
  cc:	a4 02       	muls	r26, r20
  ce:	a4 02       	muls	r26, r20
  d0:	a4 02       	muls	r26, r20
  d2:	a4 02       	muls	r26, r20
  d4:	a4 02       	muls	r26, r20
  d6:	a4 02       	muls	r26, r20
  d8:	7f 02       	muls	r23, r31
  da:	a4 02       	muls	r26, r20
  dc:	a4 02       	muls	r26, r20
  de:	a4 02       	muls	r26, r20
  e0:	a4 02       	muls	r26, r20
  e2:	a4 02       	muls	r26, r20
  e4:	a4 02       	muls	r26, r20
  e6:	a4 02       	muls	r26, r20
  e8:	a4 02       	muls	r26, r20
  ea:	a4 02       	muls	r26, r20
  ec:	a4 02       	muls	r26, r20
  ee:	a4 02       	muls	r26, r20
  f0:	a4 02       	muls	r26, r20
  f2:	a4 02       	muls	r26, r20
  f4:	a4 02       	muls	r26, r20
  f6:	a4 02       	muls	r26, r20
  f8:	70 02       	muls	r23, r16
  fa:	a4 02       	muls	r26, r20
  fc:	a4 02       	muls	r26, r20
  fe:	a4 02       	muls	r26, r20
 100:	a4 02       	muls	r26, r20
 102:	a4 02       	muls	r26, r20
 104:	a4 02       	muls	r26, r20
 106:	a4 02       	muls	r26, r20
 108:	91 02       	muls	r25, r17

0000010a <__trampolines_end>:
 10a:	00 40       	sbci	r16, 0x00	; 0
 10c:	7a 10       	cpse	r7, r10
 10e:	f3 5a       	subi	r31, 0xA3	; 163
 110:	00 a0       	ldd	r0, Z+32	; 0x20
 112:	72 4e       	sbci	r23, 0xE2	; 226
 114:	18 09       	sbc	r17, r8
 116:	00 10       	cpse	r0, r0
 118:	a5 d4       	rcall	.+2378   	; 0xa64 <dtoa_prf+0x176>
 11a:	e8 00       	.word	0x00e8	; ????
 11c:	00 e8       	ldi	r16, 0x80	; 128
 11e:	76 48       	sbci	r23, 0x86	; 134
 120:	17 00       	.word	0x0017	; ????
 122:	00 e4       	ldi	r16, 0x40	; 64
 124:	0b 54       	subi	r16, 0x4B	; 75
 126:	02 00       	.word	0x0002	; ????
 128:	00 ca       	rjmp	.-3072   	; 0xfffff52a <__eeprom_end+0xff7ef52a>
 12a:	9a 3b       	cpi	r25, 0xBA	; 186
 12c:	00 00       	nop
 12e:	00 e1       	ldi	r16, 0x10	; 16
 130:	f5 05       	cpc	r31, r5
 132:	00 00       	nop
 134:	80 96       	adiw	r24, 0x20	; 32
 136:	98 00       	.word	0x0098	; ????
 138:	00 00       	nop
 13a:	40 42       	sbci	r20, 0x20	; 32
 13c:	0f 00       	.word	0x000f	; ????
 13e:	00 00       	nop
 140:	a0 86       	std	Z+8, r10	; 0x08
 142:	01 00       	.word	0x0001	; ????
 144:	00 00       	nop
 146:	10 27       	eor	r17, r16
 148:	00 00       	nop
 14a:	00 00       	nop
 14c:	e8 03       	fmulsu	r22, r16
 14e:	00 00       	nop
 150:	00 00       	nop
 152:	64 00       	.word	0x0064	; ????
 154:	00 00       	nop
 156:	00 00       	nop
 158:	0a 00       	.word	0x000a	; ????
 15a:	00 00       	nop
 15c:	00 00       	nop
 15e:	01 00       	.word	0x0001	; ????
 160:	00 00       	nop
 162:	00 00       	nop
 164:	2c 76       	andi	r18, 0x6C	; 108
 166:	d8 88       	ldd	r13, Y+16	; 0x10
 168:	dc 67       	ori	r29, 0x7C	; 124
 16a:	4f 08       	sbc	r4, r15
 16c:	23 df       	rcall	.-442    	; 0xffffffb4 <__eeprom_end+0xff7effb4>
 16e:	c1 df       	rcall	.-126    	; 0xf2 <__SREG__+0xb3>
 170:	ae 59       	subi	r26, 0x9E	; 158
 172:	e1 b1       	in	r30, 0x01	; 1
 174:	b7 96       	adiw	r30, 0x27	; 39
 176:	e5 e3       	ldi	r30, 0x35	; 53
 178:	e4 53       	subi	r30, 0x34	; 52
 17a:	c6 3a       	cpi	r28, 0xA6	; 166
 17c:	e6 51       	subi	r30, 0x16	; 22
 17e:	99 76       	andi	r25, 0x69	; 105
 180:	96 e8       	ldi	r25, 0x86	; 134
 182:	e6 c2       	rjmp	.+1484   	; 0x750 <__fp_pscA+0xc>
 184:	84 26       	eor	r8, r20
 186:	eb 89       	ldd	r30, Y+19	; 0x13
 188:	8c 9b       	sbis	0x11, 4	; 17
 18a:	62 ed       	ldi	r22, 0xD2	; 210
 18c:	40 7c       	andi	r20, 0xC0	; 192
 18e:	6f fc       	.word	0xfc6f	; ????
 190:	ef bc       	out	0x2f, r14	; 47
 192:	9c 9f       	mul	r25, r28
 194:	40 f2       	brcs	.-112    	; 0x126 <__trampolines_end+0x1c>
 196:	ba a5       	ldd	r27, Y+42	; 0x2a
 198:	6f a5       	ldd	r22, Y+47	; 0x2f
 19a:	f4 90       	lpm	r15, Z
 19c:	05 5a       	subi	r16, 0xA5	; 165
 19e:	2a f7       	brpl	.-54     	; 0x16a <__trampolines_end+0x60>
 1a0:	5c 93       	st	X, r21
 1a2:	6b 6c       	ori	r22, 0xCB	; 203
 1a4:	f9 67       	ori	r31, 0x79	; 121
 1a6:	6d c1       	rjmp	.+730    	; 0x482 <__vector_24+0x22>
 1a8:	1b fc       	.word	0xfc1b	; ????
 1aa:	e0 e4       	ldi	r30, 0x40	; 64
 1ac:	0d 47       	sbci	r16, 0x7D	; 125
 1ae:	fe f5       	brtc	.+126    	; 0x22e <.do_clear_bss_loop>
 1b0:	20 e6       	ldi	r18, 0x60	; 96
 1b2:	b5 00       	.word	0x00b5	; ????
 1b4:	d0 ed       	ldi	r29, 0xD0	; 208
 1b6:	90 2e       	mov	r9, r16
 1b8:	03 00       	.word	0x0003	; ????
 1ba:	94 35       	cpi	r25, 0x54	; 84
 1bc:	77 05       	cpc	r23, r7
 1be:	00 80       	ld	r0, Z
 1c0:	84 1e       	adc	r8, r20
 1c2:	08 00       	.word	0x0008	; ????
 1c4:	00 20       	and	r0, r0
 1c6:	4e 0a       	sbc	r4, r30
 1c8:	00 00       	nop
 1ca:	00 c8       	rjmp	.-4096   	; 0xfffff1cc <__eeprom_end+0xff7ef1cc>
 1cc:	0c 33       	cpi	r16, 0x3C	; 60
 1ce:	33 33       	cpi	r19, 0x33	; 51
 1d0:	33 0f       	add	r19, r19
 1d2:	98 6e       	ori	r25, 0xE8	; 232
 1d4:	12 83       	std	Z+2, r17	; 0x02
 1d6:	11 41       	sbci	r17, 0x11	; 17
 1d8:	ef 8d       	ldd	r30, Y+31	; 0x1f
 1da:	21 14       	cp	r2, r1
 1dc:	89 3b       	cpi	r24, 0xB9	; 185
 1de:	e6 55       	subi	r30, 0x56	; 86
 1e0:	16 cf       	rjmp	.-468    	; 0xe <__FUSE_REGION_LENGTH__+0xb>
 1e2:	fe e6       	ldi	r31, 0x6E	; 110
 1e4:	db 18       	sub	r13, r11
 1e6:	d1 84       	ldd	r13, Z+9	; 0x09
 1e8:	4b 38       	cpi	r20, 0x8B	; 139
 1ea:	1b f7       	brvc	.-58     	; 0x1b2 <__trampolines_end+0xa8>
 1ec:	7c 1d       	adc	r23, r12
 1ee:	90 1d       	adc	r25, r0
 1f0:	a4 bb       	out	0x14, r26	; 20
 1f2:	e4 24       	eor	r14, r4
 1f4:	20 32       	cpi	r18, 0x20	; 32
 1f6:	84 72       	andi	r24, 0x24	; 36
 1f8:	5e 22       	and	r5, r30
 1fa:	81 00       	.word	0x0081	; ????
 1fc:	c9 f1       	breq	.+114    	; 0x270 <__vector_18+0x2e>
 1fe:	24 ec       	ldi	r18, 0xC4	; 196
 200:	a1 e5       	ldi	r26, 0x51	; 81
 202:	3d 27       	eor	r19, r29

00000204 <__ctors_end>:
 204:	11 24       	eor	r1, r1
 206:	1f be       	out	0x3f, r1	; 63
 208:	cf ef       	ldi	r28, 0xFF	; 255
 20a:	d4 e0       	ldi	r29, 0x04	; 4
 20c:	de bf       	out	0x3e, r29	; 62
 20e:	cd bf       	out	0x3d, r28	; 61

00000210 <__do_copy_data>:
 210:	11 e0       	ldi	r17, 0x01	; 1
 212:	a0 e0       	ldi	r26, 0x00	; 0
 214:	b1 e0       	ldi	r27, 0x01	; 1
 216:	e4 ec       	ldi	r30, 0xC4	; 196
 218:	fd e0       	ldi	r31, 0x0D	; 13
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x10>
 21c:	05 90       	lpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a8 30       	cpi	r26, 0x08	; 8
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0xc>

00000226 <__do_clear_bss>:
 226:	21 e0       	ldi	r18, 0x01	; 1
 228:	a8 e0       	ldi	r26, 0x08	; 8
 22a:	b1 e0       	ldi	r27, 0x01	; 1
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	a9 38       	cpi	r26, 0x89	; 137
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	0e 94 4b 01 	call	0x296	; 0x296 <main>
 23a:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <_exit>

0000023e <__bad_interrupt>:
 23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <__vector_18>:
//Compare array
char sample_array[] = "sample";
//Transmission array
char tx_array[16];

ISR(USART_RX_vect){
 242:	1f 92       	push	r1
 244:	0f 92       	push	r0
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
 24c:	8f 93       	push	r24
 24e:	9f 93       	push	r25
 250:	ef 93       	push	r30
 252:	ff 93       	push	r31
  static uint8_t i;
  rx_char = UDR0;//get character
 254:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 258:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <rx_char>
  rx_array[i++]=rx_char;//store in array
 25c:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <i.2057>
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	9e 0f       	add	r25, r30
 264:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <i.2057>
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	e2 5f       	subi	r30, 0xF2	; 242
 26c:	fe 4f       	sbci	r31, 0xFE	; 254
 26e:	80 83       	st	Z, r24
  if (rx_char=='\0') {
 270:	81 11       	cpse	r24, r1
 272:	08 c0       	rjmp	.+16     	; 0x284 <__vector_18+0x42>
    rcv_rdy ^=(1<<BIT0);;
 274:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <rcv_rdy>
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	89 27       	eor	r24, r25
 27c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <rcv_rdy>
    i=0;//reset counter
 280:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <i.2057>
  }
}
 284:	ff 91       	pop	r31
 286:	ef 91       	pop	r30
 288:	9f 91       	pop	r25
 28a:	8f 91       	pop	r24
 28c:	0f 90       	pop	r0
 28e:	0f be       	out	0x3f, r0	; 63
 290:	0f 90       	pop	r0
 292:	1f 90       	pop	r1
 294:	18 95       	reti

00000296 <main>:


int main()
{
  uart_init();
 296:	0e 94 b4 01 	call	0x368	; 0x368 <uart_init>
  sei();
 29a:	78 94       	sei
  DDRB = 0x20;// Setting LED Pin as output
 29c:	80 e2       	ldi	r24, 0x20	; 32
 29e:	84 b9       	out	0x04, r24	; 4
  //SHT21 Temperature value
  uint16_t SHT21_temp_val;
  uint8_t fc_toggle = 0;
 2a0:	d0 e0       	ldi	r29, 0x00	; 0

  while (1) {
    SHT21_temp_val = read_temperature_SHT21();//read temperature sensor
    _delay_ms(500);//for testing
    PORTB ^= (1<<5);//for testing
 2a2:	c0 e2       	ldi	r28, 0x20	; 32
    _delay_ms(500);//for testing
    PORTB ^= (1<<5);//for testings

    if (rcv_rdy==1) {
      rcv_rdy ^= (1<<BIT0);
 2a4:	11 e0       	ldi	r17, 0x01	; 1
  //SHT21 Temperature value
  uint16_t SHT21_temp_val;
  uint8_t fc_toggle = 0;

  while (1) {
    SHT21_temp_val = read_temperature_SHT21();//read temperature sensor
 2a6:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <read_temperature_SHT21>
 2aa:	bc 01       	movw	r22, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ac:	2f ef       	ldi	r18, 0xFF	; 255
 2ae:	89 e6       	ldi	r24, 0x69	; 105
 2b0:	98 e1       	ldi	r25, 0x18	; 24
 2b2:	21 50       	subi	r18, 0x01	; 1
 2b4:	80 40       	sbci	r24, 0x00	; 0
 2b6:	90 40       	sbci	r25, 0x00	; 0
 2b8:	e1 f7       	brne	.-8      	; 0x2b2 <main+0x1c>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <main+0x26>
 2bc:	00 00       	nop
    _delay_ms(500);//for testing
    PORTB ^= (1<<5);//for testing
 2be:	95 b1       	in	r25, 0x05	; 5
 2c0:	9c 27       	eor	r25, r28
 2c2:	95 b9       	out	0x05, r25	; 5
 2c4:	2f ef       	ldi	r18, 0xFF	; 255
 2c6:	89 e6       	ldi	r24, 0x69	; 105
 2c8:	98 e1       	ldi	r25, 0x18	; 24
 2ca:	21 50       	subi	r18, 0x01	; 1
 2cc:	80 40       	sbci	r24, 0x00	; 0
 2ce:	90 40       	sbci	r25, 0x00	; 0
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <main+0x34>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <main+0x3e>
 2d4:	00 00       	nop
    _delay_ms(500);//for testing
    PORTB ^= (1<<5);//for testings
 2d6:	95 b1       	in	r25, 0x05	; 5
 2d8:	9c 27       	eor	r25, r28
 2da:	95 b9       	out	0x05, r25	; 5

    if (rcv_rdy==1) {
 2dc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <rcv_rdy>
 2e0:	91 30       	cpi	r25, 0x01	; 1
 2e2:	09 f7       	brne	.-62     	; 0x2a6 <main+0x10>
      rcv_rdy ^= (1<<BIT0);
 2e4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <rcv_rdy>
 2e8:	81 27       	eor	r24, r17
 2ea:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <rcv_rdy>
      fc_toggle ^= (1<<BIT0);
 2ee:	d1 27       	eor	r29, r17
      sht21_temp_convert(tx_array,SHT21_temp_val,fc_toggle);//convert data
 2f0:	4d 2f       	mov	r20, r29
 2f2:	8e e1       	ldi	r24, 0x1E	; 30
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <sht21_temp_convert>
      //itoa(1024,tx_array,10);
      uart_puts(tx_array);//send data back
 2fa:	8e e1       	ldi	r24, 0x1E	; 30
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	0e 94 92 01 	call	0x324	; 0x324 <uart_puts>
      uart_putc('\0');
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	0e 94 85 01 	call	0x30a	; 0x30a <uart_putc>
 308:	ce cf       	rjmp	.-100    	; 0x2a6 <main+0x10>

0000030a <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 30a:	e0 ec       	ldi	r30, 0xC0	; 192
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	90 81       	ld	r25, Z
 310:	95 ff       	sbrs	r25, 5
 312:	fd cf       	rjmp	.-6      	; 0x30e <uart_putc+0x4>
    UDR0 = data;    // Send data byte
 314:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 318:	e0 ec       	ldi	r30, 0xC0	; 192
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	85 ff       	sbrs	r24, 5
 320:	fd cf       	rjmp	.-6      	; 0x31c <uart_putc+0x12>
}
 322:	08 95       	ret

00000324 <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	ec 01       	movw	r28, r24
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 32a:	88 81       	ld	r24, Y
 32c:	88 23       	and	r24, r24
 32e:	31 f0       	breq	.+12     	; 0x33c <uart_puts+0x18>
 330:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(str[i]);
 332:	0e 94 85 01 	call	0x30a	; 0x30a <uart_putc>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 336:	89 91       	ld	r24, Y+
 338:	81 11       	cpse	r24, r1
 33a:	fb cf       	rjmp	.-10     	; 0x332 <uart_puts+0xe>
        uart_putc(str[i]);
        i++;
    }
}
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	08 95       	ret

00000342 <uart_puts_p>:

//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	ec 01       	movw	r28, r24
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
 348:	fc 01       	movw	r30, r24
 34a:	84 91       	lpm	r24, Z
 34c:	88 23       	and	r24, r24
 34e:	49 f0       	breq	.+18     	; 0x362 <uart_puts_p+0x20>
 350:	fe 01       	movw	r30, r28
        uart_putc(pgm_read_byte(str++));
 352:	21 96       	adiw	r28, 0x01	; 1
 354:	84 91       	lpm	r24, Z
 356:	0e 94 85 01 	call	0x30a	; 0x30a <uart_putc>
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
 35a:	fe 01       	movw	r30, r28
 35c:	84 91       	lpm	r24, Z
 35e:	81 11       	cpse	r24, r1
 360:	f7 cf       	rjmp	.-18     	; 0x350 <uart_puts_p+0xe>
        uart_putc(pgm_read_byte(str++));
    }
}
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	08 95       	ret

00000368 <uart_init>:
//RXD is PORT D bit 0
//TXD is PORT D bit 1

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); //INTERRUPTS ENABLED
 368:	e1 ec       	ldi	r30, 0xC1	; 193
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	80 81       	ld	r24, Z
 36e:	88 69       	ori	r24, 0x98	; 152
 370:	80 83       	st	Z, r24
//UCSR0B |= (1<<RXEN0) | (1<<TXEN0);               //INTERRUPS DISABLED

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 372:	e2 ec       	ldi	r30, 0xC2	; 194
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	80 81       	ld	r24, Z
 378:	86 60       	ori	r24, 0x06	; 6
 37a:	80 83       	st	Z, r24
  UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
 37c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
 380:	87 e6       	ldi	r24, 0x67	; 103
 382:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 386:	08 95       	ret

00000388 <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
 388:	80 e8       	ldi	r24, 0x80	; 128
 38a:	9e e3       	ldi	r25, 0x3E	; 62
 38c:	e0 ec       	ldi	r30, 0xC0	; 192
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	02 c0       	rjmp	.+4      	; 0x396 <uart_getc+0xe>
 392:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
 394:	31 f0       	breq	.+12     	; 0x3a2 <uart_getc+0x1a>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
 396:	20 81       	ld	r18, Z
 398:	22 23       	and	r18, r18
 39a:	dc f7       	brge	.-10     	; 0x392 <uart_getc+0xa>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
 39c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 3a0:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
 3a2:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
 3a4:	08 95       	ret

000003a6 <read_temperature_SHT21>:
  // sht21_wr_buf[0]=SHT21_SOFT_RESET;
  // twi_start_wr(SHT21_ADDRESS,sht21_wr_buf,1);//reset the system
  // _delay_ms(100);
  //Variable used to return temp value from read_temperature_SHT21I()
  uint16_t sht21_temperature;
  sht21_wr_buf[0]=SHT21_HOLD_TEMP;
 3a6:	83 ee       	ldi	r24, 0xE3	; 227
 3a8:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <sht21_wr_buf>
  twi_start_wr(SHT21_ADDRESS,sht21_wr_buf,1);
 3ac:	41 e0       	ldi	r20, 0x01	; 1
 3ae:	62 e8       	ldi	r22, 0x82	; 130
 3b0:	71 e0       	ldi	r23, 0x01	; 1
 3b2:	80 e8       	ldi	r24, 0x80	; 128
 3b4:	0e 94 bc 02 	call	0x578	; 0x578 <twi_start_wr>
  twi_start_rd(SHT21_ADDRESS,sht21_rd_buf,2);
 3b8:	42 e0       	ldi	r20, 0x02	; 2
 3ba:	6f e7       	ldi	r22, 0x7F	; 127
 3bc:	71 e0       	ldi	r23, 0x01	; 1
 3be:	80 e8       	ldi	r24, 0x80	; 128
 3c0:	0e 94 ce 02 	call	0x59c	; 0x59c <twi_start_rd>
  sht21_temperature = sht21_rd_buf[0];
 3c4:	ef e7       	ldi	r30, 0x7F	; 127
 3c6:	f1 e0       	ldi	r31, 0x01	; 1
 3c8:	80 81       	ld	r24, Z
 3ca:	90 e0       	ldi	r25, 0x00	; 0
  sht21_temperature = sht21_temperature<<8;//LS by 8
 3cc:	98 2f       	mov	r25, r24
 3ce:	88 27       	eor	r24, r24
  sht21_temperature |= sht21_rd_buf[1];
 3d0:	21 81       	ldd	r18, Z+1	; 0x01
 3d2:	82 2b       	or	r24, r18
  sht21_temperature &= ~(1<<BIT0);
  sht21_temperature &= ~(1<<BIT1);

  return sht21_temperature;

}
 3d4:	8c 7f       	andi	r24, 0xFC	; 252
 3d6:	08 95       	ret

000003d8 <sht21_temp_convert>:
  - uint8_t f_not_c:
      This is the flag that determines if the conversion is sent out
      as Farenheit or Celcius. 0x00=Celcius and 0x01=Farenheit
Return: VOID
***********************************************************/
void sht21_temp_convert(char temp_digits[], uint16_t sht21_temp, uint8_t f_not_c){
 3d8:	0f 93       	push	r16
 3da:	1f 93       	push	r17
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	ec 01       	movw	r28, r24
 3e2:	14 2f       	mov	r17, r20
  float temperature = -46.85 + (175.72/65536)*(float)sht21_temp;//conversion formula from DS
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__floatunsisf>
 3ec:	22 e5       	ldi	r18, 0x52	; 82
 3ee:	38 eb       	ldi	r19, 0xB8	; 184
 3f0:	4f e2       	ldi	r20, 0x2F	; 47
 3f2:	5b e3       	ldi	r21, 0x3B	; 59
 3f4:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__mulsf3>
 3f8:	26 e6       	ldi	r18, 0x66	; 102
 3fa:	36 e6       	ldi	r19, 0x66	; 102
 3fc:	4b e3       	ldi	r20, 0x3B	; 59
 3fe:	52 e4       	ldi	r21, 0x42	; 66
 400:	0e 94 ef 02 	call	0x5de	; 0x5de <__subsf3>
  if (f_not_c) {//Convert farenheit
 404:	11 23       	and	r17, r17
 406:	d1 f0       	breq	.+52     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
    temperature = (temperature*(9.0/5.0))+32;//Farenheit
 408:	26 e6       	ldi	r18, 0x66	; 102
 40a:	36 e6       	ldi	r19, 0x66	; 102
 40c:	46 ee       	ldi	r20, 0xE6	; 230
 40e:	5f e3       	ldi	r21, 0x3F	; 63
 410:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__mulsf3>
    dtostrf(temperature,5,2,temp_digits);
 414:	20 e0       	ldi	r18, 0x00	; 0
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	40 e0       	ldi	r20, 0x00	; 0
 41a:	52 e4       	ldi	r21, 0x42	; 66
 41c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__addsf3>
 420:	8e 01       	movw	r16, r28
 422:	22 e0       	ldi	r18, 0x02	; 2
 424:	45 e0       	ldi	r20, 0x05	; 5
 426:	0e 94 57 04 	call	0x8ae	; 0x8ae <dtostrf>
    strcat(temp_digits,"F");//Add DEF F
 42a:	09 90       	ld	r0, Y+
 42c:	00 20       	and	r0, r0
 42e:	e9 f7       	brne	.-6      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 430:	21 97       	sbiw	r28, 0x01	; 1
 432:	86 e4       	ldi	r24, 0x46	; 70
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	99 83       	std	Y+1, r25	; 0x01
 438:	88 83       	st	Y, r24
 43a:	0d c0       	rjmp	.+26     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
  }else{//keep Celcius
    dtostrf(temperature,5,2,temp_digits);
 43c:	8e 01       	movw	r16, r28
 43e:	22 e0       	ldi	r18, 0x02	; 2
 440:	45 e0       	ldi	r20, 0x05	; 5
 442:	0e 94 57 04 	call	0x8ae	; 0x8ae <dtostrf>
    strcat(temp_digits, "C");//ADD DEG C
 446:	09 90       	ld	r0, Y+
 448:	00 20       	and	r0, r0
 44a:	e9 f7       	brne	.-6      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 44c:	21 97       	sbiw	r28, 0x01	; 1
 44e:	83 e4       	ldi	r24, 0x43	; 67
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	99 83       	std	Y+1, r25	; 0x01
 454:	88 83       	st	Y, r24
  }
}
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	1f 91       	pop	r17
 45c:	0f 91       	pop	r16
 45e:	08 95       	ret

00000460 <__vector_24>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
 460:	1f 92       	push	r1
 462:	0f 92       	push	r0
 464:	0f b6       	in	r0, 0x3f	; 63
 466:	0f 92       	push	r0
 468:	11 24       	eor	r1, r1
 46a:	2f 93       	push	r18
 46c:	3f 93       	push	r19
 46e:	8f 93       	push	r24
 470:	9f 93       	push	r25
 472:	af 93       	push	r26
 474:	bf 93       	push	r27
 476:	ef 93       	push	r30
 478:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
 47a:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 47e:	8e 2f       	mov	r24, r30
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	fc 01       	movw	r30, r24
 484:	38 97       	sbiw	r30, 0x08	; 8
 486:	e1 35       	cpi	r30, 0x51	; 81
 488:	f1 05       	cpc	r31, r1
 48a:	08 f0       	brcs	.+2      	; 0x48e <__vector_24+0x2e>
 48c:	5d c0       	rjmp	.+186    	; 0x548 <__stack+0x49>
 48e:	ec 5c       	subi	r30, 0xCC	; 204
 490:	ff 4f       	sbci	r31, 0xFF	; 255
 492:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__tablejump2__>
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
 496:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <twi_bus_addr>
 49a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      twi_buf_ptr = 0;      //initalize buffer pointer 
 49e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <twi_buf_ptr.1780>
      TWCR = TWCR_SEND;     //send SLA+RW
 4a2:	85 e8       	ldi	r24, 0x85	; 133
 4a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
      break;
 4a8:	56 c0       	rjmp	.+172    	; 0x556 <__stack+0x57>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
 4aa:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <twi_buf_ptr.1780>
 4ae:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <twi_msg_size>
 4b2:	89 17       	cp	r24, r25
 4b4:	88 f4       	brcc	.+34     	; 0x4d8 <__vector_24+0x78>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
 4b6:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <twi_buf>
 4ba:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <twi_buf+0x1>
 4be:	91 e0       	ldi	r25, 0x01	; 1
 4c0:	98 0f       	add	r25, r24
 4c2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <twi_buf_ptr.1780>
 4c6:	e8 0f       	add	r30, r24
 4c8:	f1 1d       	adc	r31, r1
 4ca:	80 81       	ld	r24, Z
 4cc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = TWCR_SEND;               //send next byte 
 4d0:	85 e8       	ldi	r24, 0x85	; 133
 4d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 4d6:	3f c0       	rjmp	.+126    	; 0x556 <__stack+0x57>
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
 4d8:	84 e9       	ldi	r24, 0x94	; 148
 4da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 4de:	3b c0       	rjmp	.+118    	; 0x556 <__stack+0x57>
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
 4e0:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <twi_buf>
 4e4:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <twi_buf+0x1>
 4e8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <twi_buf_ptr.1780>
 4ec:	91 e0       	ldi	r25, 0x01	; 1
 4ee:	98 0f       	add	r25, r24
 4f0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <twi_buf_ptr.1780>
 4f4:	e8 0f       	add	r30, r24
 4f6:	f1 1d       	adc	r31, r1
 4f8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 4fc:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
 4fe:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <twi_msg_size>
 502:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <twi_buf_ptr.1780>
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	01 97       	sbiw	r24, 0x01	; 1
 50c:	28 17       	cp	r18, r24
 50e:	39 07       	cpc	r19, r25
 510:	24 f4       	brge	.+8      	; 0x51a <__stack+0x1b>
 512:	85 ec       	ldi	r24, 0xC5	; 197
 514:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 518:	1e c0       	rjmp	.+60     	; 0x556 <__stack+0x57>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
 51a:	85 e8       	ldi	r24, 0x85	; 133
 51c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 520:	1a c0       	rjmp	.+52     	; 0x556 <__stack+0x57>
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
 522:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <twi_buf_ptr.1780>
 526:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <twi_buf>
 52a:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <twi_buf+0x1>
 52e:	e8 0f       	add	r30, r24
 530:	f1 1d       	adc	r31, r1
 532:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 536:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
 538:	84 e9       	ldi	r24, 0x94	; 148
 53a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
      break;      
 53e:	0b c0       	rjmp	.+22     	; 0x556 <__stack+0x57>
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
 540:	85 ea       	ldi	r24, 0xA5	; 165
 542:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
      break;
 546:	07 c0       	rjmp	.+14     	; 0x556 <__stack+0x57>
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
 548:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 54c:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <twi_state>
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
 550:	84 e0       	ldi	r24, 0x04	; 4
 552:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  }//switch
}//TWI_isr
 556:	ff 91       	pop	r31
 558:	ef 91       	pop	r30
 55a:	bf 91       	pop	r27
 55c:	af 91       	pop	r26
 55e:	9f 91       	pop	r25
 560:	8f 91       	pop	r24
 562:	3f 91       	pop	r19
 564:	2f 91       	pop	r18
 566:	0f 90       	pop	r0
 568:	0f be       	out	0x3f, r0	; 63
 56a:	0f 90       	pop	r0
 56c:	1f 90       	pop	r1
 56e:	18 95       	reti

00000570 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 570:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}
 574:	81 70       	andi	r24, 0x01	; 1
 576:	08 95       	ret

00000578 <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 578:	ec eb       	ldi	r30, 0xBC	; 188
 57a:	f0 e0       	ldi	r31, 0x00	; 0
 57c:	90 81       	ld	r25, Z
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
 57e:	90 fd       	sbrc	r25, 0
 580:	fd cf       	rjmp	.-6      	; 0x57c <twi_start_wr+0x4>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
 582:	8e 7f       	andi	r24, 0xFE	; 254
 584:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <twi_bus_addr>
  twi_buf = twi_data;                   //load pointer to write buffer
 588:	70 93 86 01 	sts	0x0186, r23	; 0x800186 <twi_buf+0x1>
 58c:	60 93 85 01 	sts	0x0185, r22	; 0x800185 <twi_buf>
  twi_msg_size = byte_cnt;              //load size of xfer 
 590:	40 93 88 01 	sts	0x0188, r20	; 0x800188 <twi_msg_size>
  TWCR = TWCR_START;                    //initiate START
 594:	85 ea       	ldi	r24, 0xA5	; 165
 596:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 59a:	08 95       	ret

0000059c <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 59c:	ec eb       	ldi	r30, 0xBC	; 188
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	90 81       	ld	r25, Z
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
 5a2:	90 fd       	sbrc	r25, 0
 5a4:	fd cf       	rjmp	.-6      	; 0x5a0 <twi_start_rd+0x4>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
 5a6:	81 60       	ori	r24, 0x01	; 1
 5a8:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <twi_bus_addr>
  twi_buf = twi_data;                  //load pointer to write buffer
 5ac:	70 93 86 01 	sts	0x0186, r23	; 0x800186 <twi_buf+0x1>
 5b0:	60 93 85 01 	sts	0x0185, r22	; 0x800185 <twi_buf>
  twi_msg_size = byte_cnt;             //load size of xfer 
 5b4:	40 93 88 01 	sts	0x0188, r20	; 0x800188 <twi_msg_size>
  TWCR = TWCR_START;                   //initiate START
 5b8:	85 ea       	ldi	r24, 0xA5	; 165
 5ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 5be:	08 95       	ret

000005c0 <init_twi>:
//10K pullups are present on the board
//for alarm clock an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
 5c0:	8f ef       	ldi	r24, 0xFF	; 255
 5c2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  TWSR = 0x00;     //prescaler value = 1
 5c6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  TWBR = TWI_TWBR; //defined in twi_master.h 
 5ca:	8c e0       	ldi	r24, 0x0C	; 12
 5cc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 5d0:	08 95       	ret

000005d2 <__tablejump2__>:
 5d2:	ee 0f       	add	r30, r30
 5d4:	ff 1f       	adc	r31, r31
 5d6:	05 90       	lpm	r0, Z+
 5d8:	f4 91       	lpm	r31, Z
 5da:	e0 2d       	mov	r30, r0
 5dc:	09 94       	ijmp

000005de <__subsf3>:
 5de:	50 58       	subi	r21, 0x80	; 128

000005e0 <__addsf3>:
 5e0:	bb 27       	eor	r27, r27
 5e2:	aa 27       	eor	r26, r26
 5e4:	0e 94 07 03 	call	0x60e	; 0x60e <__addsf3x>
 5e8:	0c 94 b0 03 	jmp	0x760	; 0x760 <__fp_round>
 5ec:	0e 94 a2 03 	call	0x744	; 0x744 <__fp_pscA>
 5f0:	38 f0       	brcs	.+14     	; 0x600 <__addsf3+0x20>
 5f2:	0e 94 a9 03 	call	0x752	; 0x752 <__fp_pscB>
 5f6:	20 f0       	brcs	.+8      	; 0x600 <__addsf3+0x20>
 5f8:	39 f4       	brne	.+14     	; 0x608 <__addsf3+0x28>
 5fa:	9f 3f       	cpi	r25, 0xFF	; 255
 5fc:	19 f4       	brne	.+6      	; 0x604 <__addsf3+0x24>
 5fe:	26 f4       	brtc	.+8      	; 0x608 <__addsf3+0x28>
 600:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__fp_nan>
 604:	0e f4       	brtc	.+2      	; 0x608 <__addsf3+0x28>
 606:	e0 95       	com	r30
 608:	e7 fb       	bst	r30, 7
 60a:	0c 94 99 03 	jmp	0x732	; 0x732 <__fp_inf>

0000060e <__addsf3x>:
 60e:	e9 2f       	mov	r30, r25
 610:	0e 94 c1 03 	call	0x782	; 0x782 <__fp_split3>
 614:	58 f3       	brcs	.-42     	; 0x5ec <__addsf3+0xc>
 616:	ba 17       	cp	r27, r26
 618:	62 07       	cpc	r22, r18
 61a:	73 07       	cpc	r23, r19
 61c:	84 07       	cpc	r24, r20
 61e:	95 07       	cpc	r25, r21
 620:	20 f0       	brcs	.+8      	; 0x62a <__addsf3x+0x1c>
 622:	79 f4       	brne	.+30     	; 0x642 <__addsf3x+0x34>
 624:	a6 f5       	brtc	.+104    	; 0x68e <__addsf3x+0x80>
 626:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__fp_zero>
 62a:	0e f4       	brtc	.+2      	; 0x62e <__addsf3x+0x20>
 62c:	e0 95       	com	r30
 62e:	0b 2e       	mov	r0, r27
 630:	ba 2f       	mov	r27, r26
 632:	a0 2d       	mov	r26, r0
 634:	0b 01       	movw	r0, r22
 636:	b9 01       	movw	r22, r18
 638:	90 01       	movw	r18, r0
 63a:	0c 01       	movw	r0, r24
 63c:	ca 01       	movw	r24, r20
 63e:	a0 01       	movw	r20, r0
 640:	11 24       	eor	r1, r1
 642:	ff 27       	eor	r31, r31
 644:	59 1b       	sub	r21, r25
 646:	99 f0       	breq	.+38     	; 0x66e <__addsf3x+0x60>
 648:	59 3f       	cpi	r21, 0xF9	; 249
 64a:	50 f4       	brcc	.+20     	; 0x660 <__addsf3x+0x52>
 64c:	50 3e       	cpi	r21, 0xE0	; 224
 64e:	68 f1       	brcs	.+90     	; 0x6aa <__addsf3x+0x9c>
 650:	1a 16       	cp	r1, r26
 652:	f0 40       	sbci	r31, 0x00	; 0
 654:	a2 2f       	mov	r26, r18
 656:	23 2f       	mov	r18, r19
 658:	34 2f       	mov	r19, r20
 65a:	44 27       	eor	r20, r20
 65c:	58 5f       	subi	r21, 0xF8	; 248
 65e:	f3 cf       	rjmp	.-26     	; 0x646 <__addsf3x+0x38>
 660:	46 95       	lsr	r20
 662:	37 95       	ror	r19
 664:	27 95       	ror	r18
 666:	a7 95       	ror	r26
 668:	f0 40       	sbci	r31, 0x00	; 0
 66a:	53 95       	inc	r21
 66c:	c9 f7       	brne	.-14     	; 0x660 <__addsf3x+0x52>
 66e:	7e f4       	brtc	.+30     	; 0x68e <__addsf3x+0x80>
 670:	1f 16       	cp	r1, r31
 672:	ba 0b       	sbc	r27, r26
 674:	62 0b       	sbc	r22, r18
 676:	73 0b       	sbc	r23, r19
 678:	84 0b       	sbc	r24, r20
 67a:	ba f0       	brmi	.+46     	; 0x6aa <__addsf3x+0x9c>
 67c:	91 50       	subi	r25, 0x01	; 1
 67e:	a1 f0       	breq	.+40     	; 0x6a8 <__addsf3x+0x9a>
 680:	ff 0f       	add	r31, r31
 682:	bb 1f       	adc	r27, r27
 684:	66 1f       	adc	r22, r22
 686:	77 1f       	adc	r23, r23
 688:	88 1f       	adc	r24, r24
 68a:	c2 f7       	brpl	.-16     	; 0x67c <__addsf3x+0x6e>
 68c:	0e c0       	rjmp	.+28     	; 0x6aa <__addsf3x+0x9c>
 68e:	ba 0f       	add	r27, r26
 690:	62 1f       	adc	r22, r18
 692:	73 1f       	adc	r23, r19
 694:	84 1f       	adc	r24, r20
 696:	48 f4       	brcc	.+18     	; 0x6aa <__addsf3x+0x9c>
 698:	87 95       	ror	r24
 69a:	77 95       	ror	r23
 69c:	67 95       	ror	r22
 69e:	b7 95       	ror	r27
 6a0:	f7 95       	ror	r31
 6a2:	9e 3f       	cpi	r25, 0xFE	; 254
 6a4:	08 f0       	brcs	.+2      	; 0x6a8 <__addsf3x+0x9a>
 6a6:	b0 cf       	rjmp	.-160    	; 0x608 <__addsf3+0x28>
 6a8:	93 95       	inc	r25
 6aa:	88 0f       	add	r24, r24
 6ac:	08 f0       	brcs	.+2      	; 0x6b0 <__addsf3x+0xa2>
 6ae:	99 27       	eor	r25, r25
 6b0:	ee 0f       	add	r30, r30
 6b2:	97 95       	ror	r25
 6b4:	87 95       	ror	r24
 6b6:	08 95       	ret

000006b8 <__floatunsisf>:
 6b8:	e8 94       	clt
 6ba:	09 c0       	rjmp	.+18     	; 0x6ce <__floatsisf+0x12>

000006bc <__floatsisf>:
 6bc:	97 fb       	bst	r25, 7
 6be:	3e f4       	brtc	.+14     	; 0x6ce <__floatsisf+0x12>
 6c0:	90 95       	com	r25
 6c2:	80 95       	com	r24
 6c4:	70 95       	com	r23
 6c6:	61 95       	neg	r22
 6c8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ca:	8f 4f       	sbci	r24, 0xFF	; 255
 6cc:	9f 4f       	sbci	r25, 0xFF	; 255
 6ce:	99 23       	and	r25, r25
 6d0:	a9 f0       	breq	.+42     	; 0x6fc <__floatsisf+0x40>
 6d2:	f9 2f       	mov	r31, r25
 6d4:	96 e9       	ldi	r25, 0x96	; 150
 6d6:	bb 27       	eor	r27, r27
 6d8:	93 95       	inc	r25
 6da:	f6 95       	lsr	r31
 6dc:	87 95       	ror	r24
 6de:	77 95       	ror	r23
 6e0:	67 95       	ror	r22
 6e2:	b7 95       	ror	r27
 6e4:	f1 11       	cpse	r31, r1
 6e6:	f8 cf       	rjmp	.-16     	; 0x6d8 <__floatsisf+0x1c>
 6e8:	fa f4       	brpl	.+62     	; 0x728 <__floatsisf+0x6c>
 6ea:	bb 0f       	add	r27, r27
 6ec:	11 f4       	brne	.+4      	; 0x6f2 <__floatsisf+0x36>
 6ee:	60 ff       	sbrs	r22, 0
 6f0:	1b c0       	rjmp	.+54     	; 0x728 <__floatsisf+0x6c>
 6f2:	6f 5f       	subi	r22, 0xFF	; 255
 6f4:	7f 4f       	sbci	r23, 0xFF	; 255
 6f6:	8f 4f       	sbci	r24, 0xFF	; 255
 6f8:	9f 4f       	sbci	r25, 0xFF	; 255
 6fa:	16 c0       	rjmp	.+44     	; 0x728 <__floatsisf+0x6c>
 6fc:	88 23       	and	r24, r24
 6fe:	11 f0       	breq	.+4      	; 0x704 <__floatsisf+0x48>
 700:	96 e9       	ldi	r25, 0x96	; 150
 702:	11 c0       	rjmp	.+34     	; 0x726 <__floatsisf+0x6a>
 704:	77 23       	and	r23, r23
 706:	21 f0       	breq	.+8      	; 0x710 <__floatsisf+0x54>
 708:	9e e8       	ldi	r25, 0x8E	; 142
 70a:	87 2f       	mov	r24, r23
 70c:	76 2f       	mov	r23, r22
 70e:	05 c0       	rjmp	.+10     	; 0x71a <__floatsisf+0x5e>
 710:	66 23       	and	r22, r22
 712:	71 f0       	breq	.+28     	; 0x730 <__floatsisf+0x74>
 714:	96 e8       	ldi	r25, 0x86	; 134
 716:	86 2f       	mov	r24, r22
 718:	70 e0       	ldi	r23, 0x00	; 0
 71a:	60 e0       	ldi	r22, 0x00	; 0
 71c:	2a f0       	brmi	.+10     	; 0x728 <__floatsisf+0x6c>
 71e:	9a 95       	dec	r25
 720:	66 0f       	add	r22, r22
 722:	77 1f       	adc	r23, r23
 724:	88 1f       	adc	r24, r24
 726:	da f7       	brpl	.-10     	; 0x71e <__floatsisf+0x62>
 728:	88 0f       	add	r24, r24
 72a:	96 95       	lsr	r25
 72c:	87 95       	ror	r24
 72e:	97 f9       	bld	r25, 7
 730:	08 95       	ret

00000732 <__fp_inf>:
 732:	97 f9       	bld	r25, 7
 734:	9f 67       	ori	r25, 0x7F	; 127
 736:	80 e8       	ldi	r24, 0x80	; 128
 738:	70 e0       	ldi	r23, 0x00	; 0
 73a:	60 e0       	ldi	r22, 0x00	; 0
 73c:	08 95       	ret

0000073e <__fp_nan>:
 73e:	9f ef       	ldi	r25, 0xFF	; 255
 740:	80 ec       	ldi	r24, 0xC0	; 192
 742:	08 95       	ret

00000744 <__fp_pscA>:
 744:	00 24       	eor	r0, r0
 746:	0a 94       	dec	r0
 748:	16 16       	cp	r1, r22
 74a:	17 06       	cpc	r1, r23
 74c:	18 06       	cpc	r1, r24
 74e:	09 06       	cpc	r0, r25
 750:	08 95       	ret

00000752 <__fp_pscB>:
 752:	00 24       	eor	r0, r0
 754:	0a 94       	dec	r0
 756:	12 16       	cp	r1, r18
 758:	13 06       	cpc	r1, r19
 75a:	14 06       	cpc	r1, r20
 75c:	05 06       	cpc	r0, r21
 75e:	08 95       	ret

00000760 <__fp_round>:
 760:	09 2e       	mov	r0, r25
 762:	03 94       	inc	r0
 764:	00 0c       	add	r0, r0
 766:	11 f4       	brne	.+4      	; 0x76c <__fp_round+0xc>
 768:	88 23       	and	r24, r24
 76a:	52 f0       	brmi	.+20     	; 0x780 <__fp_round+0x20>
 76c:	bb 0f       	add	r27, r27
 76e:	40 f4       	brcc	.+16     	; 0x780 <__fp_round+0x20>
 770:	bf 2b       	or	r27, r31
 772:	11 f4       	brne	.+4      	; 0x778 <__fp_round+0x18>
 774:	60 ff       	sbrs	r22, 0
 776:	04 c0       	rjmp	.+8      	; 0x780 <__fp_round+0x20>
 778:	6f 5f       	subi	r22, 0xFF	; 255
 77a:	7f 4f       	sbci	r23, 0xFF	; 255
 77c:	8f 4f       	sbci	r24, 0xFF	; 255
 77e:	9f 4f       	sbci	r25, 0xFF	; 255
 780:	08 95       	ret

00000782 <__fp_split3>:
 782:	57 fd       	sbrc	r21, 7
 784:	90 58       	subi	r25, 0x80	; 128
 786:	44 0f       	add	r20, r20
 788:	55 1f       	adc	r21, r21
 78a:	59 f0       	breq	.+22     	; 0x7a2 <__fp_splitA+0x10>
 78c:	5f 3f       	cpi	r21, 0xFF	; 255
 78e:	71 f0       	breq	.+28     	; 0x7ac <__fp_splitA+0x1a>
 790:	47 95       	ror	r20

00000792 <__fp_splitA>:
 792:	88 0f       	add	r24, r24
 794:	97 fb       	bst	r25, 7
 796:	99 1f       	adc	r25, r25
 798:	61 f0       	breq	.+24     	; 0x7b2 <__fp_splitA+0x20>
 79a:	9f 3f       	cpi	r25, 0xFF	; 255
 79c:	79 f0       	breq	.+30     	; 0x7bc <__fp_splitA+0x2a>
 79e:	87 95       	ror	r24
 7a0:	08 95       	ret
 7a2:	12 16       	cp	r1, r18
 7a4:	13 06       	cpc	r1, r19
 7a6:	14 06       	cpc	r1, r20
 7a8:	55 1f       	adc	r21, r21
 7aa:	f2 cf       	rjmp	.-28     	; 0x790 <__fp_split3+0xe>
 7ac:	46 95       	lsr	r20
 7ae:	f1 df       	rcall	.-30     	; 0x792 <__fp_splitA>
 7b0:	08 c0       	rjmp	.+16     	; 0x7c2 <__fp_splitA+0x30>
 7b2:	16 16       	cp	r1, r22
 7b4:	17 06       	cpc	r1, r23
 7b6:	18 06       	cpc	r1, r24
 7b8:	99 1f       	adc	r25, r25
 7ba:	f1 cf       	rjmp	.-30     	; 0x79e <__fp_splitA+0xc>
 7bc:	86 95       	lsr	r24
 7be:	71 05       	cpc	r23, r1
 7c0:	61 05       	cpc	r22, r1
 7c2:	08 94       	sec
 7c4:	08 95       	ret

000007c6 <__fp_zero>:
 7c6:	e8 94       	clt

000007c8 <__fp_szero>:
 7c8:	bb 27       	eor	r27, r27
 7ca:	66 27       	eor	r22, r22
 7cc:	77 27       	eor	r23, r23
 7ce:	cb 01       	movw	r24, r22
 7d0:	97 f9       	bld	r25, 7
 7d2:	08 95       	ret

000007d4 <__mulsf3>:
 7d4:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__mulsf3x>
 7d8:	0c 94 b0 03 	jmp	0x760	; 0x760 <__fp_round>
 7dc:	0e 94 a2 03 	call	0x744	; 0x744 <__fp_pscA>
 7e0:	38 f0       	brcs	.+14     	; 0x7f0 <__mulsf3+0x1c>
 7e2:	0e 94 a9 03 	call	0x752	; 0x752 <__fp_pscB>
 7e6:	20 f0       	brcs	.+8      	; 0x7f0 <__mulsf3+0x1c>
 7e8:	95 23       	and	r25, r21
 7ea:	11 f0       	breq	.+4      	; 0x7f0 <__mulsf3+0x1c>
 7ec:	0c 94 99 03 	jmp	0x732	; 0x732 <__fp_inf>
 7f0:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__fp_nan>
 7f4:	11 24       	eor	r1, r1
 7f6:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__fp_szero>

000007fa <__mulsf3x>:
 7fa:	0e 94 c1 03 	call	0x782	; 0x782 <__fp_split3>
 7fe:	70 f3       	brcs	.-36     	; 0x7dc <__mulsf3+0x8>

00000800 <__mulsf3_pse>:
 800:	95 9f       	mul	r25, r21
 802:	c1 f3       	breq	.-16     	; 0x7f4 <__mulsf3+0x20>
 804:	95 0f       	add	r25, r21
 806:	50 e0       	ldi	r21, 0x00	; 0
 808:	55 1f       	adc	r21, r21
 80a:	62 9f       	mul	r22, r18
 80c:	f0 01       	movw	r30, r0
 80e:	72 9f       	mul	r23, r18
 810:	bb 27       	eor	r27, r27
 812:	f0 0d       	add	r31, r0
 814:	b1 1d       	adc	r27, r1
 816:	63 9f       	mul	r22, r19
 818:	aa 27       	eor	r26, r26
 81a:	f0 0d       	add	r31, r0
 81c:	b1 1d       	adc	r27, r1
 81e:	aa 1f       	adc	r26, r26
 820:	64 9f       	mul	r22, r20
 822:	66 27       	eor	r22, r22
 824:	b0 0d       	add	r27, r0
 826:	a1 1d       	adc	r26, r1
 828:	66 1f       	adc	r22, r22
 82a:	82 9f       	mul	r24, r18
 82c:	22 27       	eor	r18, r18
 82e:	b0 0d       	add	r27, r0
 830:	a1 1d       	adc	r26, r1
 832:	62 1f       	adc	r22, r18
 834:	73 9f       	mul	r23, r19
 836:	b0 0d       	add	r27, r0
 838:	a1 1d       	adc	r26, r1
 83a:	62 1f       	adc	r22, r18
 83c:	83 9f       	mul	r24, r19
 83e:	a0 0d       	add	r26, r0
 840:	61 1d       	adc	r22, r1
 842:	22 1f       	adc	r18, r18
 844:	74 9f       	mul	r23, r20
 846:	33 27       	eor	r19, r19
 848:	a0 0d       	add	r26, r0
 84a:	61 1d       	adc	r22, r1
 84c:	23 1f       	adc	r18, r19
 84e:	84 9f       	mul	r24, r20
 850:	60 0d       	add	r22, r0
 852:	21 1d       	adc	r18, r1
 854:	82 2f       	mov	r24, r18
 856:	76 2f       	mov	r23, r22
 858:	6a 2f       	mov	r22, r26
 85a:	11 24       	eor	r1, r1
 85c:	9f 57       	subi	r25, 0x7F	; 127
 85e:	50 40       	sbci	r21, 0x00	; 0
 860:	9a f0       	brmi	.+38     	; 0x888 <__mulsf3_pse+0x88>
 862:	f1 f0       	breq	.+60     	; 0x8a0 <__mulsf3_pse+0xa0>
 864:	88 23       	and	r24, r24
 866:	4a f0       	brmi	.+18     	; 0x87a <__mulsf3_pse+0x7a>
 868:	ee 0f       	add	r30, r30
 86a:	ff 1f       	adc	r31, r31
 86c:	bb 1f       	adc	r27, r27
 86e:	66 1f       	adc	r22, r22
 870:	77 1f       	adc	r23, r23
 872:	88 1f       	adc	r24, r24
 874:	91 50       	subi	r25, 0x01	; 1
 876:	50 40       	sbci	r21, 0x00	; 0
 878:	a9 f7       	brne	.-22     	; 0x864 <__mulsf3_pse+0x64>
 87a:	9e 3f       	cpi	r25, 0xFE	; 254
 87c:	51 05       	cpc	r21, r1
 87e:	80 f0       	brcs	.+32     	; 0x8a0 <__mulsf3_pse+0xa0>
 880:	0c 94 99 03 	jmp	0x732	; 0x732 <__fp_inf>
 884:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__fp_szero>
 888:	5f 3f       	cpi	r21, 0xFF	; 255
 88a:	e4 f3       	brlt	.-8      	; 0x884 <__mulsf3_pse+0x84>
 88c:	98 3e       	cpi	r25, 0xE8	; 232
 88e:	d4 f3       	brlt	.-12     	; 0x884 <__mulsf3_pse+0x84>
 890:	86 95       	lsr	r24
 892:	77 95       	ror	r23
 894:	67 95       	ror	r22
 896:	b7 95       	ror	r27
 898:	f7 95       	ror	r31
 89a:	e7 95       	ror	r30
 89c:	9f 5f       	subi	r25, 0xFF	; 255
 89e:	c1 f7       	brne	.-16     	; 0x890 <__mulsf3_pse+0x90>
 8a0:	fe 2b       	or	r31, r30
 8a2:	88 0f       	add	r24, r24
 8a4:	91 1d       	adc	r25, r1
 8a6:	96 95       	lsr	r25
 8a8:	87 95       	ror	r24
 8aa:	97 f9       	bld	r25, 7
 8ac:	08 95       	ret

000008ae <dtostrf>:
 8ae:	ef 92       	push	r14
 8b0:	0f 93       	push	r16
 8b2:	1f 93       	push	r17
 8b4:	cf 93       	push	r28
 8b6:	df 93       	push	r29
 8b8:	e8 01       	movw	r28, r16
 8ba:	47 fd       	sbrc	r20, 7
 8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <dtostrf+0x14>
 8be:	34 e0       	ldi	r19, 0x04	; 4
 8c0:	01 c0       	rjmp	.+2      	; 0x8c4 <dtostrf+0x16>
 8c2:	34 e1       	ldi	r19, 0x14	; 20
 8c4:	04 2e       	mov	r0, r20
 8c6:	00 0c       	add	r0, r0
 8c8:	55 0b       	sbc	r21, r21
 8ca:	57 ff       	sbrs	r21, 7
 8cc:	03 c0       	rjmp	.+6      	; 0x8d4 <dtostrf+0x26>
 8ce:	51 95       	neg	r21
 8d0:	41 95       	neg	r20
 8d2:	51 09       	sbc	r21, r1
 8d4:	e3 2e       	mov	r14, r19
 8d6:	02 2f       	mov	r16, r18
 8d8:	24 2f       	mov	r18, r20
 8da:	ae 01       	movw	r20, r28
 8dc:	0e 94 77 04 	call	0x8ee	; 0x8ee <dtoa_prf>
 8e0:	ce 01       	movw	r24, r28
 8e2:	df 91       	pop	r29
 8e4:	cf 91       	pop	r28
 8e6:	1f 91       	pop	r17
 8e8:	0f 91       	pop	r16
 8ea:	ef 90       	pop	r14
 8ec:	08 95       	ret

000008ee <dtoa_prf>:
 8ee:	a9 e0       	ldi	r26, 0x09	; 9
 8f0:	b0 e0       	ldi	r27, 0x00	; 0
 8f2:	ed e7       	ldi	r30, 0x7D	; 125
 8f4:	f4 e0       	ldi	r31, 0x04	; 4
 8f6:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__prologue_saves__+0xc>
 8fa:	6a 01       	movw	r12, r20
 8fc:	12 2f       	mov	r17, r18
 8fe:	b0 2e       	mov	r11, r16
 900:	2b e3       	ldi	r18, 0x3B	; 59
 902:	20 17       	cp	r18, r16
 904:	20 f0       	brcs	.+8      	; 0x90e <dtoa_prf+0x20>
 906:	ff 24       	eor	r15, r15
 908:	f3 94       	inc	r15
 90a:	f0 0e       	add	r15, r16
 90c:	02 c0       	rjmp	.+4      	; 0x912 <dtoa_prf+0x24>
 90e:	2c e3       	ldi	r18, 0x3C	; 60
 910:	f2 2e       	mov	r15, r18
 912:	0f 2d       	mov	r16, r15
 914:	27 e0       	ldi	r18, 0x07	; 7
 916:	ae 01       	movw	r20, r28
 918:	4f 5f       	subi	r20, 0xFF	; 255
 91a:	5f 4f       	sbci	r21, 0xFF	; 255
 91c:	0e 94 d1 05 	call	0xba2	; 0xba2 <__ftoa_engine>
 920:	bc 01       	movw	r22, r24
 922:	49 81       	ldd	r20, Y+1	; 0x01
 924:	84 2f       	mov	r24, r20
 926:	89 70       	andi	r24, 0x09	; 9
 928:	81 30       	cpi	r24, 0x01	; 1
 92a:	31 f0       	breq	.+12     	; 0x938 <dtoa_prf+0x4a>
 92c:	e1 fc       	sbrc	r14, 1
 92e:	06 c0       	rjmp	.+12     	; 0x93c <dtoa_prf+0x4e>
 930:	e0 fe       	sbrs	r14, 0
 932:	06 c0       	rjmp	.+12     	; 0x940 <dtoa_prf+0x52>
 934:	90 e2       	ldi	r25, 0x20	; 32
 936:	05 c0       	rjmp	.+10     	; 0x942 <dtoa_prf+0x54>
 938:	9d e2       	ldi	r25, 0x2D	; 45
 93a:	03 c0       	rjmp	.+6      	; 0x942 <dtoa_prf+0x54>
 93c:	9b e2       	ldi	r25, 0x2B	; 43
 93e:	01 c0       	rjmp	.+2      	; 0x942 <dtoa_prf+0x54>
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	5e 2d       	mov	r21, r14
 944:	50 71       	andi	r21, 0x10	; 16
 946:	43 ff       	sbrs	r20, 3
 948:	3c c0       	rjmp	.+120    	; 0x9c2 <dtoa_prf+0xd4>
 94a:	91 11       	cpse	r25, r1
 94c:	02 c0       	rjmp	.+4      	; 0x952 <dtoa_prf+0x64>
 94e:	83 e0       	ldi	r24, 0x03	; 3
 950:	01 c0       	rjmp	.+2      	; 0x954 <dtoa_prf+0x66>
 952:	84 e0       	ldi	r24, 0x04	; 4
 954:	81 17       	cp	r24, r17
 956:	18 f4       	brcc	.+6      	; 0x95e <dtoa_prf+0x70>
 958:	21 2f       	mov	r18, r17
 95a:	28 1b       	sub	r18, r24
 95c:	01 c0       	rjmp	.+2      	; 0x960 <dtoa_prf+0x72>
 95e:	20 e0       	ldi	r18, 0x00	; 0
 960:	51 11       	cpse	r21, r1
 962:	0b c0       	rjmp	.+22     	; 0x97a <dtoa_prf+0x8c>
 964:	f6 01       	movw	r30, r12
 966:	82 2f       	mov	r24, r18
 968:	30 e2       	ldi	r19, 0x20	; 32
 96a:	88 23       	and	r24, r24
 96c:	19 f0       	breq	.+6      	; 0x974 <dtoa_prf+0x86>
 96e:	31 93       	st	Z+, r19
 970:	81 50       	subi	r24, 0x01	; 1
 972:	fb cf       	rjmp	.-10     	; 0x96a <dtoa_prf+0x7c>
 974:	c2 0e       	add	r12, r18
 976:	d1 1c       	adc	r13, r1
 978:	20 e0       	ldi	r18, 0x00	; 0
 97a:	99 23       	and	r25, r25
 97c:	29 f0       	breq	.+10     	; 0x988 <dtoa_prf+0x9a>
 97e:	d6 01       	movw	r26, r12
 980:	9c 93       	st	X, r25
 982:	f6 01       	movw	r30, r12
 984:	31 96       	adiw	r30, 0x01	; 1
 986:	6f 01       	movw	r12, r30
 988:	c6 01       	movw	r24, r12
 98a:	03 96       	adiw	r24, 0x03	; 3
 98c:	e2 fe       	sbrs	r14, 2
 98e:	0a c0       	rjmp	.+20     	; 0x9a4 <dtoa_prf+0xb6>
 990:	3e e4       	ldi	r19, 0x4E	; 78
 992:	d6 01       	movw	r26, r12
 994:	3c 93       	st	X, r19
 996:	41 e4       	ldi	r20, 0x41	; 65
 998:	11 96       	adiw	r26, 0x01	; 1
 99a:	4c 93       	st	X, r20
 99c:	11 97       	sbiw	r26, 0x01	; 1
 99e:	12 96       	adiw	r26, 0x02	; 2
 9a0:	3c 93       	st	X, r19
 9a2:	06 c0       	rjmp	.+12     	; 0x9b0 <dtoa_prf+0xc2>
 9a4:	3e e6       	ldi	r19, 0x6E	; 110
 9a6:	f6 01       	movw	r30, r12
 9a8:	30 83       	st	Z, r19
 9aa:	41 e6       	ldi	r20, 0x61	; 97
 9ac:	41 83       	std	Z+1, r20	; 0x01
 9ae:	32 83       	std	Z+2, r19	; 0x02
 9b0:	fc 01       	movw	r30, r24
 9b2:	32 2f       	mov	r19, r18
 9b4:	40 e2       	ldi	r20, 0x20	; 32
 9b6:	33 23       	and	r19, r19
 9b8:	09 f4       	brne	.+2      	; 0x9bc <dtoa_prf+0xce>
 9ba:	42 c0       	rjmp	.+132    	; 0xa40 <dtoa_prf+0x152>
 9bc:	41 93       	st	Z+, r20
 9be:	31 50       	subi	r19, 0x01	; 1
 9c0:	fa cf       	rjmp	.-12     	; 0x9b6 <dtoa_prf+0xc8>
 9c2:	42 ff       	sbrs	r20, 2
 9c4:	44 c0       	rjmp	.+136    	; 0xa4e <dtoa_prf+0x160>
 9c6:	91 11       	cpse	r25, r1
 9c8:	02 c0       	rjmp	.+4      	; 0x9ce <dtoa_prf+0xe0>
 9ca:	83 e0       	ldi	r24, 0x03	; 3
 9cc:	01 c0       	rjmp	.+2      	; 0x9d0 <dtoa_prf+0xe2>
 9ce:	84 e0       	ldi	r24, 0x04	; 4
 9d0:	81 17       	cp	r24, r17
 9d2:	18 f4       	brcc	.+6      	; 0x9da <dtoa_prf+0xec>
 9d4:	21 2f       	mov	r18, r17
 9d6:	28 1b       	sub	r18, r24
 9d8:	01 c0       	rjmp	.+2      	; 0x9dc <dtoa_prf+0xee>
 9da:	20 e0       	ldi	r18, 0x00	; 0
 9dc:	51 11       	cpse	r21, r1
 9de:	0b c0       	rjmp	.+22     	; 0x9f6 <dtoa_prf+0x108>
 9e0:	f6 01       	movw	r30, r12
 9e2:	82 2f       	mov	r24, r18
 9e4:	30 e2       	ldi	r19, 0x20	; 32
 9e6:	88 23       	and	r24, r24
 9e8:	19 f0       	breq	.+6      	; 0x9f0 <dtoa_prf+0x102>
 9ea:	31 93       	st	Z+, r19
 9ec:	81 50       	subi	r24, 0x01	; 1
 9ee:	fb cf       	rjmp	.-10     	; 0x9e6 <dtoa_prf+0xf8>
 9f0:	c2 0e       	add	r12, r18
 9f2:	d1 1c       	adc	r13, r1
 9f4:	20 e0       	ldi	r18, 0x00	; 0
 9f6:	99 23       	and	r25, r25
 9f8:	29 f0       	breq	.+10     	; 0xa04 <dtoa_prf+0x116>
 9fa:	d6 01       	movw	r26, r12
 9fc:	9c 93       	st	X, r25
 9fe:	f6 01       	movw	r30, r12
 a00:	31 96       	adiw	r30, 0x01	; 1
 a02:	6f 01       	movw	r12, r30
 a04:	c6 01       	movw	r24, r12
 a06:	03 96       	adiw	r24, 0x03	; 3
 a08:	e2 fe       	sbrs	r14, 2
 a0a:	0b c0       	rjmp	.+22     	; 0xa22 <dtoa_prf+0x134>
 a0c:	39 e4       	ldi	r19, 0x49	; 73
 a0e:	d6 01       	movw	r26, r12
 a10:	3c 93       	st	X, r19
 a12:	3e e4       	ldi	r19, 0x4E	; 78
 a14:	11 96       	adiw	r26, 0x01	; 1
 a16:	3c 93       	st	X, r19
 a18:	11 97       	sbiw	r26, 0x01	; 1
 a1a:	36 e4       	ldi	r19, 0x46	; 70
 a1c:	12 96       	adiw	r26, 0x02	; 2
 a1e:	3c 93       	st	X, r19
 a20:	07 c0       	rjmp	.+14     	; 0xa30 <dtoa_prf+0x142>
 a22:	39 e6       	ldi	r19, 0x69	; 105
 a24:	f6 01       	movw	r30, r12
 a26:	30 83       	st	Z, r19
 a28:	3e e6       	ldi	r19, 0x6E	; 110
 a2a:	31 83       	std	Z+1, r19	; 0x01
 a2c:	36 e6       	ldi	r19, 0x66	; 102
 a2e:	32 83       	std	Z+2, r19	; 0x02
 a30:	fc 01       	movw	r30, r24
 a32:	32 2f       	mov	r19, r18
 a34:	40 e2       	ldi	r20, 0x20	; 32
 a36:	33 23       	and	r19, r19
 a38:	19 f0       	breq	.+6      	; 0xa40 <dtoa_prf+0x152>
 a3a:	41 93       	st	Z+, r20
 a3c:	31 50       	subi	r19, 0x01	; 1
 a3e:	fb cf       	rjmp	.-10     	; 0xa36 <dtoa_prf+0x148>
 a40:	fc 01       	movw	r30, r24
 a42:	e2 0f       	add	r30, r18
 a44:	f1 1d       	adc	r31, r1
 a46:	10 82       	st	Z, r1
 a48:	8e ef       	ldi	r24, 0xFE	; 254
 a4a:	9f ef       	ldi	r25, 0xFF	; 255
 a4c:	a6 c0       	rjmp	.+332    	; 0xb9a <dtoa_prf+0x2ac>
 a4e:	21 e0       	ldi	r18, 0x01	; 1
 a50:	30 e0       	ldi	r19, 0x00	; 0
 a52:	91 11       	cpse	r25, r1
 a54:	02 c0       	rjmp	.+4      	; 0xa5a <dtoa_prf+0x16c>
 a56:	20 e0       	ldi	r18, 0x00	; 0
 a58:	30 e0       	ldi	r19, 0x00	; 0
 a5a:	16 16       	cp	r1, r22
 a5c:	17 06       	cpc	r1, r23
 a5e:	1c f4       	brge	.+6      	; 0xa66 <dtoa_prf+0x178>
 a60:	fb 01       	movw	r30, r22
 a62:	31 96       	adiw	r30, 0x01	; 1
 a64:	02 c0       	rjmp	.+4      	; 0xa6a <dtoa_prf+0x17c>
 a66:	e1 e0       	ldi	r30, 0x01	; 1
 a68:	f0 e0       	ldi	r31, 0x00	; 0
 a6a:	2e 0f       	add	r18, r30
 a6c:	3f 1f       	adc	r19, r31
 a6e:	bb 20       	and	r11, r11
 a70:	21 f0       	breq	.+8      	; 0xa7a <dtoa_prf+0x18c>
 a72:	eb 2d       	mov	r30, r11
 a74:	f0 e0       	ldi	r31, 0x00	; 0
 a76:	31 96       	adiw	r30, 0x01	; 1
 a78:	02 c0       	rjmp	.+4      	; 0xa7e <dtoa_prf+0x190>
 a7a:	e0 e0       	ldi	r30, 0x00	; 0
 a7c:	f0 e0       	ldi	r31, 0x00	; 0
 a7e:	2e 0f       	add	r18, r30
 a80:	3f 1f       	adc	r19, r31
 a82:	e1 2f       	mov	r30, r17
 a84:	f0 e0       	ldi	r31, 0x00	; 0
 a86:	2e 17       	cp	r18, r30
 a88:	3f 07       	cpc	r19, r31
 a8a:	1c f4       	brge	.+6      	; 0xa92 <dtoa_prf+0x1a4>
 a8c:	12 1b       	sub	r17, r18
 a8e:	21 2f       	mov	r18, r17
 a90:	01 c0       	rjmp	.+2      	; 0xa94 <dtoa_prf+0x1a6>
 a92:	20 e0       	ldi	r18, 0x00	; 0
 a94:	8e 2d       	mov	r24, r14
 a96:	88 71       	andi	r24, 0x18	; 24
 a98:	59 f4       	brne	.+22     	; 0xab0 <dtoa_prf+0x1c2>
 a9a:	f6 01       	movw	r30, r12
 a9c:	82 2f       	mov	r24, r18
 a9e:	30 e2       	ldi	r19, 0x20	; 32
 aa0:	88 23       	and	r24, r24
 aa2:	19 f0       	breq	.+6      	; 0xaaa <dtoa_prf+0x1bc>
 aa4:	31 93       	st	Z+, r19
 aa6:	81 50       	subi	r24, 0x01	; 1
 aa8:	fb cf       	rjmp	.-10     	; 0xaa0 <dtoa_prf+0x1b2>
 aaa:	c2 0e       	add	r12, r18
 aac:	d1 1c       	adc	r13, r1
 aae:	20 e0       	ldi	r18, 0x00	; 0
 ab0:	99 23       	and	r25, r25
 ab2:	29 f0       	breq	.+10     	; 0xabe <dtoa_prf+0x1d0>
 ab4:	d6 01       	movw	r26, r12
 ab6:	9c 93       	st	X, r25
 ab8:	f6 01       	movw	r30, r12
 aba:	31 96       	adiw	r30, 0x01	; 1
 abc:	6f 01       	movw	r12, r30
 abe:	51 11       	cpse	r21, r1
 ac0:	0b c0       	rjmp	.+22     	; 0xad8 <dtoa_prf+0x1ea>
 ac2:	f6 01       	movw	r30, r12
 ac4:	82 2f       	mov	r24, r18
 ac6:	90 e3       	ldi	r25, 0x30	; 48
 ac8:	88 23       	and	r24, r24
 aca:	19 f0       	breq	.+6      	; 0xad2 <dtoa_prf+0x1e4>
 acc:	91 93       	st	Z+, r25
 ace:	81 50       	subi	r24, 0x01	; 1
 ad0:	fb cf       	rjmp	.-10     	; 0xac8 <dtoa_prf+0x1da>
 ad2:	c2 0e       	add	r12, r18
 ad4:	d1 1c       	adc	r13, r1
 ad6:	20 e0       	ldi	r18, 0x00	; 0
 ad8:	0f 2d       	mov	r16, r15
 ada:	06 0f       	add	r16, r22
 adc:	9a 81       	ldd	r25, Y+2	; 0x02
 ade:	34 2f       	mov	r19, r20
 ae0:	30 71       	andi	r19, 0x10	; 16
 ae2:	44 ff       	sbrs	r20, 4
 ae4:	03 c0       	rjmp	.+6      	; 0xaec <dtoa_prf+0x1fe>
 ae6:	91 33       	cpi	r25, 0x31	; 49
 ae8:	09 f4       	brne	.+2      	; 0xaec <dtoa_prf+0x1fe>
 aea:	01 50       	subi	r16, 0x01	; 1
 aec:	10 16       	cp	r1, r16
 aee:	24 f4       	brge	.+8      	; 0xaf8 <dtoa_prf+0x20a>
 af0:	09 30       	cpi	r16, 0x09	; 9
 af2:	18 f0       	brcs	.+6      	; 0xafa <dtoa_prf+0x20c>
 af4:	08 e0       	ldi	r16, 0x08	; 8
 af6:	01 c0       	rjmp	.+2      	; 0xafa <dtoa_prf+0x20c>
 af8:	01 e0       	ldi	r16, 0x01	; 1
 afa:	ab 01       	movw	r20, r22
 afc:	77 ff       	sbrs	r23, 7
 afe:	02 c0       	rjmp	.+4      	; 0xb04 <dtoa_prf+0x216>
 b00:	40 e0       	ldi	r20, 0x00	; 0
 b02:	50 e0       	ldi	r21, 0x00	; 0
 b04:	fb 01       	movw	r30, r22
 b06:	e4 1b       	sub	r30, r20
 b08:	f5 0b       	sbc	r31, r21
 b0a:	a1 e0       	ldi	r26, 0x01	; 1
 b0c:	b0 e0       	ldi	r27, 0x00	; 0
 b0e:	ac 0f       	add	r26, r28
 b10:	bd 1f       	adc	r27, r29
 b12:	ea 0f       	add	r30, r26
 b14:	fb 1f       	adc	r31, r27
 b16:	8e e2       	ldi	r24, 0x2E	; 46
 b18:	a8 2e       	mov	r10, r24
 b1a:	4b 01       	movw	r8, r22
 b1c:	80 1a       	sub	r8, r16
 b1e:	91 08       	sbc	r9, r1
 b20:	0b 2d       	mov	r16, r11
 b22:	10 e0       	ldi	r17, 0x00	; 0
 b24:	11 95       	neg	r17
 b26:	01 95       	neg	r16
 b28:	11 09       	sbc	r17, r1
 b2a:	4f 3f       	cpi	r20, 0xFF	; 255
 b2c:	bf ef       	ldi	r27, 0xFF	; 255
 b2e:	5b 07       	cpc	r21, r27
 b30:	21 f4       	brne	.+8      	; 0xb3a <dtoa_prf+0x24c>
 b32:	d6 01       	movw	r26, r12
 b34:	ac 92       	st	X, r10
 b36:	11 96       	adiw	r26, 0x01	; 1
 b38:	6d 01       	movw	r12, r26
 b3a:	64 17       	cp	r22, r20
 b3c:	75 07       	cpc	r23, r21
 b3e:	2c f0       	brlt	.+10     	; 0xb4a <dtoa_prf+0x25c>
 b40:	84 16       	cp	r8, r20
 b42:	95 06       	cpc	r9, r21
 b44:	14 f4       	brge	.+4      	; 0xb4a <dtoa_prf+0x25c>
 b46:	81 81       	ldd	r24, Z+1	; 0x01
 b48:	01 c0       	rjmp	.+2      	; 0xb4c <dtoa_prf+0x25e>
 b4a:	80 e3       	ldi	r24, 0x30	; 48
 b4c:	41 50       	subi	r20, 0x01	; 1
 b4e:	51 09       	sbc	r21, r1
 b50:	31 96       	adiw	r30, 0x01	; 1
 b52:	d6 01       	movw	r26, r12
 b54:	11 96       	adiw	r26, 0x01	; 1
 b56:	7d 01       	movw	r14, r26
 b58:	40 17       	cp	r20, r16
 b5a:	51 07       	cpc	r21, r17
 b5c:	24 f0       	brlt	.+8      	; 0xb66 <dtoa_prf+0x278>
 b5e:	d6 01       	movw	r26, r12
 b60:	8c 93       	st	X, r24
 b62:	67 01       	movw	r12, r14
 b64:	e2 cf       	rjmp	.-60     	; 0xb2a <dtoa_prf+0x23c>
 b66:	64 17       	cp	r22, r20
 b68:	75 07       	cpc	r23, r21
 b6a:	39 f4       	brne	.+14     	; 0xb7a <dtoa_prf+0x28c>
 b6c:	96 33       	cpi	r25, 0x36	; 54
 b6e:	20 f4       	brcc	.+8      	; 0xb78 <dtoa_prf+0x28a>
 b70:	95 33       	cpi	r25, 0x35	; 53
 b72:	19 f4       	brne	.+6      	; 0xb7a <dtoa_prf+0x28c>
 b74:	31 11       	cpse	r19, r1
 b76:	01 c0       	rjmp	.+2      	; 0xb7a <dtoa_prf+0x28c>
 b78:	81 e3       	ldi	r24, 0x31	; 49
 b7a:	f6 01       	movw	r30, r12
 b7c:	80 83       	st	Z, r24
 b7e:	f7 01       	movw	r30, r14
 b80:	82 2f       	mov	r24, r18
 b82:	90 e2       	ldi	r25, 0x20	; 32
 b84:	88 23       	and	r24, r24
 b86:	19 f0       	breq	.+6      	; 0xb8e <dtoa_prf+0x2a0>
 b88:	91 93       	st	Z+, r25
 b8a:	81 50       	subi	r24, 0x01	; 1
 b8c:	fb cf       	rjmp	.-10     	; 0xb84 <dtoa_prf+0x296>
 b8e:	f7 01       	movw	r30, r14
 b90:	e2 0f       	add	r30, r18
 b92:	f1 1d       	adc	r31, r1
 b94:	10 82       	st	Z, r1
 b96:	80 e0       	ldi	r24, 0x00	; 0
 b98:	90 e0       	ldi	r25, 0x00	; 0
 b9a:	29 96       	adiw	r28, 0x09	; 9
 b9c:	ec e0       	ldi	r30, 0x0C	; 12
 b9e:	0c 94 cb 06 	jmp	0xd96	; 0xd96 <__epilogue_restores__+0xc>

00000ba2 <__ftoa_engine>:
 ba2:	28 30       	cpi	r18, 0x08	; 8
 ba4:	08 f0       	brcs	.+2      	; 0xba8 <__ftoa_engine+0x6>
 ba6:	27 e0       	ldi	r18, 0x07	; 7
 ba8:	33 27       	eor	r19, r19
 baa:	da 01       	movw	r26, r20
 bac:	99 0f       	add	r25, r25
 bae:	31 1d       	adc	r19, r1
 bb0:	87 fd       	sbrc	r24, 7
 bb2:	91 60       	ori	r25, 0x01	; 1
 bb4:	00 96       	adiw	r24, 0x00	; 0
 bb6:	61 05       	cpc	r22, r1
 bb8:	71 05       	cpc	r23, r1
 bba:	39 f4       	brne	.+14     	; 0xbca <__ftoa_engine+0x28>
 bbc:	32 60       	ori	r19, 0x02	; 2
 bbe:	2e 5f       	subi	r18, 0xFE	; 254
 bc0:	3d 93       	st	X+, r19
 bc2:	30 e3       	ldi	r19, 0x30	; 48
 bc4:	2a 95       	dec	r18
 bc6:	e1 f7       	brne	.-8      	; 0xbc0 <__ftoa_engine+0x1e>
 bc8:	08 95       	ret
 bca:	9f 3f       	cpi	r25, 0xFF	; 255
 bcc:	30 f0       	brcs	.+12     	; 0xbda <__ftoa_engine+0x38>
 bce:	80 38       	cpi	r24, 0x80	; 128
 bd0:	71 05       	cpc	r23, r1
 bd2:	61 05       	cpc	r22, r1
 bd4:	09 f0       	breq	.+2      	; 0xbd8 <__ftoa_engine+0x36>
 bd6:	3c 5f       	subi	r19, 0xFC	; 252
 bd8:	3c 5f       	subi	r19, 0xFC	; 252
 bda:	3d 93       	st	X+, r19
 bdc:	91 30       	cpi	r25, 0x01	; 1
 bde:	08 f0       	brcs	.+2      	; 0xbe2 <__ftoa_engine+0x40>
 be0:	80 68       	ori	r24, 0x80	; 128
 be2:	91 1d       	adc	r25, r1
 be4:	df 93       	push	r29
 be6:	cf 93       	push	r28
 be8:	1f 93       	push	r17
 bea:	0f 93       	push	r16
 bec:	ff 92       	push	r15
 bee:	ef 92       	push	r14
 bf0:	19 2f       	mov	r17, r25
 bf2:	98 7f       	andi	r25, 0xF8	; 248
 bf4:	96 95       	lsr	r25
 bf6:	e9 2f       	mov	r30, r25
 bf8:	96 95       	lsr	r25
 bfa:	96 95       	lsr	r25
 bfc:	e9 0f       	add	r30, r25
 bfe:	ff 27       	eor	r31, r31
 c00:	ec 59       	subi	r30, 0x9C	; 156
 c02:	fe 4f       	sbci	r31, 0xFE	; 254
 c04:	99 27       	eor	r25, r25
 c06:	33 27       	eor	r19, r19
 c08:	ee 24       	eor	r14, r14
 c0a:	ff 24       	eor	r15, r15
 c0c:	a7 01       	movw	r20, r14
 c0e:	e7 01       	movw	r28, r14
 c10:	05 90       	lpm	r0, Z+
 c12:	08 94       	sec
 c14:	07 94       	ror	r0
 c16:	28 f4       	brcc	.+10     	; 0xc22 <__ftoa_engine+0x80>
 c18:	36 0f       	add	r19, r22
 c1a:	e7 1e       	adc	r14, r23
 c1c:	f8 1e       	adc	r15, r24
 c1e:	49 1f       	adc	r20, r25
 c20:	51 1d       	adc	r21, r1
 c22:	66 0f       	add	r22, r22
 c24:	77 1f       	adc	r23, r23
 c26:	88 1f       	adc	r24, r24
 c28:	99 1f       	adc	r25, r25
 c2a:	06 94       	lsr	r0
 c2c:	a1 f7       	brne	.-24     	; 0xc16 <__ftoa_engine+0x74>
 c2e:	05 90       	lpm	r0, Z+
 c30:	07 94       	ror	r0
 c32:	28 f4       	brcc	.+10     	; 0xc3e <__ftoa_engine+0x9c>
 c34:	e7 0e       	add	r14, r23
 c36:	f8 1e       	adc	r15, r24
 c38:	49 1f       	adc	r20, r25
 c3a:	56 1f       	adc	r21, r22
 c3c:	c1 1d       	adc	r28, r1
 c3e:	77 0f       	add	r23, r23
 c40:	88 1f       	adc	r24, r24
 c42:	99 1f       	adc	r25, r25
 c44:	66 1f       	adc	r22, r22
 c46:	06 94       	lsr	r0
 c48:	a1 f7       	brne	.-24     	; 0xc32 <__ftoa_engine+0x90>
 c4a:	05 90       	lpm	r0, Z+
 c4c:	07 94       	ror	r0
 c4e:	28 f4       	brcc	.+10     	; 0xc5a <__ftoa_engine+0xb8>
 c50:	f8 0e       	add	r15, r24
 c52:	49 1f       	adc	r20, r25
 c54:	56 1f       	adc	r21, r22
 c56:	c7 1f       	adc	r28, r23
 c58:	d1 1d       	adc	r29, r1
 c5a:	88 0f       	add	r24, r24
 c5c:	99 1f       	adc	r25, r25
 c5e:	66 1f       	adc	r22, r22
 c60:	77 1f       	adc	r23, r23
 c62:	06 94       	lsr	r0
 c64:	a1 f7       	brne	.-24     	; 0xc4e <__ftoa_engine+0xac>
 c66:	05 90       	lpm	r0, Z+
 c68:	07 94       	ror	r0
 c6a:	20 f4       	brcc	.+8      	; 0xc74 <__ftoa_engine+0xd2>
 c6c:	49 0f       	add	r20, r25
 c6e:	56 1f       	adc	r21, r22
 c70:	c7 1f       	adc	r28, r23
 c72:	d8 1f       	adc	r29, r24
 c74:	99 0f       	add	r25, r25
 c76:	66 1f       	adc	r22, r22
 c78:	77 1f       	adc	r23, r23
 c7a:	88 1f       	adc	r24, r24
 c7c:	06 94       	lsr	r0
 c7e:	a9 f7       	brne	.-22     	; 0xc6a <__ftoa_engine+0xc8>
 c80:	84 91       	lpm	r24, Z
 c82:	10 95       	com	r17
 c84:	17 70       	andi	r17, 0x07	; 7
 c86:	41 f0       	breq	.+16     	; 0xc98 <__ftoa_engine+0xf6>
 c88:	d6 95       	lsr	r29
 c8a:	c7 95       	ror	r28
 c8c:	57 95       	ror	r21
 c8e:	47 95       	ror	r20
 c90:	f7 94       	ror	r15
 c92:	e7 94       	ror	r14
 c94:	1a 95       	dec	r17
 c96:	c1 f7       	brne	.-16     	; 0xc88 <__ftoa_engine+0xe6>
 c98:	ea e0       	ldi	r30, 0x0A	; 10
 c9a:	f1 e0       	ldi	r31, 0x01	; 1
 c9c:	68 94       	set
 c9e:	15 90       	lpm	r1, Z+
 ca0:	15 91       	lpm	r17, Z+
 ca2:	35 91       	lpm	r19, Z+
 ca4:	65 91       	lpm	r22, Z+
 ca6:	95 91       	lpm	r25, Z+
 ca8:	05 90       	lpm	r0, Z+
 caa:	7f e2       	ldi	r23, 0x2F	; 47
 cac:	73 95       	inc	r23
 cae:	e1 18       	sub	r14, r1
 cb0:	f1 0a       	sbc	r15, r17
 cb2:	43 0b       	sbc	r20, r19
 cb4:	56 0b       	sbc	r21, r22
 cb6:	c9 0b       	sbc	r28, r25
 cb8:	d0 09       	sbc	r29, r0
 cba:	c0 f7       	brcc	.-16     	; 0xcac <__ftoa_engine+0x10a>
 cbc:	e1 0c       	add	r14, r1
 cbe:	f1 1e       	adc	r15, r17
 cc0:	43 1f       	adc	r20, r19
 cc2:	56 1f       	adc	r21, r22
 cc4:	c9 1f       	adc	r28, r25
 cc6:	d0 1d       	adc	r29, r0
 cc8:	7e f4       	brtc	.+30     	; 0xce8 <__ftoa_engine+0x146>
 cca:	70 33       	cpi	r23, 0x30	; 48
 ccc:	11 f4       	brne	.+4      	; 0xcd2 <__ftoa_engine+0x130>
 cce:	8a 95       	dec	r24
 cd0:	e6 cf       	rjmp	.-52     	; 0xc9e <__ftoa_engine+0xfc>
 cd2:	e8 94       	clt
 cd4:	01 50       	subi	r16, 0x01	; 1
 cd6:	30 f0       	brcs	.+12     	; 0xce4 <__ftoa_engine+0x142>
 cd8:	08 0f       	add	r16, r24
 cda:	0a f4       	brpl	.+2      	; 0xcde <__ftoa_engine+0x13c>
 cdc:	00 27       	eor	r16, r16
 cde:	02 17       	cp	r16, r18
 ce0:	08 f4       	brcc	.+2      	; 0xce4 <__ftoa_engine+0x142>
 ce2:	20 2f       	mov	r18, r16
 ce4:	23 95       	inc	r18
 ce6:	02 2f       	mov	r16, r18
 ce8:	7a 33       	cpi	r23, 0x3A	; 58
 cea:	28 f0       	brcs	.+10     	; 0xcf6 <__ftoa_engine+0x154>
 cec:	79 e3       	ldi	r23, 0x39	; 57
 cee:	7d 93       	st	X+, r23
 cf0:	2a 95       	dec	r18
 cf2:	e9 f7       	brne	.-6      	; 0xcee <__ftoa_engine+0x14c>
 cf4:	10 c0       	rjmp	.+32     	; 0xd16 <__ftoa_engine+0x174>
 cf6:	7d 93       	st	X+, r23
 cf8:	2a 95       	dec	r18
 cfa:	89 f6       	brne	.-94     	; 0xc9e <__ftoa_engine+0xfc>
 cfc:	06 94       	lsr	r0
 cfe:	97 95       	ror	r25
 d00:	67 95       	ror	r22
 d02:	37 95       	ror	r19
 d04:	17 95       	ror	r17
 d06:	17 94       	ror	r1
 d08:	e1 18       	sub	r14, r1
 d0a:	f1 0a       	sbc	r15, r17
 d0c:	43 0b       	sbc	r20, r19
 d0e:	56 0b       	sbc	r21, r22
 d10:	c9 0b       	sbc	r28, r25
 d12:	d0 09       	sbc	r29, r0
 d14:	98 f0       	brcs	.+38     	; 0xd3c <__ftoa_engine+0x19a>
 d16:	23 95       	inc	r18
 d18:	7e 91       	ld	r23, -X
 d1a:	73 95       	inc	r23
 d1c:	7a 33       	cpi	r23, 0x3A	; 58
 d1e:	08 f0       	brcs	.+2      	; 0xd22 <__ftoa_engine+0x180>
 d20:	70 e3       	ldi	r23, 0x30	; 48
 d22:	7c 93       	st	X, r23
 d24:	20 13       	cpse	r18, r16
 d26:	b8 f7       	brcc	.-18     	; 0xd16 <__ftoa_engine+0x174>
 d28:	7e 91       	ld	r23, -X
 d2a:	70 61       	ori	r23, 0x10	; 16
 d2c:	7d 93       	st	X+, r23
 d2e:	30 f0       	brcs	.+12     	; 0xd3c <__ftoa_engine+0x19a>
 d30:	83 95       	inc	r24
 d32:	71 e3       	ldi	r23, 0x31	; 49
 d34:	7d 93       	st	X+, r23
 d36:	70 e3       	ldi	r23, 0x30	; 48
 d38:	2a 95       	dec	r18
 d3a:	e1 f7       	brne	.-8      	; 0xd34 <__ftoa_engine+0x192>
 d3c:	11 24       	eor	r1, r1
 d3e:	ef 90       	pop	r14
 d40:	ff 90       	pop	r15
 d42:	0f 91       	pop	r16
 d44:	1f 91       	pop	r17
 d46:	cf 91       	pop	r28
 d48:	df 91       	pop	r29
 d4a:	99 27       	eor	r25, r25
 d4c:	87 fd       	sbrc	r24, 7
 d4e:	90 95       	com	r25
 d50:	08 95       	ret

00000d52 <__prologue_saves__>:
 d52:	2f 92       	push	r2
 d54:	3f 92       	push	r3
 d56:	4f 92       	push	r4
 d58:	5f 92       	push	r5
 d5a:	6f 92       	push	r6
 d5c:	7f 92       	push	r7
 d5e:	8f 92       	push	r8
 d60:	9f 92       	push	r9
 d62:	af 92       	push	r10
 d64:	bf 92       	push	r11
 d66:	cf 92       	push	r12
 d68:	df 92       	push	r13
 d6a:	ef 92       	push	r14
 d6c:	ff 92       	push	r15
 d6e:	0f 93       	push	r16
 d70:	1f 93       	push	r17
 d72:	cf 93       	push	r28
 d74:	df 93       	push	r29
 d76:	cd b7       	in	r28, 0x3d	; 61
 d78:	de b7       	in	r29, 0x3e	; 62
 d7a:	ca 1b       	sub	r28, r26
 d7c:	db 0b       	sbc	r29, r27
 d7e:	0f b6       	in	r0, 0x3f	; 63
 d80:	f8 94       	cli
 d82:	de bf       	out	0x3e, r29	; 62
 d84:	0f be       	out	0x3f, r0	; 63
 d86:	cd bf       	out	0x3d, r28	; 61
 d88:	09 94       	ijmp

00000d8a <__epilogue_restores__>:
 d8a:	2a 88       	ldd	r2, Y+18	; 0x12
 d8c:	39 88       	ldd	r3, Y+17	; 0x11
 d8e:	48 88       	ldd	r4, Y+16	; 0x10
 d90:	5f 84       	ldd	r5, Y+15	; 0x0f
 d92:	6e 84       	ldd	r6, Y+14	; 0x0e
 d94:	7d 84       	ldd	r7, Y+13	; 0x0d
 d96:	8c 84       	ldd	r8, Y+12	; 0x0c
 d98:	9b 84       	ldd	r9, Y+11	; 0x0b
 d9a:	aa 84       	ldd	r10, Y+10	; 0x0a
 d9c:	b9 84       	ldd	r11, Y+9	; 0x09
 d9e:	c8 84       	ldd	r12, Y+8	; 0x08
 da0:	df 80       	ldd	r13, Y+7	; 0x07
 da2:	ee 80       	ldd	r14, Y+6	; 0x06
 da4:	fd 80       	ldd	r15, Y+5	; 0x05
 da6:	0c 81       	ldd	r16, Y+4	; 0x04
 da8:	1b 81       	ldd	r17, Y+3	; 0x03
 daa:	aa 81       	ldd	r26, Y+2	; 0x02
 dac:	b9 81       	ldd	r27, Y+1	; 0x01
 dae:	ce 0f       	add	r28, r30
 db0:	d1 1d       	adc	r29, r1
 db2:	0f b6       	in	r0, 0x3f	; 63
 db4:	f8 94       	cli
 db6:	de bf       	out	0x3e, r29	; 62
 db8:	0f be       	out	0x3f, r0	; 63
 dba:	cd bf       	out	0x3d, r28	; 61
 dbc:	ed 01       	movw	r28, r26
 dbe:	08 95       	ret

00000dc0 <_exit>:
 dc0:	f8 94       	cli

00000dc2 <__stop_program>:
 dc2:	ff cf       	rjmp	.-2      	; 0xdc2 <__stop_program>
