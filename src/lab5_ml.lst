
lab5_ml.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  0000250e  000025a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000250e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000014e  00800138  00800138  000025da  2**0
                  ALLOC
  3 .stab         00005028  00000000  00000000  000025dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c02  00000000  00000000  00007604  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00009206  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00009218  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  00009254  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  000099d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000a0ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  0000a106  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
       4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      10:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      14:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      18:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      1c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      20:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      24:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      28:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__vector_10>
      2c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      30:	0c 94 46 01 	jmp	0x28c	; 0x28c <__vector_12>
      34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      38:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      3c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      40:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__vector_16>
      44:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      48:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__vector_18>
      4c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      50:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      54:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      58:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      5c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      60:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      68:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      6c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      70:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      74:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__vector_29>
      78:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      7c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      80:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      84:	0c 94 3d 0e 	jmp	0x1c7a	; 0x1c7a <__vector_33>
      88:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      8c:	7e 0e       	add	r7, r30
      8e:	55 0e       	add	r5, r21
      90:	55 0e       	add	r5, r21
      92:	55 0e       	add	r5, r21
      94:	55 0e       	add	r5, r21
      96:	55 0e       	add	r5, r21
      98:	55 0e       	add	r5, r21
      9a:	55 0e       	add	r5, r21
      9c:	7e 0e       	add	r7, r30
      9e:	55 0e       	add	r5, r21
      a0:	55 0e       	add	r5, r21
      a2:	55 0e       	add	r5, r21
      a4:	55 0e       	add	r5, r21
      a6:	55 0e       	add	r5, r21
      a8:	55 0e       	add	r5, r21
      aa:	55 0e       	add	r5, r21
      ac:	88 0e       	add	r8, r24
      ae:	55 0e       	add	r5, r21
      b0:	55 0e       	add	r5, r21
      b2:	55 0e       	add	r5, r21
      b4:	55 0e       	add	r5, r21
      b6:	55 0e       	add	r5, r21
      b8:	55 0e       	add	r5, r21
      ba:	55 0e       	add	r5, r21
      bc:	55 0e       	add	r5, r21
      be:	55 0e       	add	r5, r21
      c0:	55 0e       	add	r5, r21
      c2:	55 0e       	add	r5, r21
      c4:	55 0e       	add	r5, r21
      c6:	55 0e       	add	r5, r21
      c8:	55 0e       	add	r5, r21
      ca:	55 0e       	add	r5, r21
      cc:	88 0e       	add	r8, r24
      ce:	55 0e       	add	r5, r21
      d0:	55 0e       	add	r5, r21
      d2:	55 0e       	add	r5, r21
      d4:	55 0e       	add	r5, r21
      d6:	55 0e       	add	r5, r21
      d8:	55 0e       	add	r5, r21
      da:	55 0e       	add	r5, r21
      dc:	55 0e       	add	r5, r21
      de:	55 0e       	add	r5, r21
      e0:	55 0e       	add	r5, r21
      e2:	55 0e       	add	r5, r21
      e4:	55 0e       	add	r5, r21
      e6:	55 0e       	add	r5, r21
      e8:	55 0e       	add	r5, r21
      ea:	55 0e       	add	r5, r21
      ec:	9f 0e       	add	r9, r31
      ee:	55 0e       	add	r5, r21
      f0:	55 0e       	add	r5, r21
      f2:	55 0e       	add	r5, r21
      f4:	55 0e       	add	r5, r21
      f6:	55 0e       	add	r5, r21
      f8:	55 0e       	add	r5, r21
      fa:	55 0e       	add	r5, r21
      fc:	a3 0e       	add	r10, r19
      fe:	55 0e       	add	r5, r21
     100:	55 0e       	add	r5, r21
     102:	55 0e       	add	r5, r21
     104:	55 0e       	add	r5, r21
     106:	55 0e       	add	r5, r21
     108:	55 0e       	add	r5, r21
     10a:	55 0e       	add	r5, r21
     10c:	55 0e       	add	r5, r21
     10e:	55 0e       	add	r5, r21
     110:	55 0e       	add	r5, r21
     112:	55 0e       	add	r5, r21
     114:	55 0e       	add	r5, r21
     116:	55 0e       	add	r5, r21
     118:	55 0e       	add	r5, r21
     11a:	55 0e       	add	r5, r21
     11c:	b1 0e       	add	r11, r17
     11e:	55 0e       	add	r5, r21
     120:	55 0e       	add	r5, r21
     122:	55 0e       	add	r5, r21
     124:	55 0e       	add	r5, r21
     126:	55 0e       	add	r5, r21
     128:	55 0e       	add	r5, r21
     12a:	55 0e       	add	r5, r21
     12c:	6f 0e       	add	r6, r31

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d0 e1       	ldi	r29, 0x10	; 16
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
     13a:	11 e0       	ldi	r17, 0x01	; 1
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	ee e0       	ldi	r30, 0x0E	; 14
     142:	f5 e2       	ldi	r31, 0x25	; 37
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	a8 33       	cpi	r26, 0x38	; 56
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	22 e0       	ldi	r18, 0x02	; 2
     156:	a8 e3       	ldi	r26, 0x38	; 56
     158:	b1 e0       	ldi	r27, 0x01	; 1
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	a6 38       	cpi	r26, 0x86	; 134
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 76 0f 	call	0x1eec	; 0x1eec <main>
     168:	0c 94 85 12 	jmp	0x250a	; 0x250a <_exit>

0000016c <__bad_interrupt>:
     16c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000170 <debounce_switch>:
//the button is pushed. Function returns a 1 only once per debounced button
//push so a debounce and toggle function can be implemented at the same time.
//Adapted to check all buttons from Ganssel's "Guide to Debouncing"
//Expects active low pushbuttons on PINA port.
//
uint8_t debounce_switch(uint8_t pin) {
     170:	48 2f       	mov	r20, r24
  static uint16_t state[8] = {0};
  state[pin] = (state[pin]<<1)|(!bit_is_clear(PINA,pin))|0xE000;
     172:	e8 2f       	mov	r30, r24
     174:	f0 e0       	ldi	r31, 0x00	; 0
     176:	99 b3       	in	r25, 0x19	; 25
     178:	ee 0f       	add	r30, r30
     17a:	ff 1f       	adc	r31, r31
     17c:	ef 59       	subi	r30, 0x9F	; 159
     17e:	fe 4f       	sbci	r31, 0xFE	; 254
     180:	20 81       	ld	r18, Z
     182:	31 81       	ldd	r19, Z+1	; 0x01
     184:	22 0f       	add	r18, r18
     186:	33 1f       	adc	r19, r19
     188:	30 6e       	ori	r19, 0xE0	; 224
     18a:	89 2f       	mov	r24, r25
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	02 c0       	rjmp	.+4      	; 0x194 <debounce_switch+0x24>
     190:	95 95       	asr	r25
     192:	87 95       	ror	r24
     194:	4a 95       	dec	r20
     196:	e2 f7       	brpl	.-8      	; 0x190 <debounce_switch+0x20>
     198:	81 70       	andi	r24, 0x01	; 1
     19a:	99 27       	eor	r25, r25
     19c:	28 2b       	or	r18, r24
     19e:	39 2b       	or	r19, r25
     1a0:	31 83       	std	Z+1, r19	; 0x01
     1a2:	20 83       	st	Z, r18
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	21 15       	cp	r18, r1
     1a8:	30 4f       	sbci	r19, 0xF0	; 240
     1aa:	09 f0       	breq	.+2      	; 0x1ae <debounce_switch+0x3e>
     1ac:	80 e0       	ldi	r24, 0x00	; 0
  if (state[pin]==0xF000) {
    return 1;
  }
  return 0;
}
     1ae:	08 95       	ret

000001b0 <update_lcd_alarm>:
  or not the alarm is armed. EXCLUSIVELY FOR ALARM
Parameters: NONE
Return:void
***************************************************************/
void update_lcd_alarm(){
  if (((mode>>BIT3)&1)==1) {//Check Alarm EN Bit
     1b0:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     1b4:	83 fd       	sbrc	r24, 3
     1b6:	0e c0       	rjmp	.+28     	; 0x1d4 <update_lcd_alarm+0x24>
    lcd_full_array[1]= 'L';
    lcd_full_array[2]= 'A';
    lcd_full_array[3]= 'R';
    lcd_full_array[4]= 'M';
  }else{//clear Alarm message
    lcd_full_array[0]= ' ';
     1b8:	80 e2       	ldi	r24, 0x20	; 32
     1ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    lcd_full_array[1]= ' ';
     1be:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__data_start+0x1>
    lcd_full_array[2]= ' ';
     1c2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    lcd_full_array[3]= ' ';
     1c6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__data_start+0x3>
    lcd_full_array[4]= ' ';
     1ca:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_start+0x4>
  }
  lcd_flag = 0;//reset flag for ALARM signaling
     1ce:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <lcd_flag>
     1d2:	08 95       	ret
Parameters: NONE
Return:void
***************************************************************/
void update_lcd_alarm(){
  if (((mode>>BIT3)&1)==1) {//Check Alarm EN Bit
    lcd_full_array[0]= 'A';
     1d4:	81 e4       	ldi	r24, 0x41	; 65
     1d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    lcd_full_array[1]= 'L';
     1da:	9c e4       	ldi	r25, 0x4C	; 76
     1dc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    lcd_full_array[2]= 'A';
     1e0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    lcd_full_array[3]= 'R';
     1e4:	82 e5       	ldi	r24, 0x52	; 82
     1e6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__data_start+0x3>
    lcd_full_array[4]= 'M';
     1ea:	8d e4       	ldi	r24, 0x4D	; 77
     1ec:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_start+0x4>
    lcd_full_array[1]= ' ';
    lcd_full_array[2]= ' ';
    lcd_full_array[3]= ' ';
    lcd_full_array[4]= ' ';
  }
  lcd_flag = 0;//reset flag for ALARM signaling
     1f0:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <lcd_flag>
     1f4:	08 95       	ret

000001f6 <init_tcnt0>:
//***********************************************************************
//                           init_tcnt0
//***********************************************************************
//initalize timer/counter zero to normal mode
void init_tcnt0(){
  ASSR  |= (1<<AS0);//run off external 32kHz osc
     1f6:	80 b7       	in	r24, 0x30	; 48
     1f8:	88 60       	ori	r24, 0x08	; 8
     1fa:	80 bf       	out	0x30, r24	; 48
  TIMSK |= (1<<TOIE0);//overflow interrup
     1fc:	87 b7       	in	r24, 0x37	; 55
     1fe:	81 60       	ori	r24, 0x01	; 1
     200:	87 bf       	out	0x37, r24	; 55
  TCCR0 |= (1<<CS00);//Normal mode, no prescale
     202:	83 b7       	in	r24, 0x33	; 51
     204:	81 60       	ori	r24, 0x01	; 1
     206:	83 bf       	out	0x33, r24	; 51
     208:	08 95       	ret

0000020a <init_tcnt2>:
//***********************************************************************
//                           init_tcnt2
//***********************************************************************
void init_tcnt2(){
  //Fast PWM, Non-inverting mode on OC2(PB7),CLKio/1024 prescale, uC clock
  TCCR2 |= (1<<WGM21)|(1<<WGM20)|(1<<COM21)|(1<<COM20)|(0<<CS20)|(0<<CS21)|(1<<CS22);
     20a:	85 b5       	in	r24, 0x25	; 37
     20c:	8c 67       	ori	r24, 0x7C	; 124
     20e:	85 bd       	out	0x25, r24	; 37
  TIMSK |= (1<<TOIE2);//overflow interrupt
     210:	87 b7       	in	r24, 0x37	; 55
     212:	80 64       	ori	r24, 0x40	; 64
     214:	87 bf       	out	0x37, r24	; 55
  OCR2  |= 127;//initalize to half of the total scale (0-255)
     216:	83 b5       	in	r24, 0x23	; 35
     218:	8f 67       	ori	r24, 0x7F	; 127
     21a:	83 bd       	out	0x23, r24	; 35
     21c:	08 95       	ret

0000021e <init_tcnt3>:
//***********************************************************************
//                           init_tcnt3
//***********************************************************************
void init_tcnt3(){
  //Non-inverting mode //FAST PWM, 8-bit, no prescale
  TCCR3A |= (1<<COM3A1)|(0<<COM3A0)|(0<<WGM31)|(1<<WGM30);
     21e:	eb e8       	ldi	r30, 0x8B	; 139
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	80 81       	ld	r24, Z
     224:	81 68       	ori	r24, 0x81	; 129
     226:	80 83       	st	Z, r24
  TCCR3B |= (0<<WGM33)|(1<<WGM32)|(1<<CS30);
     228:	ea e8       	ldi	r30, 0x8A	; 138
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	89 60       	ori	r24, 0x09	; 9
     230:	80 83       	st	Z, r24
  ETIMSK |= (1<<TOIE3);//overflow interrup
     232:	ed e7       	ldi	r30, 0x7D	; 125
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	80 81       	ld	r24, Z
     238:	84 60       	ori	r24, 0x04	; 4
     23a:	80 83       	st	Z, r24
  OCR3A =  127;//Vout = OCR3A*(0.0198)+0.022
     23c:	8f e7       	ldi	r24, 0x7F	; 127
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     244:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     248:	08 95       	ret

0000024a <init_tcnt1>:
//***********************************************************************
//                           init_tcnt1
//***********************************************************************
void init_tcnt1(){
  //CTC mode,no prescale, Normal port operation
  TCCR1B |= (1<<WGM12)|(1<<CS10);
     24a:	8e b5       	in	r24, 0x2e	; 46
     24c:	89 60       	ori	r24, 0x09	; 9
     24e:	8e bd       	out	0x2e, r24	; 46
  TIMSK  |= (1<<OCIE1A);// Output compare A match
     250:	87 b7       	in	r24, 0x37	; 55
     252:	80 61       	ori	r24, 0x10	; 16
     254:	87 bf       	out	0x37, r24	; 55
  OCR1A   = 0x1F3F;//7999 for 1Khz wave
     256:	8f e3       	ldi	r24, 0x3F	; 63
     258:	9f e1       	ldi	r25, 0x1F	; 31
     25a:	9b bd       	out	0x2b, r25	; 43
     25c:	8a bd       	out	0x2a, r24	; 42
     25e:	08 95       	ret

00000260 <read_LM73>:
Parameters: NONE
Return: VOID
***************************************************************************/
void read_LM73(){
  static uint8_t fc_toggle = 0;//1=Farenheit, 0=Celcius
  fc_toggle ^= (1<<BIT0);//Toggle the value
     260:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <fc_toggle.2180>
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	89 27       	eor	r24, r25
     268:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <fc_toggle.2180>
  lm73_temp = read_temperature();
     26c:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <read_temperature>
     270:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <lm73_temp+0x1>
     274:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <lm73_temp>
  lm73_temp_convert(lcd_str_temperature,lm73_temp,fc_toggle);
     278:	60 91 85 01 	lds	r22, 0x0185	; 0x800185 <lm73_temp>
     27c:	70 91 86 01 	lds	r23, 0x0186	; 0x800186 <lm73_temp+0x1>
     280:	40 91 60 01 	lds	r20, 0x0160	; 0x800160 <fc_toggle.2180>
     284:	87 e9       	ldi	r24, 0x97	; 151
     286:	91 e0       	ldi	r25, 0x01	; 1
     288:	0c 94 1c 0d 	jmp	0x1a38	; 0x1a38 <lm73_temp_convert>

0000028c <__vector_12>:
}

// //***********************************************************************
// //                     ISR for timer counter one
// //***********************************************************************
ISR(TIMER1_COMPA_vect){
     28c:	1f 92       	push	r1
     28e:	0f 92       	push	r0
     290:	0f b6       	in	r0, 0x3f	; 63
     292:	0f 92       	push	r0
     294:	11 24       	eor	r1, r1
     296:	0b b6       	in	r0, 0x3b	; 59
     298:	0f 92       	push	r0
     29a:	2f 93       	push	r18
     29c:	3f 93       	push	r19
     29e:	4f 93       	push	r20
     2a0:	5f 93       	push	r21
     2a2:	6f 93       	push	r22
     2a4:	7f 93       	push	r23
     2a6:	8f 93       	push	r24
     2a8:	9f 93       	push	r25
     2aa:	af 93       	push	r26
     2ac:	bf 93       	push	r27
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	ef 93       	push	r30
     2b4:	ff 93       	push	r31
  static uint16_t count_isr1 =0;
  static uint16_t count_isr12=0;
  count_isr12++;
     2b6:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <count_isr12.2187>
     2ba:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <count_isr12.2187+0x1>
     2be:	01 96       	adiw	r24, 0x01	; 1
     2c0:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <count_isr12.2187+0x1>
     2c4:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <count_isr12.2187>
  count_isr1++;
     2c8:	c0 91 5c 01 	lds	r28, 0x015C	; 0x80015c <count_isr1.2186>
     2cc:	d0 91 5d 01 	lds	r29, 0x015D	; 0x80015d <count_isr1.2186+0x1>
     2d0:	21 96       	adiw	r28, 0x01	; 1
     2d2:	d0 93 5d 01 	sts	0x015D, r29	; 0x80015d <count_isr1.2186+0x1>
     2d6:	c0 93 5c 01 	sts	0x015C, r28	; 0x80015c <count_isr1.2186>

  if (lcd_flag ==1 ) {//only update when bit toggled
     2da:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <lcd_flag>
     2de:	81 30       	cpi	r24, 0x01	; 1
     2e0:	09 f4       	brne	.+2      	; 0x2e4 <__vector_12+0x58>
     2e2:	55 c0       	rjmp	.+170    	; 0x38e <__vector_12+0x102>
    update_lcd_alarm();
  }

  if (((mode>>BIT3)&1) == 1) {// Check Alarm enabled bit
     2e4:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     2e8:	83 ff       	sbrs	r24, 3
     2ea:	19 c0       	rjmp	.+50     	; 0x31e <__vector_12+0x92>
    if ((hrs_mil == a_hrs_mil)&&(min_count == a_min_count)) {//current time matches alarm time
     2ec:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <hrs_mil>
     2f0:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <a_hrs_mil>
     2f4:	98 17       	cp	r25, r24
     2f6:	09 f4       	brne	.+2      	; 0x2fa <__vector_12+0x6e>
     2f8:	40 c0       	rjmp	.+128    	; 0x37a <__vector_12+0xee>
      alarm_sound = 1;//Alarm sound on
    }

    if ((((mode>>BIT4)&1)==1)&&(alarm_sound==1)) {//check Snooze enabled bit and alarm is on
     2fa:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     2fe:	84 fd       	sbrc	r24, 4
     300:	2a c0       	rjmp	.+84     	; 0x356 <__vector_12+0xca>
      snoozing =1;//activate snoozing
      mode &= ~(1<<BIT4);//clear snooze bit
      count_isr1 = 0;//reset count ready for snoozing
    }

    if (snoozing == 1) {//system is snoozing
     302:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <snoozing>
     306:	81 30       	cpi	r24, 0x01	; 1
     308:	09 f4       	brne	.+2      	; 0x30c <__vector_12+0x80>
     30a:	44 c0       	rjmp	.+136    	; 0x394 <__vector_12+0x108>
          snoozing    = 0;//reset snoozing
        }
      }
    }

    if (alarm_sound==1) {
     30c:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <alarm_sound>
     310:	81 30       	cpi	r24, 0x01	; 1
     312:	61 f4       	brne	.+24     	; 0x32c <__vector_12+0xa0>
      PORTD ^= (1<<BIT2);//toggle Pin 0 on Port d for alarm sound
     314:	92 b3       	in	r25, 0x12	; 18
     316:	84 e0       	ldi	r24, 0x04	; 4
     318:	89 27       	eor	r24, r25
     31a:	82 bb       	out	0x12, r24	; 18
     31c:	07 c0       	rjmp	.+14     	; 0x32c <__vector_12+0xa0>
    }
  }else{
    mode &= ~(1<<BIT4);// clear snooze if Alarm DISABLED
     31e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     322:	8f 7e       	andi	r24, 0xEF	; 239
     324:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <mode>
    alarm_sound=0;//alarm souund off
     328:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <alarm_sound>
  }
}
     32c:	ff 91       	pop	r31
     32e:	ef 91       	pop	r30
     330:	df 91       	pop	r29
     332:	cf 91       	pop	r28
     334:	bf 91       	pop	r27
     336:	af 91       	pop	r26
     338:	9f 91       	pop	r25
     33a:	8f 91       	pop	r24
     33c:	7f 91       	pop	r23
     33e:	6f 91       	pop	r22
     340:	5f 91       	pop	r21
     342:	4f 91       	pop	r20
     344:	3f 91       	pop	r19
     346:	2f 91       	pop	r18
     348:	0f 90       	pop	r0
     34a:	0b be       	out	0x3b, r0	; 59
     34c:	0f 90       	pop	r0
     34e:	0f be       	out	0x3f, r0	; 63
     350:	0f 90       	pop	r0
     352:	1f 90       	pop	r1
     354:	18 95       	reti
  if (((mode>>BIT3)&1) == 1) {// Check Alarm enabled bit
    if ((hrs_mil == a_hrs_mil)&&(min_count == a_min_count)) {//current time matches alarm time
      alarm_sound = 1;//Alarm sound on
    }

    if ((((mode>>BIT4)&1)==1)&&(alarm_sound==1)) {//check Snooze enabled bit and alarm is on
     356:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <alarm_sound>
     35a:	81 30       	cpi	r24, 0x01	; 1
     35c:	91 f6       	brne	.-92     	; 0x302 <__vector_12+0x76>
      snoozing =1;//activate snoozing
     35e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <snoozing>
      mode &= ~(1<<BIT4);//clear snooze bit
     362:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     366:	8f 7e       	andi	r24, 0xEF	; 239
     368:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <mode>
      count_isr1 = 0;//reset count ready for snoozing
     36c:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <count_isr1.2186+0x1>
     370:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <count_isr1.2186>
    }

    if (snoozing == 1) {//system is snoozing
      alarm_sound = 0;//Alarm sound off
     374:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <alarm_sound>
     378:	c9 cf       	rjmp	.-110    	; 0x30c <__vector_12+0x80>
  if (lcd_flag ==1 ) {//only update when bit toggled
    update_lcd_alarm();
  }

  if (((mode>>BIT3)&1) == 1) {// Check Alarm enabled bit
    if ((hrs_mil == a_hrs_mil)&&(min_count == a_min_count)) {//current time matches alarm time
     37a:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <min_count>
     37e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <a_min_count>
     382:	98 13       	cpse	r25, r24
     384:	ba cf       	rjmp	.-140    	; 0x2fa <__vector_12+0x6e>
      alarm_sound = 1;//Alarm sound on
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <alarm_sound>
     38c:	b6 cf       	rjmp	.-148    	; 0x2fa <__vector_12+0x6e>
  static uint16_t count_isr12=0;
  count_isr12++;
  count_isr1++;

  if (lcd_flag ==1 ) {//only update when bit toggled
    update_lcd_alarm();
     38e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <update_lcd_alarm>
     392:	a8 cf       	rjmp	.-176    	; 0x2e4 <__vector_12+0x58>
      mode &= ~(1<<BIT4);//clear snooze bit
      count_isr1 = 0;//reset count ready for snoozing
    }

    if (snoozing == 1) {//system is snoozing
      alarm_sound = 0;//Alarm sound off
     394:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <alarm_sound>
      if (count_isr1 == 2000) {//1 second tick
     398:	c0 3d       	cpi	r28, 0xD0	; 208
     39a:	d7 40       	sbci	r29, 0x07	; 7
     39c:	09 f0       	breq	.+2      	; 0x3a0 <__vector_12+0x114>
     39e:	b6 cf       	rjmp	.-148    	; 0x30c <__vector_12+0x80>
        snooze_time--;//decrement snooze time
     3a0:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <snooze_time>
     3a4:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <snooze_time+0x1>
     3a8:	21 50       	subi	r18, 0x01	; 1
     3aa:	31 09       	sbc	r19, r1
     3ac:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <snooze_time+0x1>
     3b0:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <snooze_time>
        count_isr1 =0;//reset count
     3b4:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <count_isr1.2186+0x1>
     3b8:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <count_isr1.2186>
        if (snooze_time==0) {
     3bc:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <snooze_time>
     3c0:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <snooze_time+0x1>
     3c4:	23 2b       	or	r18, r19
     3c6:	09 f0       	breq	.+2      	; 0x3ca <__vector_12+0x13e>
     3c8:	a1 cf       	rjmp	.-190    	; 0x30c <__vector_12+0x80>
          alarm_sound = 1;//Alarm sound ON
     3ca:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <alarm_sound>
          snooze_time = 10;//reset snooze time
     3ce:	8a e0       	ldi	r24, 0x0A	; 10
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <snooze_time+0x1>
     3d6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <snooze_time>
          snoozing    = 0;//reset snoozing
     3da:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <snoozing>
     3de:	96 cf       	rjmp	.-212    	; 0x30c <__vector_12+0x80>

000003e0 <update_time>:
  count
Parameters: NONE
Return: void
***************************************************************/
void update_time() {
  if (sec_count == 59) {
     3e0:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <sec_count>
     3e4:	8b 33       	cpi	r24, 0x3B	; 59
     3e6:	31 f0       	breq	.+12     	; 0x3f4 <update_time+0x14>
      }
    }else{
      min_count++;//increment min count
    }
  }else{
    sec_count++;//increment seconds
     3e8:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <sec_count>
     3ec:	8f 5f       	subi	r24, 0xFF	; 255
     3ee:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <sec_count>
     3f2:	08 95       	ret
Parameters: NONE
Return: void
***************************************************************/
void update_time() {
  if (sec_count == 59) {
    sec_count =0;//reset seconds
     3f4:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <sec_count>
    if (min_count==59) {
     3f8:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <min_count>
     3fc:	8b 33       	cpi	r24, 0x3B	; 59
     3fe:	31 f0       	breq	.+12     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
        hrs_std =1;//reset standard time
      }else{
        hrs_std++;//increment standard time
      }
    }else{
      min_count++;//increment min count
     400:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <min_count>
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <min_count>
     40a:	08 95       	ret
***************************************************************/
void update_time() {
  if (sec_count == 59) {
    sec_count =0;//reset seconds
    if (min_count==59) {
      min_count=0;//reset mins
     40c:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <min_count>
      if (hrs_mil==23) {
     410:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <hrs_mil>
     414:	87 31       	cpi	r24, 0x17	; 23
     416:	79 f0       	breq	.+30     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
        hrs_mil =0;//reset military time
      }else{
        hrs_mil++;//increment military time
     418:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <hrs_mil>
     41c:	8f 5f       	subi	r24, 0xFF	; 255
     41e:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <hrs_mil>
      }
      if (hrs_std == 13) {
     422:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <hrs_std>
     426:	8d 30       	cpi	r24, 0x0D	; 13
     428:	49 f0       	breq	.+18     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
        hrs_std =1;//reset standard time
      }else{
        hrs_std++;//increment standard time
     42a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <hrs_std>
     42e:	8f 5f       	subi	r24, 0xFF	; 255
     430:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <hrs_std>
     434:	08 95       	ret
  if (sec_count == 59) {
    sec_count =0;//reset seconds
    if (min_count==59) {
      min_count=0;//reset mins
      if (hrs_mil==23) {
        hrs_mil =0;//reset military time
     436:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <hrs_mil>
     43a:	f3 cf       	rjmp	.-26     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
      }else{
        hrs_mil++;//increment military time
      }
      if (hrs_std == 13) {
        hrs_std =1;//reset standard time
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <hrs_std>
     442:	08 95       	ret

00000444 <decoder>:
Precondition: NONE
Return: uint_t binary equivalent
************************************************************************/
uint8_t decoder(uint8_t decimal)
{
  if (decimal == 0) {//decimal: 0
     444:	88 23       	and	r24, r24
     446:	a1 f0       	breq	.+40     	; 0x470 <decoder+0x2c>
    return 0b11000000;
  }else if (decimal == 1) {//decimal: 1
     448:	81 30       	cpi	r24, 0x01	; 1
     44a:	a1 f0       	breq	.+40     	; 0x474 <decoder+0x30>
    return 0b11111001;
  }else if (decimal == 2) {//decimal: 2
     44c:	82 30       	cpi	r24, 0x02	; 2
     44e:	a1 f0       	breq	.+40     	; 0x478 <decoder+0x34>
    return 0b10100100;
  }else if (decimal == 3) {//decimal: 3
     450:	83 30       	cpi	r24, 0x03	; 3
     452:	a1 f0       	breq	.+40     	; 0x47c <decoder+0x38>
    return 0b10110000;
  }else if (decimal == 4) {//deciaml: 4
     454:	84 30       	cpi	r24, 0x04	; 4
     456:	a1 f0       	breq	.+40     	; 0x480 <decoder+0x3c>
    return 0b10011001;
  }else if (decimal == 5) {//decimal: 5
     458:	85 30       	cpi	r24, 0x05	; 5
     45a:	a1 f0       	breq	.+40     	; 0x484 <decoder+0x40>
    return 0b10010010;
  }else if (decimal == 6) {//deciaml: 6
     45c:	86 30       	cpi	r24, 0x06	; 6
     45e:	a1 f0       	breq	.+40     	; 0x488 <decoder+0x44>
    return 0b10000010;
  }else if (decimal == 7) {//decimal: 7
     460:	87 30       	cpi	r24, 0x07	; 7
     462:	a1 f0       	breq	.+40     	; 0x48c <decoder+0x48>
    return 0b11111000;
  }else if (decimal == 8) {//decimal: 8
     464:	88 30       	cpi	r24, 0x08	; 8
     466:	a1 f0       	breq	.+40     	; 0x490 <decoder+0x4c>
    return 0b10000000;
  }else if (decimal == 9) {//decimal: 9
     468:	89 30       	cpi	r24, 0x09	; 9
     46a:	a1 f0       	breq	.+40     	; 0x494 <decoder+0x50>
    return 0b10010000;
  }
  //should never reach this return
  return 0b11111111;// All segments OFF
     46c:	8f ef       	ldi	r24, 0xFF	; 255
     46e:	08 95       	ret
Return: uint_t binary equivalent
************************************************************************/
uint8_t decoder(uint8_t decimal)
{
  if (decimal == 0) {//decimal: 0
    return 0b11000000;
     470:	80 ec       	ldi	r24, 0xC0	; 192
     472:	08 95       	ret
  }else if (decimal == 1) {//decimal: 1
    return 0b11111001;
     474:	89 ef       	ldi	r24, 0xF9	; 249
     476:	08 95       	ret
  }else if (decimal == 2) {//decimal: 2
    return 0b10100100;
     478:	84 ea       	ldi	r24, 0xA4	; 164
     47a:	08 95       	ret
  }else if (decimal == 3) {//decimal: 3
    return 0b10110000;
     47c:	80 eb       	ldi	r24, 0xB0	; 176
     47e:	08 95       	ret
  }else if (decimal == 4) {//deciaml: 4
    return 0b10011001;
     480:	89 e9       	ldi	r24, 0x99	; 153
     482:	08 95       	ret
  }else if (decimal == 5) {//decimal: 5
    return 0b10010010;
     484:	82 e9       	ldi	r24, 0x92	; 146
     486:	08 95       	ret
  }else if (decimal == 6) {//deciaml: 6
    return 0b10000010;
     488:	82 e8       	ldi	r24, 0x82	; 130
     48a:	08 95       	ret
  }else if (decimal == 7) {//decimal: 7
    return 0b11111000;
     48c:	88 ef       	ldi	r24, 0xF8	; 248
     48e:	08 95       	ret
  }else if (decimal == 8) {//decimal: 8
    return 0b10000000;
     490:	80 e8       	ldi	r24, 0x80	; 128
     492:	08 95       	ret
  }else if (decimal == 9) {//decimal: 9
    return 0b10010000;
     494:	80 e9       	ldi	r24, 0x90	; 144
  }
  //should never reach this return
  return 0b11111111;// All segments OFF
}
     496:	08 95       	ret

00000498 <adc_init>:
  This function will setup the Analog-to-digital conveter
Parameters: NONE
Return: void
***************************************************************/
void adc_init(){
  DDRF  &= ~(_BV(DDF7));//make port F bit 7 is ADC input
     498:	e1 e6       	ldi	r30, 0x61	; 97
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	80 81       	ld	r24, Z
     49e:	8f 77       	andi	r24, 0x7F	; 127
     4a0:	80 83       	st	Z, r24
  PORTF &= ~(_BV(PF7));// port F bit 7 pullups must be off
     4a2:	e2 e6       	ldi	r30, 0x62	; 98
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	80 81       	ld	r24, Z
     4a8:	8f 77       	andi	r24, 0x7F	; 127
     4aa:	80 83       	st	Z, r24
  ADMUX |= (1<<REFS0)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0) ;//single-ended, input PORTF bit 7, right adjusted, 10 bits
     4ac:	87 b1       	in	r24, 0x07	; 7
     4ae:	87 64       	ori	r24, 0x47	; 71
     4b0:	87 b9       	out	0x07, r24	; 7
  ADCSRA|= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);//ADC enabled, division factor 128
     4b2:	86 b1       	in	r24, 0x06	; 6
     4b4:	87 68       	ori	r24, 0x87	; 135
     4b6:	86 b9       	out	0x06, r24	; 6
     4b8:	08 95       	ret

000004ba <adc_read>:
Parameters: NONE
Return:
  * 16 bit unsigned  adc result
***************************************************************/
uint16_t adc_read(){
  ADCSRA |= (1<<ADSC);//Start ADC
     4ba:	36 9a       	sbi	0x06, 6	; 6
  while (bit_is_clear(ADCSRA,ADIF)){}//wait for ADC to finish
     4bc:	34 9b       	sbis	0x06, 4	; 6
     4be:	fe cf       	rjmp	.-4      	; 0x4bc <adc_read+0x2>
  ADCSRA |= (1<<ADIF);//clear flag by writing one
     4c0:	34 9a       	sbi	0x06, 4	; 6
  return ADC;
     4c2:	84 b1       	in	r24, 0x04	; 4
     4c4:	95 b1       	in	r25, 0x05	; 5
}
     4c6:	08 95       	ret

000004c8 <decode_time>:
***************************************************************/
void decode_time()
{

  // Parse Clock time to segment array
  if (((mode>>BIT1)&1)==0) {
     4c8:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     4cc:	81 fd       	sbrc	r24, 1
     4ce:	76 c0       	rjmp	.+236    	; 0x5bc <decode_time+0xf4>
    min_ones = (min_count%10);//parsed ones place of minutes
     4d0:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <min_count>
     4d4:	87 e6       	ldi	r24, 0x67	; 103
     4d6:	28 02       	muls	r18, r24
     4d8:	91 2d       	mov	r25, r1
     4da:	11 24       	eor	r1, r1
     4dc:	95 95       	asr	r25
     4de:	95 95       	asr	r25
     4e0:	27 fd       	sbrc	r18, 7
     4e2:	93 95       	inc	r25
     4e4:	3a e0       	ldi	r19, 0x0A	; 10
     4e6:	93 9f       	mul	r25, r19
     4e8:	20 19       	sub	r18, r0
     4ea:	11 24       	eor	r1, r1
     4ec:	20 93 50 01 	sts	0x0150, r18	; 0x800150 <min_ones>
    min_tens = (min_count/10)%10;//parsed tens place of minutes
     4f0:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <min_count>
     4f4:	98 02       	muls	r25, r24
     4f6:	21 2d       	mov	r18, r1
     4f8:	11 24       	eor	r1, r1
     4fa:	25 95       	asr	r18
     4fc:	25 95       	asr	r18
     4fe:	97 fd       	sbrc	r25, 7
     500:	23 95       	inc	r18
     502:	28 02       	muls	r18, r24
     504:	91 2d       	mov	r25, r1
     506:	11 24       	eor	r1, r1
     508:	95 95       	asr	r25
     50a:	95 95       	asr	r25
     50c:	27 fd       	sbrc	r18, 7
     50e:	93 95       	inc	r25
     510:	3a e0       	ldi	r19, 0x0A	; 10
     512:	93 9f       	mul	r25, r19
     514:	20 19       	sub	r18, r0
     516:	11 24       	eor	r1, r1
     518:	20 93 4f 01 	sts	0x014F, r18	; 0x80014f <min_tens>

    if (mil_std == 0) {//military time
     51c:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <mil_std>
     520:	91 11       	cpse	r25, r1
     522:	ca c0       	rjmp	.+404    	; 0x6b8 <decode_time+0x1f0>
      hrs_ones = (hrs_mil%10);//parse ones
     524:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <hrs_mil>
     528:	28 02       	muls	r18, r24
     52a:	91 2d       	mov	r25, r1
     52c:	11 24       	eor	r1, r1
     52e:	95 95       	asr	r25
     530:	95 95       	asr	r25
     532:	27 fd       	sbrc	r18, 7
     534:	93 95       	inc	r25
     536:	3a e0       	ldi	r19, 0x0A	; 10
     538:	93 9f       	mul	r25, r19
     53a:	20 19       	sub	r18, r0
     53c:	11 24       	eor	r1, r1
     53e:	20 93 4e 01 	sts	0x014E, r18	; 0x80014e <hrs_ones>
      hrs_tens = (hrs_mil/10)%10;//parse tens
     542:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <hrs_mil>
     546:	28 02       	muls	r18, r24
     548:	91 2d       	mov	r25, r1
     54a:	11 24       	eor	r1, r1
     54c:	95 95       	asr	r25
     54e:	95 95       	asr	r25
     550:	27 fd       	sbrc	r18, 7
     552:	93 95       	inc	r25
     554:	98 02       	muls	r25, r24
     556:	81 2d       	mov	r24, r1
     558:	11 24       	eor	r1, r1
     55a:	85 95       	asr	r24
     55c:	85 95       	asr	r24
     55e:	97 fd       	sbrc	r25, 7
     560:	83 95       	inc	r24
     562:	2a e0       	ldi	r18, 0x0A	; 10
     564:	82 9f       	mul	r24, r18
     566:	90 19       	sub	r25, r0
     568:	11 24       	eor	r1, r1
     56a:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <hrs_tens>
      segment_data[2] |= (1<<BIT2);//AM indicator
     56e:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <segment_data+0x2>
     572:	84 60       	ori	r24, 0x04	; 4
     574:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <segment_data+0x2>
        segment_data[2] |= (1<<BIT2);//AM indicator
      }
    }

    //decoded numbers to array
    segment_data[0] = decoder(hrs_tens);//hours tens
     578:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <hrs_tens>
     57c:	0e 94 22 02 	call	0x444	; 0x444 <decoder>
     580:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <segment_data>
    segment_data[1] = decoder(hrs_ones);//hours ones
     584:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <hrs_ones>
     588:	0e 94 22 02 	call	0x444	; 0x444 <decoder>
     58c:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <segment_data+0x1>
    segment_data[3] = decoder(min_tens);//minutes tens
     590:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <min_tens>
     594:	0e 94 22 02 	call	0x444	; 0x444 <decoder>
     598:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <segment_data+0x3>
    segment_data[4] = decoder(min_ones);//minutes ones
     59c:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <min_ones>
     5a0:	0e 94 22 02 	call	0x444	; 0x444 <decoder>
     5a4:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <segment_data+0x4>
    segment_data[0] = decoder(a_hrs_tens);//hours tens
    segment_data[1] = decoder(a_hrs_ones);//hours ones
    segment_data[3] = decoder(a_min_tens);//minutes tens
    segment_data[4] = decoder(a_min_ones);//minutes ones
  }
  if (((mode>>BIT3)&1)==1) {
     5a8:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     5ac:	83 fd       	sbrc	r24, 3
     5ae:	7e c0       	rjmp	.+252    	; 0x6ac <decode_time+0x1e4>
    segment_data[4] &= ~(1<<BIT7);//ALARM EN indicator
  }else{
    segment_data[4] |= (1<<BIT7);//ALARM DISABLE
     5b0:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <segment_data+0x4>
     5b4:	80 68       	ori	r24, 0x80	; 128
     5b6:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <segment_data+0x4>
     5ba:	08 95       	ret
    //decoded numbers to array
    segment_data[0] = decoder(hrs_tens);//hours tens
    segment_data[1] = decoder(hrs_ones);//hours ones
    segment_data[3] = decoder(min_tens);//minutes tens
    segment_data[4] = decoder(min_ones);//minutes ones
  }else if (((mode&1)==0) && (((mode>>BIT1)&1)==1)) {//parse Alarm time to segemt array
     5bc:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     5c0:	80 fd       	sbrc	r24, 0
     5c2:	f2 cf       	rjmp	.-28     	; 0x5a8 <decode_time+0xe0>
     5c4:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     5c8:	81 ff       	sbrs	r24, 1
     5ca:	ee cf       	rjmp	.-36     	; 0x5a8 <decode_time+0xe0>
    a_min_ones = (a_min_count%10);//parsed ones place of minutes
     5cc:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <a_min_count>
     5d0:	87 e6       	ldi	r24, 0x67	; 103
     5d2:	28 02       	muls	r18, r24
     5d4:	91 2d       	mov	r25, r1
     5d6:	11 24       	eor	r1, r1
     5d8:	95 95       	asr	r25
     5da:	95 95       	asr	r25
     5dc:	27 fd       	sbrc	r18, 7
     5de:	93 95       	inc	r25
     5e0:	3a e0       	ldi	r19, 0x0A	; 10
     5e2:	93 9f       	mul	r25, r19
     5e4:	20 19       	sub	r18, r0
     5e6:	11 24       	eor	r1, r1
     5e8:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <a_min_ones>
    a_min_tens = (a_min_count/10)%10;//parsed tens place of minutes
     5ec:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <a_min_count>
     5f0:	98 02       	muls	r25, r24
     5f2:	21 2d       	mov	r18, r1
     5f4:	11 24       	eor	r1, r1
     5f6:	25 95       	asr	r18
     5f8:	25 95       	asr	r18
     5fa:	97 fd       	sbrc	r25, 7
     5fc:	23 95       	inc	r18
     5fe:	28 02       	muls	r18, r24
     600:	91 2d       	mov	r25, r1
     602:	11 24       	eor	r1, r1
     604:	95 95       	asr	r25
     606:	95 95       	asr	r25
     608:	27 fd       	sbrc	r18, 7
     60a:	93 95       	inc	r25
     60c:	3a e0       	ldi	r19, 0x0A	; 10
     60e:	93 9f       	mul	r25, r19
     610:	20 19       	sub	r18, r0
     612:	11 24       	eor	r1, r1
     614:	20 93 43 01 	sts	0x0143, r18	; 0x800143 <a_min_tens>

    if (mil_std == 0) {//military time
     618:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <mil_std>
     61c:	91 11       	cpse	r25, r1
     61e:	81 c0       	rjmp	.+258    	; 0x722 <decode_time+0x25a>
      a_hrs_ones = (a_hrs_mil%10);//parse ones
     620:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <a_hrs_mil>
     624:	28 02       	muls	r18, r24
     626:	91 2d       	mov	r25, r1
     628:	11 24       	eor	r1, r1
     62a:	95 95       	asr	r25
     62c:	95 95       	asr	r25
     62e:	27 fd       	sbrc	r18, 7
     630:	93 95       	inc	r25
     632:	3a e0       	ldi	r19, 0x0A	; 10
     634:	93 9f       	mul	r25, r19
     636:	20 19       	sub	r18, r0
     638:	11 24       	eor	r1, r1
     63a:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <a_hrs_ones>
      a_hrs_tens = (a_hrs_mil/10)%10;//parse tens
     63e:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <a_hrs_mil>
     642:	28 02       	muls	r18, r24
     644:	91 2d       	mov	r25, r1
     646:	11 24       	eor	r1, r1
     648:	95 95       	asr	r25
     64a:	95 95       	asr	r25
     64c:	27 fd       	sbrc	r18, 7
     64e:	93 95       	inc	r25
     650:	98 02       	muls	r25, r24
     652:	81 2d       	mov	r24, r1
     654:	11 24       	eor	r1, r1
     656:	85 95       	asr	r24
     658:	85 95       	asr	r24
     65a:	97 fd       	sbrc	r25, 7
     65c:	83 95       	inc	r24
     65e:	2a e0       	ldi	r18, 0x0A	; 10
     660:	82 9f       	mul	r24, r18
     662:	90 19       	sub	r25, r0
     664:	11 24       	eor	r1, r1
     666:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <a_hrs_tens>
      segment_data[2] |= (1<<BIT2);//AM indicator
     66a:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <segment_data+0x2>
     66e:	84 60       	ori	r24, 0x04	; 4
     670:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <segment_data+0x2>
        segment_data[2] |= (1<<BIT2);//AM indicator
      }
    }

    //decoded numbers to array
    segment_data[0] = decoder(a_hrs_tens);//hours tens
     674:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <a_hrs_tens>
     678:	0e 94 22 02 	call	0x444	; 0x444 <decoder>
     67c:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <segment_data>
    segment_data[1] = decoder(a_hrs_ones);//hours ones
     680:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <a_hrs_ones>
     684:	0e 94 22 02 	call	0x444	; 0x444 <decoder>
     688:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <segment_data+0x1>
    segment_data[3] = decoder(a_min_tens);//minutes tens
     68c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <a_min_tens>
     690:	0e 94 22 02 	call	0x444	; 0x444 <decoder>
     694:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <segment_data+0x3>
    segment_data[4] = decoder(a_min_ones);//minutes ones
     698:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <a_min_ones>
     69c:	0e 94 22 02 	call	0x444	; 0x444 <decoder>
     6a0:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <segment_data+0x4>
  }
  if (((mode>>BIT3)&1)==1) {
     6a4:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     6a8:	83 ff       	sbrs	r24, 3
     6aa:	82 cf       	rjmp	.-252    	; 0x5b0 <decode_time+0xe8>
    segment_data[4] &= ~(1<<BIT7);//ALARM EN indicator
     6ac:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <segment_data+0x4>
     6b0:	8f 77       	andi	r24, 0x7F	; 127
     6b2:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <segment_data+0x4>
     6b6:	08 95       	ret
    if (mil_std == 0) {//military time
      hrs_ones = (hrs_mil%10);//parse ones
      hrs_tens = (hrs_mil/10)%10;//parse tens
      segment_data[2] |= (1<<BIT2);//AM indicator
    }else{//standard time
      hrs_ones = (hrs_std%10);//parse ones
     6b8:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <hrs_std>
     6bc:	28 02       	muls	r18, r24
     6be:	91 2d       	mov	r25, r1
     6c0:	11 24       	eor	r1, r1
     6c2:	95 95       	asr	r25
     6c4:	95 95       	asr	r25
     6c6:	27 fd       	sbrc	r18, 7
     6c8:	93 95       	inc	r25
     6ca:	3a e0       	ldi	r19, 0x0A	; 10
     6cc:	93 9f       	mul	r25, r19
     6ce:	20 19       	sub	r18, r0
     6d0:	11 24       	eor	r1, r1
     6d2:	20 93 4e 01 	sts	0x014E, r18	; 0x80014e <hrs_ones>
      hrs_tens = (hrs_std/10)%10;//parse tens
     6d6:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <hrs_std>
     6da:	28 02       	muls	r18, r24
     6dc:	91 2d       	mov	r25, r1
     6de:	11 24       	eor	r1, r1
     6e0:	95 95       	asr	r25
     6e2:	95 95       	asr	r25
     6e4:	27 fd       	sbrc	r18, 7
     6e6:	93 95       	inc	r25
     6e8:	98 02       	muls	r25, r24
     6ea:	81 2d       	mov	r24, r1
     6ec:	11 24       	eor	r1, r1
     6ee:	85 95       	asr	r24
     6f0:	85 95       	asr	r24
     6f2:	97 fd       	sbrc	r25, 7
     6f4:	83 95       	inc	r24
     6f6:	2a e0       	ldi	r18, 0x0A	; 10
     6f8:	82 9f       	mul	r24, r18
     6fa:	90 19       	sub	r25, r0
     6fc:	11 24       	eor	r1, r1
     6fe:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <hrs_tens>
      if (hrs_mil>=12) {
     702:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <hrs_mil>
     706:	8c 30       	cpi	r24, 0x0C	; 12
     708:	34 f0       	brlt	.+12     	; 0x716 <decode_time+0x24e>
        segment_data[2] &= ~(1<<BIT2);//PM indicator
     70a:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <segment_data+0x2>
     70e:	8b 7f       	andi	r24, 0xFB	; 251
     710:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <segment_data+0x2>
     714:	31 cf       	rjmp	.-414    	; 0x578 <decode_time+0xb0>
      }else{
        segment_data[2] |= (1<<BIT2);//AM indicator
     716:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <segment_data+0x2>
     71a:	84 60       	ori	r24, 0x04	; 4
     71c:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <segment_data+0x2>
     720:	2b cf       	rjmp	.-426    	; 0x578 <decode_time+0xb0>
    if (mil_std == 0) {//military time
      a_hrs_ones = (a_hrs_mil%10);//parse ones
      a_hrs_tens = (a_hrs_mil/10)%10;//parse tens
      segment_data[2] |= (1<<BIT2);//AM indicator
    }else{//standard time
      a_hrs_ones = (a_hrs_std%10);//parse ones
     722:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <a_hrs_std>
     726:	28 02       	muls	r18, r24
     728:	91 2d       	mov	r25, r1
     72a:	11 24       	eor	r1, r1
     72c:	95 95       	asr	r25
     72e:	95 95       	asr	r25
     730:	27 fd       	sbrc	r18, 7
     732:	93 95       	inc	r25
     734:	3a e0       	ldi	r19, 0x0A	; 10
     736:	93 9f       	mul	r25, r19
     738:	20 19       	sub	r18, r0
     73a:	11 24       	eor	r1, r1
     73c:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <a_hrs_ones>
      a_hrs_tens = (a_hrs_std/10)%10;//parse tens
     740:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <a_hrs_std>
     744:	28 02       	muls	r18, r24
     746:	91 2d       	mov	r25, r1
     748:	11 24       	eor	r1, r1
     74a:	95 95       	asr	r25
     74c:	95 95       	asr	r25
     74e:	27 fd       	sbrc	r18, 7
     750:	93 95       	inc	r25
     752:	98 02       	muls	r25, r24
     754:	81 2d       	mov	r24, r1
     756:	11 24       	eor	r1, r1
     758:	85 95       	asr	r24
     75a:	85 95       	asr	r24
     75c:	97 fd       	sbrc	r25, 7
     75e:	83 95       	inc	r24
     760:	2a e0       	ldi	r18, 0x0A	; 10
     762:	82 9f       	mul	r24, r18
     764:	90 19       	sub	r25, r0
     766:	11 24       	eor	r1, r1
     768:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <a_hrs_tens>
      if (a_hrs_mil>=12) {
     76c:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <a_hrs_mil>
     770:	8c 30       	cpi	r24, 0x0C	; 12
     772:	34 f0       	brlt	.+12     	; 0x780 <decode_time+0x2b8>
        segment_data[2] &= ~(1<<BIT2);//PM indicator
     774:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <segment_data+0x2>
     778:	8b 7f       	andi	r24, 0xFB	; 251
     77a:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <segment_data+0x2>
     77e:	7a cf       	rjmp	.-268    	; 0x674 <decode_time+0x1ac>
      }else{
        segment_data[2] |= (1<<BIT2);//AM indicator
     780:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <segment_data+0x2>
     784:	84 60       	ori	r24, 0x04	; 4
     786:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <segment_data+0x2>
     78a:	74 cf       	rjmp	.-280    	; 0x674 <decode_time+0x1ac>

0000078c <update_lcd_temp>:
Return:VOID
***************************************************************/
void update_lcd_temp(){
  //Remote Temperature Reading************************
  //USART ISR will put data in rx_array
  if (rcv_rdy==1) {
     78c:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <__data_end>
     790:	21 30       	cpi	r18, 0x01	; 1
     792:	a9 f1       	breq	.+106    	; 0x7fe <update_lcd_temp+0x72>
      lcd_full_array[t_counter+24]=rx_array[t_counter];
    }
    lcd_full_array[length+24]=' ';//blank after number
  }
  //request data
  uart_putc('s');
     794:	83 e7       	ldi	r24, 0x73	; 115
     796:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <uart_putc>
  uart_putc('\0');
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <uart_putc>

  //Local Temperature Reading*************************
  read_LM73();
     7a0:	0e 94 30 01 	call	0x260	; 0x260 <read_LM73>
  length = strlen(lcd_str_temperature);
     7a4:	e7 e9       	ldi	r30, 0x97	; 151
     7a6:	f1 e0       	ldi	r31, 0x01	; 1
     7a8:	01 90       	ld	r0, Z+
     7aa:	00 20       	and	r0, r0
     7ac:	e9 f7       	brne	.-6      	; 0x7a8 <update_lcd_temp+0x1c>
     7ae:	31 97       	sbiw	r30, 0x01	; 1
     7b0:	af 01       	movw	r20, r30
     7b2:	47 59       	subi	r20, 0x97	; 151
     7b4:	51 40       	sbci	r21, 0x01	; 1
     7b6:	40 93 39 01 	sts	0x0139, r20	; 0x800139 <length>
  for (t_counter = 0; t_counter <= (length-1); t_counter++) {
     7ba:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <t_counter>
     7be:	55 27       	eor	r21, r21
     7c0:	41 15       	cp	r20, r1
     7c2:	51 05       	cpc	r21, r1
     7c4:	b1 f0       	breq	.+44     	; 0x7f2 <update_lcd_temp+0x66>
     7c6:	21 e0       	ldi	r18, 0x01	; 1
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	01 c0       	rjmp	.+2      	; 0x7d0 <update_lcd_temp+0x44>
     7ce:	23 2f       	mov	r18, r19
    lcd_full_array[t_counter+16]=lcd_str_temperature[t_counter];
     7d0:	fc 01       	movw	r30, r24
     7d2:	e9 56       	subi	r30, 0x69	; 105
     7d4:	fe 4f       	sbci	r31, 0xFE	; 254
     7d6:	30 81       	ld	r19, Z
     7d8:	fc 01       	movw	r30, r24
     7da:	e0 50       	subi	r30, 0x00	; 0
     7dc:	ff 4f       	sbci	r31, 0xFF	; 255
     7de:	30 8b       	std	Z+16, r19	; 0x10
  uart_putc('\0');

  //Local Temperature Reading*************************
  read_LM73();
  length = strlen(lcd_str_temperature);
  for (t_counter = 0; t_counter <= (length-1); t_counter++) {
     7e0:	82 2f       	mov	r24, r18
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	31 e0       	ldi	r19, 0x01	; 1
     7e6:	32 0f       	add	r19, r18
     7e8:	84 17       	cp	r24, r20
     7ea:	95 07       	cpc	r25, r21
     7ec:	84 f3       	brlt	.-32     	; 0x7ce <update_lcd_temp+0x42>
     7ee:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <t_counter>
    lcd_full_array[t_counter+16]=lcd_str_temperature[t_counter];
  }
  lcd_full_array[length+16] = ' ';//makes a space afer writing numbers
     7f2:	fa 01       	movw	r30, r20
     7f4:	e0 50       	subi	r30, 0x00	; 0
     7f6:	ff 4f       	sbci	r31, 0xFF	; 255
     7f8:	80 e2       	ldi	r24, 0x20	; 32
     7fa:	80 8b       	std	Z+16, r24	; 0x10

}
     7fc:	08 95       	ret
***************************************************************/
void update_lcd_temp(){
  //Remote Temperature Reading************************
  //USART ISR will put data in rx_array
  if (rcv_rdy==1) {
    rcv_rdy=0;//reset flag
     7fe:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <__data_end>
    length = strlen(rx_array);//length of usart incoming buffer
     802:	e7 e8       	ldi	r30, 0x87	; 135
     804:	f1 e0       	ldi	r31, 0x01	; 1
     806:	01 90       	ld	r0, Z+
     808:	00 20       	and	r0, r0
     80a:	e9 f7       	brne	.-6      	; 0x806 <update_lcd_temp+0x7a>
     80c:	31 97       	sbiw	r30, 0x01	; 1
     80e:	af 01       	movw	r20, r30
     810:	47 58       	subi	r20, 0x87	; 135
     812:	51 40       	sbci	r21, 0x01	; 1
     814:	40 93 39 01 	sts	0x0139, r20	; 0x800139 <length>
    for (t_counter = 0; t_counter <= (length-1); t_counter++) {
     818:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <t_counter>
     81c:	55 27       	eor	r21, r21
     81e:	41 15       	cp	r20, r1
     820:	51 05       	cpc	r21, r1
     822:	a9 f0       	breq	.+42     	; 0x84e <update_lcd_temp+0xc2>
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	01 c0       	rjmp	.+2      	; 0x82c <update_lcd_temp+0xa0>
     82a:	23 2f       	mov	r18, r19
      // clear_display();//for testing
      // cursor_home();//for testing
      // char2lcd(rx_array[t_counter]);// for testing
      // _delay_ms(1000);//for testing
      lcd_full_array[t_counter+24]=rx_array[t_counter];
     82c:	fc 01       	movw	r30, r24
     82e:	e0 50       	subi	r30, 0x00	; 0
     830:	ff 4f       	sbci	r31, 0xFF	; 255
     832:	dc 01       	movw	r26, r24
     834:	a9 57       	subi	r26, 0x79	; 121
     836:	be 4f       	sbci	r27, 0xFE	; 254
     838:	8c 91       	ld	r24, X
     83a:	80 8f       	std	Z+24, r24	; 0x18
  //Remote Temperature Reading************************
  //USART ISR will put data in rx_array
  if (rcv_rdy==1) {
    rcv_rdy=0;//reset flag
    length = strlen(rx_array);//length of usart incoming buffer
    for (t_counter = 0; t_counter <= (length-1); t_counter++) {
     83c:	82 2f       	mov	r24, r18
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	31 e0       	ldi	r19, 0x01	; 1
     842:	32 0f       	add	r19, r18
     844:	84 17       	cp	r24, r20
     846:	95 07       	cpc	r25, r21
     848:	84 f3       	brlt	.-32     	; 0x82a <update_lcd_temp+0x9e>
     84a:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <t_counter>
      // cursor_home();//for testing
      // char2lcd(rx_array[t_counter]);// for testing
      // _delay_ms(1000);//for testing
      lcd_full_array[t_counter+24]=rx_array[t_counter];
    }
    lcd_full_array[length+24]=' ';//blank after number
     84e:	fa 01       	movw	r30, r20
     850:	e0 50       	subi	r30, 0x00	; 0
     852:	ff 4f       	sbci	r31, 0xFF	; 255
     854:	80 e2       	ldi	r24, 0x20	; 32
     856:	80 8f       	std	Z+24, r24	; 0x18
     858:	9d cf       	rjmp	.-198    	; 0x794 <update_lcd_temp+0x8>

0000085a <__vector_18>:
}

// //***********************************************************************
// //                     ISR fo USART0
// //***********************************************************************
ISR(USART0_RX_vect){
     85a:	1f 92       	push	r1
     85c:	0f 92       	push	r0
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	0f 92       	push	r0
     862:	11 24       	eor	r1, r1
     864:	0b b6       	in	r0, 0x3b	; 59
     866:	0f 92       	push	r0
     868:	8f 93       	push	r24
     86a:	9f 93       	push	r25
     86c:	ef 93       	push	r30
     86e:	ff 93       	push	r31
static  uint8_t  i;
  rx_char = UDR0;              //get character
     870:	8c b1       	in	r24, 0x0c	; 12
     872:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <rx_char>
  rx_array[i++]=rx_char;  //store in array
     876:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <i.2215>
     87a:	91 e0       	ldi	r25, 0x01	; 1
     87c:	9e 0f       	add	r25, r30
     87e:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <i.2215>
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	e9 57       	subi	r30, 0x79	; 121
     886:	fe 4f       	sbci	r31, 0xFE	; 254
     888:	80 83       	st	Z, r24
 //if entire string has arrived, set flag, reset index
  if(rx_char == '\0'){
     88a:	81 11       	cpse	r24, r1
     88c:	05 c0       	rjmp	.+10     	; 0x898 <__vector_18+0x3e>
    rcv_rdy=1;
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end>
    i=0;
     894:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <i.2215>
  }
}
     898:	ff 91       	pop	r31
     89a:	ef 91       	pop	r30
     89c:	9f 91       	pop	r25
     89e:	8f 91       	pop	r24
     8a0:	0f 90       	pop	r0
     8a2:	0b be       	out	0x3b, r0	; 59
     8a4:	0f 90       	pop	r0
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	0f 90       	pop	r0
     8aa:	1f 90       	pop	r1
     8ac:	18 95       	reti

000008ae <__vector_16>:

//***********************************************************************
//                     ISR for timer counter zero
//***********************************************************************
ISR(TIMER0_OVF_vect)
{
     8ae:	1f 92       	push	r1
     8b0:	0f 92       	push	r0
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	0f 92       	push	r0
     8b6:	11 24       	eor	r1, r1
     8b8:	0b b6       	in	r0, 0x3b	; 59
     8ba:	0f 92       	push	r0
     8bc:	2f 93       	push	r18
     8be:	3f 93       	push	r19
     8c0:	4f 93       	push	r20
     8c2:	5f 93       	push	r21
     8c4:	6f 93       	push	r22
     8c6:	7f 93       	push	r23
     8c8:	8f 93       	push	r24
     8ca:	9f 93       	push	r25
     8cc:	af 93       	push	r26
     8ce:	bf 93       	push	r27
     8d0:	ef 93       	push	r30
     8d2:	ff 93       	push	r31
  static uint8_t count_isr = 0;
  count_isr++;
     8d4:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <count_isr.2221>
     8d8:	8f 5f       	subi	r24, 0xFF	; 255
     8da:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <count_isr.2221>

  if ((count_isr%64)==0) {
     8de:	98 2f       	mov	r25, r24
     8e0:	9f 73       	andi	r25, 0x3F	; 63
     8e2:	11 f1       	breq	.+68     	; 0x928 <__vector_16+0x7a>
    refresh_lcd(lcd_full_array);//update lcd
  }

  if ((count_isr % 128) == 0) {
     8e4:	8f 77       	andi	r24, 0x7F	; 127
     8e6:	69 f4       	brne	.+26     	; 0x902 <__vector_16+0x54>
    update_lcd_temp();//get reading from temp sensors
     8e8:	0e 94 c6 03 	call	0x78c	; 0x78c <update_lcd_temp>
    update_time();//update seconds, minutes and hours
     8ec:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <update_time>
    segment_data[2] ^= (1<<BIT0)|(1<<BIT1);//Toggle colon
     8f0:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <segment_data+0x2>
     8f4:	83 e0       	ldi	r24, 0x03	; 3
     8f6:	89 27       	eor	r24, r25
     8f8:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <segment_data+0x2>
    second_tick = 1;//set flag
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <second_tick>

  }

}
     902:	ff 91       	pop	r31
     904:	ef 91       	pop	r30
     906:	bf 91       	pop	r27
     908:	af 91       	pop	r26
     90a:	9f 91       	pop	r25
     90c:	8f 91       	pop	r24
     90e:	7f 91       	pop	r23
     910:	6f 91       	pop	r22
     912:	5f 91       	pop	r21
     914:	4f 91       	pop	r20
     916:	3f 91       	pop	r19
     918:	2f 91       	pop	r18
     91a:	0f 90       	pop	r0
     91c:	0b be       	out	0x3b, r0	; 59
     91e:	0f 90       	pop	r0
     920:	0f be       	out	0x3f, r0	; 63
     922:	0f 90       	pop	r0
     924:	1f 90       	pop	r1
     926:	18 95       	reti
{
  static uint8_t count_isr = 0;
  count_isr++;

  if ((count_isr%64)==0) {
    refresh_lcd(lcd_full_array);//update lcd
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	91 e0       	ldi	r25, 0x01	; 1
     92c:	0e 94 43 08 	call	0x1086	; 0x1086 <refresh_lcd>
     930:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <count_isr.2221>
     934:	d7 cf       	rjmp	.-82     	; 0x8e4 <__vector_16+0x36>

00000936 <update_inc_dec>:
  to the mode that has been selected by the user.
Parameters: NONE
Return:void
***************************************************************/
void update_inc_dec(){
  if (mode == 0) {// increas/decrease 0(default)
     936:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     93a:	88 23       	and	r24, r24
     93c:	a1 f0       	breq	.+40     	; 0x966 <update_inc_dec+0x30>
    inc_dec1 = 0;
    inc_dec2 = 0;
  }else if ( ((mode&1)==1) && (((mode>>1)&1)==0) ) {//set clock time
     93e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     942:	80 fd       	sbrc	r24, 0
     944:	15 c0       	rjmp	.+42     	; 0x970 <update_inc_dec+0x3a>
    inc_dec1 = 1;
    inc_dec2 = 1;
  }else if ( ((mode&1)==0) && (((mode>>1)&1)==1) ) {//set alarm time
     946:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     94a:	80 fd       	sbrc	r24, 0
     94c:	04 c0       	rjmp	.+8      	; 0x956 <update_inc_dec+0x20>
     94e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     952:	81 fd       	sbrc	r24, 1
     954:	11 c0       	rjmp	.+34     	; 0x978 <update_inc_dec+0x42>
    inc_dec1 = 1;
    inc_dec2 = 1;
  }else if ( ((mode&1)==1) && (((mode>>1)&1)==1) ) {//both modes are set
     956:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     95a:	80 ff       	sbrs	r24, 0
     95c:	08 c0       	rjmp	.+16     	; 0x96e <update_inc_dec+0x38>
     95e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     962:	81 ff       	sbrs	r24, 1
     964:	04 c0       	rjmp	.+8      	; 0x96e <update_inc_dec+0x38>
    inc_dec1 = 0;//do nothing
     966:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <inc_dec1>
    inc_dec2 = 0;//do nothing
     96a:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <inc_dec2>
     96e:	08 95       	ret
***************************************************************/
void update_inc_dec(){
  if (mode == 0) {// increas/decrease 0(default)
    inc_dec1 = 0;
    inc_dec2 = 0;
  }else if ( ((mode&1)==1) && (((mode>>1)&1)==0) ) {//set clock time
     970:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     974:	81 fd       	sbrc	r24, 1
     976:	e7 cf       	rjmp	.-50     	; 0x946 <update_inc_dec+0x10>
    inc_dec1 = 1;
    inc_dec2 = 1;
  }else if ( ((mode&1)==0) && (((mode>>1)&1)==1) ) {//set alarm time
    inc_dec1 = 1;
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <inc_dec1>
    inc_dec2 = 1;
     97e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <inc_dec2>
     982:	08 95       	ret

00000984 <update_mode>:
Parameters: NONE
Return:void
***************************************************************/
void update_mode() {
  //Reconfigure the PORTS to read from the pushbuttons:
  DDRA = 0x00;//set PORT A to all inputs
     984:	1a ba       	out	0x1a, r1	; 26
  PORTA = 0xFF;//set PORTA all pullups
     986:	8f ef       	ldi	r24, 0xFF	; 255
     988:	8b bb       	out	0x1b, r24	; 27
  PORTC = 0x70;// ENABLE TRI buffer
     98a:	80 e7       	ldi	r24, 0x70	; 112
     98c:	85 bb       	out	0x15, r24	; 21

  for(n = 0; n<=4;n++){//only check button 0,1,2,3,4
     98e:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <n>
     992:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <n>
     996:	85 30       	cpi	r24, 0x05	; 5
     998:	08 f0       	brcs	.+2      	; 0x99c <update_mode+0x18>
     99a:	4e c0       	rjmp	.+156    	; 0xa38 <update_mode+0xb4>
      }else if (n==1) {//button 1
        mode ^= (1<<BIT1);//Set Alarm time (toggle bit 1)
      }else if (n==2) {//button 2
        mode ^= (1<<BIT2);//Toggle Military/Standard
      }else if (n==3) {
        mode ^= (1<<BIT3);//Alarm EN
     99c:	a8 e0       	ldi	r26, 0x08	; 8
        lcd_flag =1;//set flag to update lcd
     99e:	51 e0       	ldi	r21, 0x01	; 1
      if (n == 0) {//button 0
        mode ^= (1<<BIT0);//Set time (toggle bit 0)
      }else if (n==1) {//button 1
        mode ^= (1<<BIT1);//Set Alarm time (toggle bit 1)
      }else if (n==2) {//button 2
        mode ^= (1<<BIT2);//Toggle Military/Standard
     9a0:	74 e0       	ldi	r23, 0x04	; 4
  for(n = 0; n<=4;n++){//only check button 0,1,2,3,4
    if (debounce_switch(n)) {
      if (n == 0) {//button 0
        mode ^= (1<<BIT0);//Set time (toggle bit 0)
      }else if (n==1) {//button 1
        mode ^= (1<<BIT1);//Set Alarm time (toggle bit 1)
     9a2:	62 e0       	ldi	r22, 0x02	; 2
     9a4:	0a c0       	rjmp	.+20     	; 0x9ba <update_mode+0x36>
  //Reconfigure the PORTS to read from the pushbuttons:
  DDRA = 0x00;//set PORT A to all inputs
  PORTA = 0xFF;//set PORTA all pullups
  PORTC = 0x70;// ENABLE TRI buffer

  for(n = 0; n<=4;n++){//only check button 0,1,2,3,4
     9a6:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <n>
     9aa:	8f 5f       	subi	r24, 0xFF	; 255
     9ac:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <n>
     9b0:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <n>
     9b4:	85 30       	cpi	r24, 0x05	; 5
     9b6:	08 f0       	brcs	.+2      	; 0x9ba <update_mode+0x36>
     9b8:	3f c0       	rjmp	.+126    	; 0xa38 <update_mode+0xb4>
    if (debounce_switch(n)) {
     9ba:	40 91 4b 01 	lds	r20, 0x014B	; 0x80014b <n>
//Adapted to check all buttons from Ganssel's "Guide to Debouncing"
//Expects active low pushbuttons on PINA port.
//
uint8_t debounce_switch(uint8_t pin) {
  static uint16_t state[8] = {0};
  state[pin] = (state[pin]<<1)|(!bit_is_clear(PINA,pin))|0xE000;
     9be:	e4 2f       	mov	r30, r20
     9c0:	f0 e0       	ldi	r31, 0x00	; 0
     9c2:	99 b3       	in	r25, 0x19	; 25
     9c4:	ee 0f       	add	r30, r30
     9c6:	ff 1f       	adc	r31, r31
     9c8:	ef 59       	subi	r30, 0x9F	; 159
     9ca:	fe 4f       	sbci	r31, 0xFE	; 254
     9cc:	20 81       	ld	r18, Z
     9ce:	31 81       	ldd	r19, Z+1	; 0x01
     9d0:	22 0f       	add	r18, r18
     9d2:	33 1f       	adc	r19, r19
     9d4:	30 6e       	ori	r19, 0xE0	; 224
     9d6:	89 2f       	mov	r24, r25
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	02 c0       	rjmp	.+4      	; 0x9e0 <update_mode+0x5c>
     9dc:	95 95       	asr	r25
     9de:	87 95       	ror	r24
     9e0:	4a 95       	dec	r20
     9e2:	e2 f7       	brpl	.-8      	; 0x9dc <update_mode+0x58>
     9e4:	81 70       	andi	r24, 0x01	; 1
     9e6:	99 27       	eor	r25, r25
     9e8:	82 2b       	or	r24, r18
     9ea:	93 2b       	or	r25, r19
     9ec:	91 83       	std	Z+1, r25	; 0x01
     9ee:	80 83       	st	Z, r24
  if (state[pin]==0xF000) {
     9f0:	81 15       	cp	r24, r1
     9f2:	90 4f       	sbci	r25, 0xF0	; 240
     9f4:	c1 f6       	brne	.-80     	; 0x9a6 <update_mode+0x22>
  PORTA = 0xFF;//set PORTA all pullups
  PORTC = 0x70;// ENABLE TRI buffer

  for(n = 0; n<=4;n++){//only check button 0,1,2,3,4
    if (debounce_switch(n)) {
      if (n == 0) {//button 0
     9f6:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <n>
     9fa:	81 11       	cpse	r24, r1
     9fc:	06 c0       	rjmp	.+12     	; 0xa0a <update_mode+0x86>
        mode ^= (1<<BIT0);//Set time (toggle bit 0)
     9fe:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     a02:	85 27       	eor	r24, r21
     a04:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <mode>
     a08:	ce cf       	rjmp	.-100    	; 0x9a6 <update_mode+0x22>
      }else if (n==1) {//button 1
     a0a:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <n>
     a0e:	81 30       	cpi	r24, 0x01	; 1
     a10:	c1 f0       	breq	.+48     	; 0xa42 <update_mode+0xbe>
        mode ^= (1<<BIT1);//Set Alarm time (toggle bit 1)
      }else if (n==2) {//button 2
     a12:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <n>
     a16:	82 30       	cpi	r24, 0x02	; 2
     a18:	d1 f0       	breq	.+52     	; 0xa4e <update_mode+0xca>
        mode ^= (1<<BIT2);//Toggle Military/Standard
      }else if (n==3) {
     a1a:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <n>
     a1e:	83 30       	cpi	r24, 0x03	; 3
     a20:	e1 f0       	breq	.+56     	; 0xa5a <update_mode+0xd6>
        mode ^= (1<<BIT3);//Alarm EN
        lcd_flag =1;//set flag to update lcd
      }else if (n==4) {
     a22:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <n>
     a26:	84 30       	cpi	r24, 0x04	; 4
     a28:	09 f0       	breq	.+2      	; 0xa2c <update_mode+0xa8>
     a2a:	bd cf       	rjmp	.-134    	; 0x9a6 <update_mode+0x22>
        mode |= (1<<BIT4);//Set snooze EN (DON'T Toggle)
     a2c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     a30:	80 61       	ori	r24, 0x10	; 16
     a32:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <mode>
     a36:	b7 cf       	rjmp	.-146    	; 0x9a6 <update_mode+0x22>
      }
    }
  }
  update_inc_dec();//update the inc/dec varible
     a38:	0e 94 9b 04 	call	0x936	; 0x936 <update_inc_dec>
  PORTC = 0x60;//DISABLE Tri buffer
     a3c:	80 e6       	ldi	r24, 0x60	; 96
     a3e:	85 bb       	out	0x15, r24	; 21
}
     a40:	08 95       	ret
  for(n = 0; n<=4;n++){//only check button 0,1,2,3,4
    if (debounce_switch(n)) {
      if (n == 0) {//button 0
        mode ^= (1<<BIT0);//Set time (toggle bit 0)
      }else if (n==1) {//button 1
        mode ^= (1<<BIT1);//Set Alarm time (toggle bit 1)
     a42:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     a46:	86 27       	eor	r24, r22
     a48:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <mode>
     a4c:	ac cf       	rjmp	.-168    	; 0x9a6 <update_mode+0x22>
      }else if (n==2) {//button 2
        mode ^= (1<<BIT2);//Toggle Military/Standard
     a4e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     a52:	87 27       	eor	r24, r23
     a54:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <mode>
     a58:	a6 cf       	rjmp	.-180    	; 0x9a6 <update_mode+0x22>
      }else if (n==3) {
        mode ^= (1<<BIT3);//Alarm EN
     a5a:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     a5e:	8a 27       	eor	r24, r26
     a60:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <mode>
        lcd_flag =1;//set flag to update lcd
     a64:	50 93 3e 01 	sts	0x013E, r21	; 0x80013e <lcd_flag>
     a68:	9e cf       	rjmp	.-196    	; 0x9a6 <update_mode+0x22>

00000a6a <spi_read>:
Return:
  uint8_t value that contains the value of SPDR register
***************************************************************/
 uint8_t spi_read(void)
{
  SPDR = 0x00;//Send dummy data  to be able read register
     a6a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)) {}//wait until it is done.
     a6c:	77 9b       	sbis	0x0e, 7	; 14
     a6e:	fe cf       	rjmp	.-4      	; 0xa6c <spi_read+0x2>
  return(SPDR);//return the value of the read data the came in
     a70:	8f b1       	in	r24, 0x0f	; 15
}
     a72:	08 95       	ret

00000a74 <read_encoders>:
  or decrement the count  accordingly
Parameters: NONE
Return:void
***************************************************************/
void read_encoders(){
  PORTE ^= (1<<SH_LD);//toggle to low
     a74:	93 b1       	in	r25, 0x03	; 3
     a76:	80 e4       	ldi	r24, 0x40	; 64
     a78:	98 27       	eor	r25, r24
     a7a:	93 b9       	out	0x03, r25	; 3
  PORTE ^= (1<<SH_LD);//toggle back to high
     a7c:	93 b1       	in	r25, 0x03	; 3
     a7e:	89 27       	eor	r24, r25
     a80:	83 b9       	out	0x03, r24	; 3
  PORTE ^= (1<<CLK_INH);//toggle to low
     a82:	83 b1       	in	r24, 0x03	; 3
     a84:	80 58       	subi	r24, 0x80	; 128
     a86:	83 b9       	out	0x03, r24	; 3
Return:
  uint8_t value that contains the value of SPDR register
***************************************************************/
 uint8_t spi_read(void)
{
  SPDR = 0x00;//Send dummy data  to be able read register
     a88:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)) {}//wait until it is done.
     a8a:	77 9b       	sbis	0x0e, 7	; 14
     a8c:	fe cf       	rjmp	.-4      	; 0xa8a <read_encoders+0x16>
  return(SPDR);//return the value of the read data the came in
     a8e:	8f b1       	in	r24, 0x0f	; 15
***************************************************************/
void read_encoders(){
  PORTE ^= (1<<SH_LD);//toggle to low
  PORTE ^= (1<<SH_LD);//toggle back to high
  PORTE ^= (1<<CLK_INH);//toggle to low
  encoder_val= spi_read();
     a90:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <encoder_val>
  PORTE ^= (1<<CLK_INH);//toggle to high
     a94:	83 b1       	in	r24, 0x03	; 3
     a96:	80 58       	subi	r24, 0x80	; 128
     a98:	83 b9       	out	0x03, r24	; 3

  //"clean" encoder1 value
  encoder1_present = encoder_val;
     a9a:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <encoder_val>
     a9e:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <encoder1_present>
  for ( bitn = 7; bitn > 1; bitn--) {
     aa2:	87 e0       	ldi	r24, 0x07	; 7
     aa4:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <bitn>
     aa8:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <bitn>
     aac:	82 30       	cpi	r24, 0x02	; 2
     aae:	d8 f0       	brcs	.+54     	; 0xae6 <read_encoders+0x72>
    encoder1_present &= ~(1<<bitn);
     ab0:	41 e0       	ldi	r20, 0x01	; 1
     ab2:	50 e0       	ldi	r21, 0x00	; 0
     ab4:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <bitn>
     ab8:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <encoder1_present>
     abc:	ba 01       	movw	r22, r20
     abe:	02 c0       	rjmp	.+4      	; 0xac4 <read_encoders+0x50>
     ac0:	66 0f       	add	r22, r22
     ac2:	77 1f       	adc	r23, r23
     ac4:	8a 95       	dec	r24
     ac6:	e2 f7       	brpl	.-8      	; 0xac0 <read_encoders+0x4c>
     ac8:	cb 01       	movw	r24, r22
     aca:	80 95       	com	r24
     acc:	90 95       	com	r25
     ace:	82 23       	and	r24, r18
     ad0:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <encoder1_present>
  encoder_val= spi_read();
  PORTE ^= (1<<CLK_INH);//toggle to high

  //"clean" encoder1 value
  encoder1_present = encoder_val;
  for ( bitn = 7; bitn > 1; bitn--) {
     ad4:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <bitn>
     ad8:	81 50       	subi	r24, 0x01	; 1
     ada:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <bitn>
     ade:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <bitn>
     ae2:	82 30       	cpi	r24, 0x02	; 2
     ae4:	38 f7       	brcc	.-50     	; 0xab4 <read_encoders+0x40>
    encoder1_present &= ~(1<<bitn);
  }
  //"clean" encoder2 value
  encoder2_present = (encoder_val>>2);//RS so that we get rid bit 0:1
     ae6:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <encoder_val>
     aea:	86 95       	lsr	r24
     aec:	86 95       	lsr	r24
     aee:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <encoder2_present>
  for ( bitn = 7; bitn > 1; bitn--) {
     af2:	87 e0       	ldi	r24, 0x07	; 7
     af4:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <bitn>
     af8:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <bitn>
     afc:	82 30       	cpi	r24, 0x02	; 2
     afe:	d8 f0       	brcs	.+54     	; 0xb36 <read_encoders+0xc2>
    encoder2_present &= ~(1<<bitn);
     b00:	41 e0       	ldi	r20, 0x01	; 1
     b02:	50 e0       	ldi	r21, 0x00	; 0
     b04:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <bitn>
     b08:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <encoder2_present>
     b0c:	ba 01       	movw	r22, r20
     b0e:	02 c0       	rjmp	.+4      	; 0xb14 <read_encoders+0xa0>
     b10:	66 0f       	add	r22, r22
     b12:	77 1f       	adc	r23, r23
     b14:	8a 95       	dec	r24
     b16:	e2 f7       	brpl	.-8      	; 0xb10 <read_encoders+0x9c>
     b18:	cb 01       	movw	r24, r22
     b1a:	80 95       	com	r24
     b1c:	90 95       	com	r25
     b1e:	82 23       	and	r24, r18
     b20:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <encoder2_present>
  for ( bitn = 7; bitn > 1; bitn--) {
    encoder1_present &= ~(1<<bitn);
  }
  //"clean" encoder2 value
  encoder2_present = (encoder_val>>2);//RS so that we get rid bit 0:1
  for ( bitn = 7; bitn > 1; bitn--) {
     b24:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <bitn>
     b28:	81 50       	subi	r24, 0x01	; 1
     b2a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <bitn>
     b2e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <bitn>
     b32:	82 30       	cpi	r24, 0x02	; 2
     b34:	38 f7       	brcc	.-50     	; 0xb04 <read_encoders+0x90>
    encoder2_present &= ~(1<<bitn);
  }

  if (reset == 1) {
     b36:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <reset>
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	09 f4       	brne	.+2      	; 0xb40 <read_encoders+0xcc>
     b3e:	7c c0       	rjmp	.+248    	; 0xc38 <read_encoders+0x1c4>
    reset = 0;//set to zero after first time
  }

  //Update for encoder1 (corse/ every locking position)
  //This updates HOURS
  switch (encoder1_present) {
     b40:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <encoder1_present>
     b44:	81 30       	cpi	r24, 0x01	; 1
     b46:	09 f4       	brne	.+2      	; 0xb4a <read_encoders+0xd6>
     b48:	86 c0       	rjmp	.+268    	; 0xc56 <read_encoders+0x1e2>
     b4a:	81 30       	cpi	r24, 0x01	; 1
     b4c:	08 f4       	brcc	.+2      	; 0xb50 <read_encoders+0xdc>
     b4e:	8e c0       	rjmp	.+284    	; 0xc6c <read_encoders+0x1f8>
     b50:	82 30       	cpi	r24, 0x02	; 2
     b52:	09 f4       	brne	.+2      	; 0xb56 <read_encoders+0xe2>
     b54:	68 c0       	rjmp	.+208    	; 0xc26 <read_encoders+0x1b2>
     b56:	83 30       	cpi	r24, 0x03	; 3
     b58:	09 f0       	breq	.+2      	; 0xb5c <read_encoders+0xe8>
     b5a:	a0 c0       	rjmp	.+320    	; 0xc9c <read_encoders+0x228>
      }else if (encoder1_past == 3 ) {//past state 11
        encoder1_past = encoder1_present;//set current state as past state
      }
      break;
    case 3://encoder value is 11
      if (encoder1_past == 1) {//past state 01
     b5c:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <encoder1_past>
     b60:	81 30       	cpi	r24, 0x01	; 1
     b62:	09 f4       	brne	.+2      	; 0xb66 <read_encoders+0xf2>
     b64:	be c0       	rjmp	.+380    	; 0xce2 <read_encoders+0x26e>
          if (a_hrs_std == 13) {
            a_hrs_std = 1;//reset standard time hours
          }
        }
        encoder1_past = encoder1_present;
      }else if (encoder1_past == 2 ) {//past state 10
     b66:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <encoder1_past>
     b6a:	82 30       	cpi	r24, 0x02	; 2
     b6c:	29 f5       	brne	.+74     	; 0xbb8 <read_encoders+0x144>
        if (((mode&1)==1) && (((mode>>1)&1)==0) ) {//clock time
     b6e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     b72:	80 ff       	sbrs	r24, 0
     b74:	64 c1       	rjmp	.+712    	; 0xe3e <read_encoders+0x3ca>
     b76:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     b7a:	81 fd       	sbrc	r24, 1
     b7c:	60 c1       	rjmp	.+704    	; 0xe3e <read_encoders+0x3ca>
          hrs_mil -= inc_dec2;//decrement hours military
     b7e:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <inc_dec2>
     b82:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <hrs_mil>
     b86:	89 1b       	sub	r24, r25
     b88:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <hrs_mil>
          hrs_std -= inc_dec2;//decrement hours standard
     b8c:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <inc_dec2>
     b90:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <hrs_std>
     b94:	89 1b       	sub	r24, r25
     b96:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <hrs_std>
          if (hrs_mil < 0) {
     b9a:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <hrs_mil>
     b9e:	87 fd       	sbrc	r24, 7
     ba0:	74 c1       	rjmp	.+744    	; 0xe8a <read_encoders+0x416>
            hrs_mil = 23;//reset military time hours
          }
          if (hrs_std <1) {
     ba2:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <hrs_std>
     ba6:	18 16       	cp	r1, r24
     ba8:	1c f0       	brlt	.+6      	; 0xbb0 <read_encoders+0x13c>
            hrs_std = 12;//reset standard time hours
     baa:	8c e0       	ldi	r24, 0x0C	; 12
     bac:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <hrs_std>
      break;
    case 0://encoder value 00
      if (encoder1_past == 2) {//past value 10
        encoder1_past = encoder1_present;
      }else if (encoder1_past == 1) {//past value 01
        encoder1_past = encoder1_present;
     bb0:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <encoder1_present>
     bb4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <encoder1_past>
      break;
  }

//Update for encoder2 (corse/ every locking position)
//This updates MINUTES
switch (encoder2_present) {
     bb8:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <encoder2_present>
     bbc:	81 30       	cpi	r24, 0x01	; 1
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <read_encoders+0x14e>
     bc0:	64 c0       	rjmp	.+200    	; 0xc8a <read_encoders+0x216>
     bc2:	81 30       	cpi	r24, 0x01	; 1
     bc4:	08 f4       	brcc	.+2      	; 0xbc8 <read_encoders+0x154>
     bc6:	82 c0       	rjmp	.+260    	; 0xccc <read_encoders+0x258>
     bc8:	82 30       	cpi	r24, 0x02	; 2
     bca:	09 f4       	brne	.+2      	; 0xbce <read_encoders+0x15a>
     bcc:	75 c0       	rjmp	.+234    	; 0xcb8 <read_encoders+0x244>
     bce:	83 30       	cpi	r24, 0x03	; 3
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <read_encoders+0x160>
     bd2:	6d c0       	rjmp	.+218    	; 0xcae <read_encoders+0x23a>
    }else if (encoder2_past == 3 ) {//curent state 11
      encoder2_past = encoder2_present;
    }
    break;
  case 3://curent state 11
    if (encoder2_past == 1) {//past state 01(increse)
     bd4:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <encoder2_past>
     bd8:	81 30       	cpi	r24, 0x01	; 1
     bda:	09 f4       	brne	.+2      	; 0xbde <read_encoders+0x16a>
     bdc:	ab c0       	rjmp	.+342    	; 0xd34 <read_encoders+0x2c0>
        }
      }else if(((mode&1)==0)&& (((mode>>BIT1)&1)==0)){//volume control
        OCR3A++;//increase volume
      }
      encoder2_past = encoder2_present;
    }else if (encoder2_past == 2 ) {//past state 10(decrese)
     bde:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <encoder2_past>
     be2:	82 30       	cpi	r24, 0x02	; 2
     be4:	09 f0       	breq	.+2      	; 0xbe8 <read_encoders+0x174>
     be6:	59 c0       	rjmp	.+178    	; 0xc9a <read_encoders+0x226>
      if (((mode&1)==1) && (((mode>>1)&1)==0)) {//clock time
     be8:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     bec:	80 fd       	sbrc	r24, 0
     bee:	d0 c0       	rjmp	.+416    	; 0xd90 <read_encoders+0x31c>
        min_count -= inc_dec1;//decrement minutes
        if (min_count < 0) {
          min_count = 59;//Zero to 59 mins
        }
      }else if (((mode&1)==0) && (((mode>>1)&1)==1)) {// Alarm time
     bf0:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     bf4:	80 fd       	sbrc	r24, 0
     bf6:	ff c0       	rjmp	.+510    	; 0xdf6 <read_encoders+0x382>
     bf8:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     bfc:	81 ff       	sbrs	r24, 1
     bfe:	fb c0       	rjmp	.+502    	; 0xdf6 <read_encoders+0x382>
        a_min_count -= inc_dec1;//decrement minutes
     c00:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <inc_dec1>
     c04:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <a_min_count>
     c08:	89 1b       	sub	r24, r25
     c0a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <a_min_count>
        if (a_min_count < 0) {
     c0e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <a_min_count>
     c12:	87 ff       	sbrs	r24, 7
     c14:	03 c0       	rjmp	.+6      	; 0xc1c <read_encoders+0x1a8>
          a_min_count = 59;//Zero to 59 mins
     c16:	8b e3       	ldi	r24, 0x3B	; 59
     c18:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <a_min_count>
    break;
  case 0://curent state 00
    if (encoder2_past == 2) {//past state 10
      encoder2_past = encoder2_present;
    }else if (encoder2_past == 1) {//past state 01
      encoder2_past = encoder2_present;
     c1c:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <encoder2_present>
     c20:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <encoder2_past>
     c24:	08 95       	ret
        }
        encoder1_past = encoder1_present;
      }
      break;
    case 2://encoder value 10
      if (encoder1_past == 3) {//past value 11
     c26:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <encoder1_past>
     c2a:	83 30       	cpi	r24, 0x03	; 3
     c2c:	09 f2       	breq	.-126    	; 0xbb0 <read_encoders+0x13c>
        encoder1_past = encoder1_present;
      }else if (encoder1_past == 0) {//past value 00
     c2e:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <encoder1_past>
     c32:	81 11       	cpse	r24, r1
     c34:	c1 cf       	rjmp	.-126    	; 0xbb8 <read_encoders+0x144>
     c36:	bc cf       	rjmp	.-136    	; 0xbb0 <read_encoders+0x13c>
  for ( bitn = 7; bitn > 1; bitn--) {
    encoder2_present &= ~(1<<bitn);
  }

  if (reset == 1) {
    encoder1_past = encoder1_present;//set them equal
     c38:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <encoder1_present>
     c3c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <encoder1_past>
    encoder2_past = encoder2_present;//set them equal
     c40:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <encoder2_present>
     c44:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <encoder2_past>
    reset = 0;//set to zero after first time
     c48:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <reset>
  }

  //Update for encoder1 (corse/ every locking position)
  //This updates HOURS
  switch (encoder1_present) {
     c4c:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <encoder1_present>
     c50:	81 30       	cpi	r24, 0x01	; 1
     c52:	09 f0       	breq	.+2      	; 0xc56 <read_encoders+0x1e2>
     c54:	7a cf       	rjmp	.-268    	; 0xb4a <read_encoders+0xd6>
    case 1://encoder value is 01
      if (encoder1_past == 0) {//past state 00
     c56:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <encoder1_past>
     c5a:	88 23       	and	r24, r24
     c5c:	09 f4       	brne	.+2      	; 0xc60 <read_encoders+0x1ec>
     c5e:	a8 cf       	rjmp	.-176    	; 0xbb0 <read_encoders+0x13c>
        encoder1_past = encoder1_present;//set current state as past state
      }else if (encoder1_past == 3 ) {//past state 11
     c60:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <encoder1_past>
     c64:	83 30       	cpi	r24, 0x03	; 3
     c66:	09 f0       	breq	.+2      	; 0xc6a <read_encoders+0x1f6>
     c68:	a7 cf       	rjmp	.-178    	; 0xbb8 <read_encoders+0x144>
     c6a:	a2 cf       	rjmp	.-188    	; 0xbb0 <read_encoders+0x13c>
      }else if (encoder1_past == 0) {//past value 00
        encoder1_past = encoder1_present;
      }
      break;
    case 0://encoder value 00
      if (encoder1_past == 2) {//past value 10
     c6c:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <encoder1_past>
     c70:	82 30       	cpi	r24, 0x02	; 2
     c72:	09 f4       	brne	.+2      	; 0xc76 <read_encoders+0x202>
     c74:	9d cf       	rjmp	.-198    	; 0xbb0 <read_encoders+0x13c>
        encoder1_past = encoder1_present;
      }else if (encoder1_past == 1) {//past value 01
     c76:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <encoder1_past>
     c7a:	81 30       	cpi	r24, 0x01	; 1
     c7c:	09 f4       	brne	.+2      	; 0xc80 <read_encoders+0x20c>
     c7e:	98 cf       	rjmp	.-208    	; 0xbb0 <read_encoders+0x13c>
      break;
  }

//Update for encoder2 (corse/ every locking position)
//This updates MINUTES
switch (encoder2_present) {
     c80:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <encoder2_present>
     c84:	81 30       	cpi	r24, 0x01	; 1
     c86:	09 f0       	breq	.+2      	; 0xc8a <read_encoders+0x216>
     c88:	9c cf       	rjmp	.-200    	; 0xbc2 <read_encoders+0x14e>
  case 1://current state is 01
    if (encoder2_past == 0) {//past state 00
     c8a:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <encoder2_past>
     c8e:	88 23       	and	r24, r24
     c90:	29 f2       	breq	.-118    	; 0xc1c <read_encoders+0x1a8>
      encoder2_past = encoder2_present;
    }else if (encoder2_past == 3 ) {//curent state 11
     c92:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <encoder2_past>
     c96:	83 30       	cpi	r24, 0x03	; 3
     c98:	09 f2       	breq	.-126    	; 0xc1c <read_encoders+0x1a8>
     c9a:	08 95       	ret
      }else if (encoder1_past == 1) {//past value 01
        encoder1_past = encoder1_present;
      }
      break;
    default://nothing has changed
      hrs_mil +=0;//add nothing
     c9c:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <hrs_mil>
     ca0:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <hrs_mil>
      hrs_std +=0;//add nothing
     ca4:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <hrs_std>
     ca8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <hrs_std>
      break;
     cac:	85 cf       	rjmp	.-246    	; 0xbb8 <read_encoders+0x144>
    }else if (encoder2_past == 1) {//past state 01
      encoder2_past = encoder2_present;
    }
    break;
  default://nothing has changed
    min_count +=0;//add nothing
     cae:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <min_count>
     cb2:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <min_count>
     cb6:	08 95       	ret
      }
      encoder2_past = encoder2_present;
    }
    break;
  case 2://current state 10
    if (encoder2_past == 3) {//past state 11
     cb8:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <encoder2_past>
     cbc:	83 30       	cpi	r24, 0x03	; 3
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <read_encoders+0x24e>
     cc0:	ad cf       	rjmp	.-166    	; 0xc1c <read_encoders+0x1a8>
      encoder2_past = encoder2_present;
    }else if (encoder2_past == 0) {//past state 00
     cc2:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <encoder2_past>
     cc6:	81 11       	cpse	r24, r1
     cc8:	e8 cf       	rjmp	.-48     	; 0xc9a <read_encoders+0x226>
     cca:	a8 cf       	rjmp	.-176    	; 0xc1c <read_encoders+0x1a8>
      encoder2_past = encoder2_present;
    }
    break;
  case 0://curent state 00
    if (encoder2_past == 2) {//past state 10
     ccc:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <encoder2_past>
     cd0:	82 30       	cpi	r24, 0x02	; 2
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <read_encoders+0x262>
     cd4:	a3 cf       	rjmp	.-186    	; 0xc1c <read_encoders+0x1a8>
      encoder2_past = encoder2_present;
    }else if (encoder2_past == 1) {//past state 01
     cd6:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <encoder2_past>
     cda:	81 30       	cpi	r24, 0x01	; 1
     cdc:	09 f4       	brne	.+2      	; 0xce0 <read_encoders+0x26c>
     cde:	9e cf       	rjmp	.-196    	; 0xc1c <read_encoders+0x1a8>
     ce0:	08 95       	ret
        encoder1_past = encoder1_present;//set current state as past state
      }
      break;
    case 3://encoder value is 11
      if (encoder1_past == 1) {//past state 01
        if ( ((mode&1)==1) && (((mode>>1)&1)==0) ) {//Clock time
     ce2:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     ce6:	80 fd       	sbrc	r24, 0
     ce8:	66 c0       	rjmp	.+204    	; 0xdb6 <read_encoders+0x342>
            hrs_mil = 0;//reset military time hours
          }
          if (hrs_std == 13) {
            hrs_std = 1;//reset standard time hours
          }
        }else if (((mode&1)==0) && (((mode>>1)&1)==1) ) {//Alarm time
     cea:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     cee:	80 fd       	sbrc	r24, 0
     cf0:	5f cf       	rjmp	.-322    	; 0xbb0 <read_encoders+0x13c>
     cf2:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     cf6:	81 ff       	sbrs	r24, 1
     cf8:	5b cf       	rjmp	.-330    	; 0xbb0 <read_encoders+0x13c>
          a_hrs_mil += inc_dec2;//incremetn hours military
     cfa:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <inc_dec2>
     cfe:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <a_hrs_mil>
     d02:	89 0f       	add	r24, r25
     d04:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <a_hrs_mil>
          a_hrs_std += inc_dec2;//increment hours standard
     d08:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <inc_dec2>
     d0c:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <a_hrs_std>
     d10:	89 0f       	add	r24, r25
     d12:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <a_hrs_std>
          if (a_hrs_mil == 24) {
     d16:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <a_hrs_mil>
     d1a:	88 31       	cpi	r24, 0x18	; 24
     d1c:	11 f4       	brne	.+4      	; 0xd22 <read_encoders+0x2ae>
            a_hrs_mil = 0;//reset military time hours
     d1e:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <a_hrs_mil>
          }
          if (a_hrs_std == 13) {
     d22:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <a_hrs_std>
     d26:	8d 30       	cpi	r24, 0x0D	; 13
     d28:	09 f0       	breq	.+2      	; 0xd2c <read_encoders+0x2b8>
     d2a:	42 cf       	rjmp	.-380    	; 0xbb0 <read_encoders+0x13c>
            a_hrs_std = 1;//reset standard time hours
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <a_hrs_std>
     d32:	3e cf       	rjmp	.-388    	; 0xbb0 <read_encoders+0x13c>
      encoder2_past = encoder2_present;
    }
    break;
  case 3://curent state 11
    if (encoder2_past == 1) {//past state 01(increse)
      if (((mode&1)==1) && (((mode>>1)&1)==0)) {//clock time
     d34:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     d38:	80 fd       	sbrc	r24, 0
     d3a:	17 c0       	rjmp	.+46     	; 0xd6a <read_encoders+0x2f6>
        min_count += inc_dec1;//increment minutes
        if (min_count == 60) {
          min_count = 0;//reset mins if over 59
        }
      }else if (((mode&1)==0) && (((mode>>1)&1)==1)) {//Alarm time
     d3c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     d40:	80 fd       	sbrc	r24, 0
     d42:	6b c0       	rjmp	.+214    	; 0xe1a <read_encoders+0x3a6>
     d44:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     d48:	81 ff       	sbrs	r24, 1
     d4a:	67 c0       	rjmp	.+206    	; 0xe1a <read_encoders+0x3a6>
        a_min_count += inc_dec1;//increment minutes
     d4c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <inc_dec1>
     d50:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <a_min_count>
     d54:	89 0f       	add	r24, r25
     d56:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <a_min_count>
        if (a_min_count == 60) {
     d5a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <a_min_count>
     d5e:	8c 33       	cpi	r24, 0x3C	; 60
     d60:	09 f0       	breq	.+2      	; 0xd64 <read_encoders+0x2f0>
     d62:	5c cf       	rjmp	.-328    	; 0xc1c <read_encoders+0x1a8>
          a_min_count = 0;//reset mins if over 59
     d64:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <a_min_count>
     d68:	59 cf       	rjmp	.-334    	; 0xc1c <read_encoders+0x1a8>
      encoder2_past = encoder2_present;
    }
    break;
  case 3://curent state 11
    if (encoder2_past == 1) {//past state 01(increse)
      if (((mode&1)==1) && (((mode>>1)&1)==0)) {//clock time
     d6a:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     d6e:	81 fd       	sbrc	r24, 1
     d70:	e5 cf       	rjmp	.-54     	; 0xd3c <read_encoders+0x2c8>
        min_count += inc_dec1;//increment minutes
     d72:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <inc_dec1>
     d76:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <min_count>
     d7a:	89 0f       	add	r24, r25
     d7c:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <min_count>
        if (min_count == 60) {
     d80:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <min_count>
     d84:	8c 33       	cpi	r24, 0x3C	; 60
     d86:	09 f0       	breq	.+2      	; 0xd8a <read_encoders+0x316>
     d88:	49 cf       	rjmp	.-366    	; 0xc1c <read_encoders+0x1a8>
          min_count = 0;//reset mins if over 59
     d8a:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <min_count>
     d8e:	46 cf       	rjmp	.-372    	; 0xc1c <read_encoders+0x1a8>
      }else if(((mode&1)==0)&& (((mode>>BIT1)&1)==0)){//volume control
        OCR3A++;//increase volume
      }
      encoder2_past = encoder2_present;
    }else if (encoder2_past == 2 ) {//past state 10(decrese)
      if (((mode&1)==1) && (((mode>>1)&1)==0)) {//clock time
     d90:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     d94:	81 fd       	sbrc	r24, 1
     d96:	2c cf       	rjmp	.-424    	; 0xbf0 <read_encoders+0x17c>
        min_count -= inc_dec1;//decrement minutes
     d98:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <inc_dec1>
     d9c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <min_count>
     da0:	89 1b       	sub	r24, r25
     da2:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <min_count>
        if (min_count < 0) {
     da6:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <min_count>
     daa:	87 ff       	sbrs	r24, 7
     dac:	37 cf       	rjmp	.-402    	; 0xc1c <read_encoders+0x1a8>
          min_count = 59;//Zero to 59 mins
     dae:	8b e3       	ldi	r24, 0x3B	; 59
     db0:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <min_count>
     db4:	33 cf       	rjmp	.-410    	; 0xc1c <read_encoders+0x1a8>
        encoder1_past = encoder1_present;//set current state as past state
      }
      break;
    case 3://encoder value is 11
      if (encoder1_past == 1) {//past state 01
        if ( ((mode&1)==1) && (((mode>>1)&1)==0) ) {//Clock time
     db6:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     dba:	81 fd       	sbrc	r24, 1
     dbc:	96 cf       	rjmp	.-212    	; 0xcea <read_encoders+0x276>
          hrs_mil += inc_dec2;//incremetn hours military
     dbe:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <inc_dec2>
     dc2:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <hrs_mil>
     dc6:	89 0f       	add	r24, r25
     dc8:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <hrs_mil>
          hrs_std += inc_dec2;//increment hours standard
     dcc:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <inc_dec2>
     dd0:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <hrs_std>
     dd4:	89 0f       	add	r24, r25
     dd6:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <hrs_std>
          if (hrs_mil == 24) {
     dda:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <hrs_mil>
     dde:	88 31       	cpi	r24, 0x18	; 24
     de0:	09 f4       	brne	.+2      	; 0xde4 <read_encoders+0x370>
     de2:	50 c0       	rjmp	.+160    	; 0xe84 <read_encoders+0x410>
            hrs_mil = 0;//reset military time hours
          }
          if (hrs_std == 13) {
     de4:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <hrs_std>
     de8:	8d 30       	cpi	r24, 0x0D	; 13
     dea:	09 f0       	breq	.+2      	; 0xdee <read_encoders+0x37a>
     dec:	e1 ce       	rjmp	.-574    	; 0xbb0 <read_encoders+0x13c>
            hrs_std = 1;//reset standard time hours
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <hrs_std>
     df4:	dd ce       	rjmp	.-582    	; 0xbb0 <read_encoders+0x13c>
      }else if (((mode&1)==0) && (((mode>>1)&1)==1)) {// Alarm time
        a_min_count -= inc_dec1;//decrement minutes
        if (a_min_count < 0) {
          a_min_count = 59;//Zero to 59 mins
        }
      }else if(((mode&1)==0)&& (((mode>>BIT1)&1)==0)){//volume control
     df6:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     dfa:	80 fd       	sbrc	r24, 0
     dfc:	0f cf       	rjmp	.-482    	; 0xc1c <read_encoders+0x1a8>
     dfe:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     e02:	81 fd       	sbrc	r24, 1
     e04:	0b cf       	rjmp	.-490    	; 0xc1c <read_encoders+0x1a8>
        OCR3A--;//decrease volume
     e06:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     e0a:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     e0e:	01 97       	sbiw	r24, 0x01	; 1
     e10:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     e14:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     e18:	01 cf       	rjmp	.-510    	; 0xc1c <read_encoders+0x1a8>
      }else if (((mode&1)==0) && (((mode>>1)&1)==1)) {//Alarm time
        a_min_count += inc_dec1;//increment minutes
        if (a_min_count == 60) {
          a_min_count = 0;//reset mins if over 59
        }
      }else if(((mode&1)==0)&& (((mode>>BIT1)&1)==0)){//volume control
     e1a:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     e1e:	80 fd       	sbrc	r24, 0
     e20:	fd ce       	rjmp	.-518    	; 0xc1c <read_encoders+0x1a8>
     e22:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     e26:	81 fd       	sbrc	r24, 1
     e28:	f9 ce       	rjmp	.-526    	; 0xc1c <read_encoders+0x1a8>
        OCR3A++;//increase volume
     e2a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     e2e:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     e32:	01 96       	adiw	r24, 0x01	; 1
     e34:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     e38:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     e3c:	ef ce       	rjmp	.-546    	; 0xc1c <read_encoders+0x1a8>
            hrs_mil = 23;//reset military time hours
          }
          if (hrs_std <1) {
            hrs_std = 12;//reset standard time hours
          }
        }else if (((mode&1)==0) && (((mode>>1)&1)==1)) {//Alarm time
     e3e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     e42:	80 fd       	sbrc	r24, 0
     e44:	b5 ce       	rjmp	.-662    	; 0xbb0 <read_encoders+0x13c>
     e46:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     e4a:	81 ff       	sbrs	r24, 1
     e4c:	b1 ce       	rjmp	.-670    	; 0xbb0 <read_encoders+0x13c>
          a_hrs_mil -= inc_dec2;//decrement hours military
     e4e:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <inc_dec2>
     e52:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <a_hrs_mil>
     e56:	89 1b       	sub	r24, r25
     e58:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <a_hrs_mil>
          a_hrs_std -= inc_dec2;//decrement hours standard
     e5c:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <inc_dec2>
     e60:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <a_hrs_std>
     e64:	89 1b       	sub	r24, r25
     e66:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <a_hrs_std>
          if (a_hrs_mil < 0) {
     e6a:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <a_hrs_mil>
     e6e:	87 fd       	sbrc	r24, 7
     e70:	10 c0       	rjmp	.+32     	; 0xe92 <read_encoders+0x41e>
            a_hrs_mil = 23;//reset military time hours
          }
          if (a_hrs_std <1) {
     e72:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <a_hrs_std>
     e76:	18 16       	cp	r1, r24
     e78:	0c f4       	brge	.+2      	; 0xe7c <read_encoders+0x408>
     e7a:	9a ce       	rjmp	.-716    	; 0xbb0 <read_encoders+0x13c>
            a_hrs_std = 12;//reset standard time hours
     e7c:	8c e0       	ldi	r24, 0x0C	; 12
     e7e:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <a_hrs_std>
     e82:	96 ce       	rjmp	.-724    	; 0xbb0 <read_encoders+0x13c>
      if (encoder1_past == 1) {//past state 01
        if ( ((mode&1)==1) && (((mode>>1)&1)==0) ) {//Clock time
          hrs_mil += inc_dec2;//incremetn hours military
          hrs_std += inc_dec2;//increment hours standard
          if (hrs_mil == 24) {
            hrs_mil = 0;//reset military time hours
     e84:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <hrs_mil>
     e88:	ad cf       	rjmp	.-166    	; 0xde4 <read_encoders+0x370>
      }else if (encoder1_past == 2 ) {//past state 10
        if (((mode&1)==1) && (((mode>>1)&1)==0) ) {//clock time
          hrs_mil -= inc_dec2;//decrement hours military
          hrs_std -= inc_dec2;//decrement hours standard
          if (hrs_mil < 0) {
            hrs_mil = 23;//reset military time hours
     e8a:	87 e1       	ldi	r24, 0x17	; 23
     e8c:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <hrs_mil>
     e90:	88 ce       	rjmp	.-752    	; 0xba2 <read_encoders+0x12e>
          }
        }else if (((mode&1)==0) && (((mode>>1)&1)==1)) {//Alarm time
          a_hrs_mil -= inc_dec2;//decrement hours military
          a_hrs_std -= inc_dec2;//decrement hours standard
          if (a_hrs_mil < 0) {
            a_hrs_mil = 23;//reset military time hours
     e92:	87 e1       	ldi	r24, 0x17	; 23
     e94:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <a_hrs_mil>
     e98:	ec cf       	rjmp	.-40     	; 0xe72 <read_encoders+0x3fe>

00000e9a <__vector_10>:


//***********************************************************************
//                     ISR for timer counter TWO
//***********************************************************************
ISR(TIMER2_OVF_vect){
     e9a:	1f 92       	push	r1
     e9c:	0f 92       	push	r0
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	0f 92       	push	r0
     ea2:	11 24       	eor	r1, r1
     ea4:	0b b6       	in	r0, 0x3b	; 59
     ea6:	0f 92       	push	r0
     ea8:	2f 93       	push	r18
     eaa:	3f 93       	push	r19
     eac:	4f 93       	push	r20
     eae:	5f 93       	push	r21
     eb0:	6f 93       	push	r22
     eb2:	7f 93       	push	r23
     eb4:	8f 93       	push	r24
     eb6:	9f 93       	push	r25
     eb8:	af 93       	push	r26
     eba:	bf 93       	push	r27
     ebc:	ef 93       	push	r30
     ebe:	ff 93       	push	r31
  //Store PORT values to be able to restore
  PORTA_previous =PINA;//save PORTA values
     ec0:	89 b3       	in	r24, 0x19	; 25
     ec2:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <PORTA_previous>
  PORTC_previous = PINC;//save PORTC values
     ec6:	83 b3       	in	r24, 0x13	; 19
     ec8:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <PORTC_previous>

  update_mode();//update Bar graph
     ecc:	0e 94 c2 04 	call	0x984	; 0x984 <update_mode>
  mil_std = (mode>>2) & 0x01;//Set to military or standard
     ed0:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     ed4:	82 fb       	bst	r24, 2
     ed6:	88 27       	eor	r24, r24
     ed8:	80 f9       	bld	r24, 0
     eda:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <mil_std>
  read_encoders();//read encoders
     ede:	0e 94 3a 05 	call	0xa74	; 0xa74 <read_encoders>

  //restore PORT A and C values
  DDRA = 0xFF;//outside of ISR, always output
     ee2:	8f ef       	ldi	r24, 0xFF	; 255
     ee4:	8a bb       	out	0x1a, r24	; 26
  PORTA = PORTA_previous;//restore PORTA
     ee6:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <PORTA_previous>
     eea:	8b bb       	out	0x1b, r24	; 27
  PORTC = PORTC_previous;//restore PORTC
     eec:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <PORTC_previous>
     ef0:	85 bb       	out	0x15, r24	; 21

}
     ef2:	ff 91       	pop	r31
     ef4:	ef 91       	pop	r30
     ef6:	bf 91       	pop	r27
     ef8:	af 91       	pop	r26
     efa:	9f 91       	pop	r25
     efc:	8f 91       	pop	r24
     efe:	7f 91       	pop	r23
     f00:	6f 91       	pop	r22
     f02:	5f 91       	pop	r21
     f04:	4f 91       	pop	r20
     f06:	3f 91       	pop	r19
     f08:	2f 91       	pop	r18
     f0a:	0f 90       	pop	r0
     f0c:	0b be       	out	0x3b, r0	; 59
     f0e:	0f 90       	pop	r0
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	0f 90       	pop	r0
     f14:	1f 90       	pop	r1
     f16:	18 95       	reti

00000f18 <spi_init>:
//***********************************************************************
//                            spi_init
//**********************************************************************
void spi_init(void){
  //PORTB ouput: ss(pb0), MOSI(pb2), sclk(pb1)
  DDRB  |= (1<<BIT0)|(1<<BIT1)|(1<<BIT2);
     f18:	87 b3       	in	r24, 0x17	; 23
     f1a:	87 60       	ori	r24, 0x07	; 7
     f1c:	87 bb       	out	0x17, r24	; 23
  SPCR   = (1<<SPE) | (1<<MSTR) ; //master mode, clk low on idle, leading edge sample
     f1e:	80 e5       	ldi	r24, 0x50	; 80
     f20:	8d b9       	out	0x0d, r24	; 13
  SPSR   = (1<<SPI2X); //choose double speed operation
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	8e b9       	out	0x0e, r24	; 14
     f26:	08 95       	ret

00000f28 <display_mode>:
  SPI protocol
Parameters: NONE
Return:void
***************************************************************/
void display_mode(){
  SPDR = mode;//write value to register
     f28:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
     f2c:	8f b9       	out	0x0f, r24	; 15
  while(bit_is_clear(SPSR,SPIF)){}//wait until data is sent
     f2e:	77 9b       	sbis	0x0e, 7	; 14
     f30:	fe cf       	rjmp	.-4      	; 0xf2e <display_mode+0x6>
  PORTB ^=(1<<BIT0);//send rising edge to regclk on HC595
     f32:	98 b3       	in	r25, 0x18	; 24
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	98 27       	eor	r25, r24
     f38:	98 bb       	out	0x18, r25	; 24
  PORTB ^=(1<<BIT0);//send falling edge to reglck on HC595
     f3a:	98 b3       	in	r25, 0x18	; 24
     f3c:	89 27       	eor	r24, r25
     f3e:	88 bb       	out	0x18, r24	; 24
     f40:	08 95       	ret

00000f42 <lcd_ports>:
    display to work correctly
  Parameters: NONE
  Return:void
  ***************************************************************/
  void lcd_ports(){
    DDRF  |= 0x08;  //port F bit 3 is enable for LCD
     f42:	e1 e6       	ldi	r30, 0x61	; 97
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	88 60       	ori	r24, 0x08	; 8
     f4a:	80 83       	st	Z, r24
    PORTF &= 0xF7;  //port F bit 3 is initially low
     f4c:	e2 e6       	ldi	r30, 0x62	; 98
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	87 7f       	andi	r24, 0xF7	; 247
     f54:	80 83       	st	Z, r24
     f56:	08 95       	ret

00000f58 <__vector_29>:
  }

  // //***********************************************************************
  // //                     ISR for timer counter three
  // //***********************************************************************
  ISR(TIMER3_OVF_vect){
     f58:	1f 92       	push	r1
     f5a:	0f 92       	push	r0
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	0f 92       	push	r0
     f60:	11 24       	eor	r1, r1
     f62:	0b b6       	in	r0, 0x3b	; 59
     f64:	0f 92       	push	r0
     f66:	2f 93       	push	r18
     f68:	3f 93       	push	r19
     f6a:	4f 93       	push	r20
     f6c:	5f 93       	push	r21
     f6e:	6f 93       	push	r22
     f70:	7f 93       	push	r23
     f72:	8f 93       	push	r24
     f74:	9f 93       	push	r25
     f76:	af 93       	push	r26
     f78:	bf 93       	push	r27
     f7a:	ef 93       	push	r30
     f7c:	ff 93       	push	r31
    static uint8_t count_isr3 = 0;
    count_isr3++;
     f7e:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <count_isr3.2275>
     f82:	8f 5f       	subi	r24, 0xFF	; 255
     f84:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <count_isr3.2275>

    if ((count_isr3%60)==0) {
     f88:	99 e8       	ldi	r25, 0x89	; 137
     f8a:	89 9f       	mul	r24, r25
     f8c:	91 2d       	mov	r25, r1
     f8e:	11 24       	eor	r1, r1
     f90:	92 95       	swap	r25
     f92:	96 95       	lsr	r25
     f94:	97 70       	andi	r25, 0x07	; 7
     f96:	2c e3       	ldi	r18, 0x3C	; 60
     f98:	92 9f       	mul	r25, r18
     f9a:	80 19       	sub	r24, r0
     f9c:	11 24       	eor	r1, r1
     f9e:	81 11       	cpse	r24, r1
     fa0:	35 c0       	rjmp	.+106    	; 0x100c <__vector_29+0xb4>
Parameters: NONE
Return:
  * 16 bit unsigned  adc result
***************************************************************/
uint16_t adc_read(){
  ADCSRA |= (1<<ADSC);//Start ADC
     fa2:	36 9a       	sbi	0x06, 6	; 6
  while (bit_is_clear(ADCSRA,ADIF)){}//wait for ADC to finish
     fa4:	34 9b       	sbis	0x06, 4	; 6
     fa6:	fe cf       	rjmp	.-4      	; 0xfa4 <__vector_29+0x4c>
  ADCSRA |= (1<<ADIF);//clear flag by writing one
     fa8:	34 9a       	sbi	0x06, 4	; 6
  return ADC;
     faa:	84 b1       	in	r24, 0x04	; 4
     fac:	95 b1       	in	r25, 0x05	; 5
  ISR(TIMER3_OVF_vect){
    static uint8_t count_isr3 = 0;
    count_isr3++;

    if ((count_isr3%60)==0) {
      adc_result = adc_read();//read adc
     fae:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <adc_result+0x1>
     fb2:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <adc_result>
      ocr2_value = 0.457*adc_result-100;//calculate new ocr2
     fb6:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <adc_result>
     fba:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <adc_result+0x1>
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	0e 94 43 11 	call	0x2286	; 0x2286 <__floatunsisf>
     fc6:	27 ee       	ldi	r18, 0xE7	; 231
     fc8:	3b ef       	ldi	r19, 0xFB	; 251
     fca:	49 ee       	ldi	r20, 0xE9	; 233
     fcc:	5e e3       	ldi	r21, 0x3E	; 62
     fce:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__mulsf3>
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	48 ec       	ldi	r20, 0xC8	; 200
     fd8:	52 e4       	ldi	r21, 0x42	; 66
     fda:	0e 94 a0 10 	call	0x2140	; 0x2140 <__subsf3>
     fde:	0e 94 0d 11 	call	0x221a	; 0x221a <__fixsfsi>
     fe2:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <ocr2_value+0x1>
     fe6:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <ocr2_value>
      //bound ocr2_value to 0-255
      if (ocr2_value<10) {
     fea:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <ocr2_value>
     fee:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <ocr2_value+0x1>
     ff2:	0a 97       	sbiw	r24, 0x0a	; 10
     ff4:	f4 f4       	brge	.+60     	; 0x1032 <__vector_29+0xda>
        ocr2_value = 10;
     ff6:	8a e0       	ldi	r24, 0x0A	; 10
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <ocr2_value+0x1>
     ffe:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <ocr2_value>
      }else if (ocr2_value>255) {
        ocr2_value = 255;//
      }
      OCR2 = ocr2_value;//set new OCR2
    1002:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <ocr2_value>
    1006:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <ocr2_value+0x1>
    100a:	83 bd       	out	0x23, r24	; 35
    }

  }
    100c:	ff 91       	pop	r31
    100e:	ef 91       	pop	r30
    1010:	bf 91       	pop	r27
    1012:	af 91       	pop	r26
    1014:	9f 91       	pop	r25
    1016:	8f 91       	pop	r24
    1018:	7f 91       	pop	r23
    101a:	6f 91       	pop	r22
    101c:	5f 91       	pop	r21
    101e:	4f 91       	pop	r20
    1020:	3f 91       	pop	r19
    1022:	2f 91       	pop	r18
    1024:	0f 90       	pop	r0
    1026:	0b be       	out	0x3b, r0	; 59
    1028:	0f 90       	pop	r0
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	0f 90       	pop	r0
    102e:	1f 90       	pop	r1
    1030:	18 95       	reti
      adc_result = adc_read();//read adc
      ocr2_value = 0.457*adc_result-100;//calculate new ocr2
      //bound ocr2_value to 0-255
      if (ocr2_value<10) {
        ocr2_value = 10;
      }else if (ocr2_value>255) {
    1032:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <ocr2_value>
    1036:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <ocr2_value+0x1>
    103a:	8f 3f       	cpi	r24, 0xFF	; 255
    103c:	91 05       	cpc	r25, r1
    103e:	09 f3       	breq	.-62     	; 0x1002 <__vector_29+0xaa>
    1040:	04 f3       	brlt	.-64     	; 0x1002 <__vector_29+0xaa>
        ocr2_value = 255;//
    1042:	8f ef       	ldi	r24, 0xFF	; 255
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <ocr2_value+0x1>
    104a:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <ocr2_value>
    104e:	d9 cf       	rjmp	.-78     	; 0x1002 <__vector_29+0xaa>

00001050 <send_lcd>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1050:	91 e0       	ldi	r25, 0x01	; 1
    1052:	81 11       	cpse	r24, r1
    1054:	01 c0       	rjmp	.+2      	; 0x1058 <send_lcd+0x8>
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    105a:	77 9b       	sbis	0x0e, 7	; 14
    105c:	fe cf       	rjmp	.-4      	; 0x105a <send_lcd+0xa>
  SPDR = byte;                        //send payload
    105e:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1060:	77 9b       	sbis	0x0e, 7	; 14
    1062:	fe cf       	rjmp	.-4      	; 0x1060 <send_lcd+0x10>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1064:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1068:	88 60       	ori	r24, 0x08	; 8
    106a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    106e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1072:	87 7f       	andi	r24, 0xF7	; 247
    1074:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1078:	8f e9       	ldi	r24, 0x9F	; 159
    107a:	9f e0       	ldi	r25, 0x0F	; 15
    107c:	01 97       	sbiw	r24, 0x01	; 1
    107e:	f1 f7       	brne	.-4      	; 0x107c <send_lcd+0x2c>
    1080:	00 c0       	rjmp	.+0      	; 0x1082 <send_lcd+0x32>
    1082:	00 00       	nop
    1084:	08 95       	ret

00001086 <refresh_lcd>:

void refresh_lcd(char lcd_string_array[]) {

    static uint8_t index=0;           // index into string array

    SPDR = 0x01; //set SR for data
    1086:	21 e0       	ldi	r18, 0x01	; 1
    1088:	2f b9       	out	0x0f, r18	; 15
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
    108a:	77 9b       	sbis	0x0e, 7	; 14
    108c:	fe cf       	rjmp	.-4      	; 0x108a <refresh_lcd+0x4>
    SPDR = lcd_string_array[index];
    108e:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <index.2091>
    1092:	fc 01       	movw	r30, r24
    1094:	e2 0f       	add	r30, r18
    1096:	f1 1d       	adc	r31, r1
    1098:	80 81       	ld	r24, Z
    109a:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
    109c:	77 9b       	sbis	0x0e, 7	; 14
    109e:	fe cf       	rjmp	.-4      	; 0x109c <refresh_lcd+0x16>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    10a0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10a4:	88 60       	ori	r24, 0x08	; 8
    10a6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10aa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10ae:	87 7f       	andi	r24, 0xF7	; 247
    10b0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    SPDR = 0x01; //set SR for data
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
    SPDR = lcd_string_array[index];
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
    strobe_lcd();                   //write into LCD
    index++;                        //increment to next character
    10b4:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <index.2091>
    10b8:	8f 5f       	subi	r24, 0xFF	; 255
    10ba:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <index.2091>
    if(index == 16) {_delay_us(40); home_line2();}           //on to 2nd line, 1st position
    10be:	80 31       	cpi	r24, 0x10	; 16
    10c0:	09 f1       	breq	.+66     	; 0x1104 <__stack+0x5>
    if(index == 32) {_delay_us(40); cursor_home(); index=0;} //back to 1st line, 1st position
    10c2:	80 32       	cpi	r24, 0x20	; 32
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <refresh_lcd+0x42>
    10c6:	08 95       	ret
    10c8:	95 ed       	ldi	r25, 0xD5	; 213
    10ca:	9a 95       	dec	r25
    10cc:	f1 f7       	brne	.-4      	; 0x10ca <refresh_lcd+0x44>
    10ce:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    10d0:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    10d2:	77 9b       	sbis	0x0e, 7	; 14
    10d4:	fe cf       	rjmp	.-4      	; 0x10d2 <refresh_lcd+0x4c>
  SPDR = byte;                        //send payload
    10d6:	82 e0       	ldi	r24, 0x02	; 2
    10d8:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    10da:	77 9b       	sbis	0x0e, 7	; 14
    10dc:	fe cf       	rjmp	.-4      	; 0x10da <refresh_lcd+0x54>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    10de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10e2:	88 60       	ori	r24, 0x08	; 8
    10e4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10e8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10ec:	87 7f       	andi	r24, 0xF7	; 247
    10ee:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10f2:	8f e9       	ldi	r24, 0x9F	; 159
    10f4:	9f e0       	ldi	r25, 0x0F	; 15
    10f6:	01 97       	sbiw	r24, 0x01	; 1
    10f8:	f1 f7       	brne	.-4      	; 0x10f6 <refresh_lcd+0x70>
    10fa:	00 c0       	rjmp	.+0      	; 0x10fc <refresh_lcd+0x76>
    10fc:	00 00       	nop
    SPDR = lcd_string_array[index];
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
    strobe_lcd();                   //write into LCD
    index++;                        //increment to next character
    if(index == 16) {_delay_us(40); home_line2();}           //on to 2nd line, 1st position
    if(index == 32) {_delay_us(40); cursor_home(); index=0;} //back to 1st line, 1st position
    10fe:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <index.2091>
    1102:	08 95       	ret
    1104:	85 ed       	ldi	r24, 0xD5	; 213
    1106:	8a 95       	dec	r24
    1108:	f1 f7       	brne	.-4      	; 0x1106 <__stack+0x7>
    110a:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    110c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    110e:	77 9b       	sbis	0x0e, 7	; 14
    1110:	fe cf       	rjmp	.-4      	; 0x110e <__stack+0xf>
  SPDR = byte;                        //send payload
    1112:	80 ec       	ldi	r24, 0xC0	; 192
    1114:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1116:	77 9b       	sbis	0x0e, 7	; 14
    1118:	fe cf       	rjmp	.-4      	; 0x1116 <__stack+0x17>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    111a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    111e:	88 60       	ori	r24, 0x08	; 8
    1120:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1124:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1128:	87 7f       	andi	r24, 0xF7	; 247
    112a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    112e:	8f e9       	ldi	r24, 0x9F	; 159
    1130:	9f e0       	ldi	r25, 0x0F	; 15
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	f1 f7       	brne	.-4      	; 0x1132 <__stack+0x33>
    1136:	00 c0       	rjmp	.+0      	; 0x1138 <__stack+0x39>
    1138:	00 00       	nop
    113a:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <index.2091>
    113e:	c1 cf       	rjmp	.-126    	; 0x10c2 <refresh_lcd+0x3c>

00001140 <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3), 1000);  //only needs 40uS!
    1140:	66 0f       	add	r22, r22
    1142:	66 0f       	add	r22, r22
    1144:	66 0f       	add	r22, r22
    1146:	60 5c       	subi	r22, 0xC0	; 192
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1148:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    114a:	77 9b       	sbis	0x0e, 7	; 14
    114c:	fe cf       	rjmp	.-4      	; 0x114a <set_custom_character+0xa>
  SPDR = byte;                        //send payload
    114e:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1150:	77 9b       	sbis	0x0e, 7	; 14
    1152:	fe cf       	rjmp	.-4      	; 0x1150 <set_custom_character+0x10>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1154:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1158:	28 60       	ori	r18, 0x08	; 8
    115a:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    115e:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1162:	27 7f       	andi	r18, 0xF7	; 247
    1164:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1168:	af e9       	ldi	r26, 0x9F	; 159
    116a:	bf e0       	ldi	r27, 0x0F	; 15
    116c:	11 97       	sbiw	r26, 0x01	; 1
    116e:	f1 f7       	brne	.-4      	; 0x116c <set_custom_character+0x2c>
    1170:	00 c0       	rjmp	.+0      	; 0x1172 <set_custom_character+0x32>
    1172:	00 00       	nop
    1174:	fc 01       	movw	r30, r24
    1176:	9c 01       	movw	r18, r24
    1178:	28 5f       	subi	r18, 0xF8	; 248
    117a:	3f 4f       	sbci	r19, 0xFF	; 255
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    117c:	91 e0       	ldi	r25, 0x01	; 1
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3), 1000);  //only needs 40uS!
    for(i=0; i<8; i++){send_lcd(CHAR_BYTE, data[i], 100);}
    117e:	81 91       	ld	r24, Z+
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1180:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1182:	77 9b       	sbis	0x0e, 7	; 14
    1184:	fe cf       	rjmp	.-4      	; 0x1182 <set_custom_character+0x42>
  SPDR = byte;                        //send payload
    1186:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1188:	77 9b       	sbis	0x0e, 7	; 14
    118a:	fe cf       	rjmp	.-4      	; 0x1188 <set_custom_character+0x48>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    118c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1190:	88 60       	ori	r24, 0x08	; 8
    1192:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1196:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    119a:	87 7f       	andi	r24, 0xF7	; 247
    119c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11a0:	af e9       	ldi	r26, 0x9F	; 159
    11a2:	bf e0       	ldi	r27, 0x0F	; 15
    11a4:	11 97       	sbiw	r26, 0x01	; 1
    11a6:	f1 f7       	brne	.-4      	; 0x11a4 <set_custom_character+0x64>
    11a8:	00 c0       	rjmp	.+0      	; 0x11aa <set_custom_character+0x6a>
    11aa:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3), 1000);  //only needs 40uS!
    for(i=0; i<8; i++){send_lcd(CHAR_BYTE, data[i], 100);}
    11ac:	e2 17       	cp	r30, r18
    11ae:	f3 07       	cpc	r31, r19
    11b0:	31 f7       	brne	.-52     	; 0x117e <set_custom_character+0x3e>
}
    11b2:	08 95       	ret

000011b4 <set_cursor>:
//                          set_cursor
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40), 1000);
    11b4:	90 e4       	ldi	r25, 0x40	; 64
    11b6:	89 9f       	mul	r24, r25
    11b8:	60 0d       	add	r22, r0
    11ba:	11 24       	eor	r1, r1
    11bc:	60 5c       	subi	r22, 0xC0	; 192
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    11be:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    11c0:	77 9b       	sbis	0x0e, 7	; 14
    11c2:	fe cf       	rjmp	.-4      	; 0x11c0 <set_cursor+0xc>
  SPDR = byte;                        //send payload
    11c4:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    11c6:	77 9b       	sbis	0x0e, 7	; 14
    11c8:	fe cf       	rjmp	.-4      	; 0x11c6 <set_cursor+0x12>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    11ca:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11ce:	88 60       	ori	r24, 0x08	; 8
    11d0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11d4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11d8:	87 7f       	andi	r24, 0xF7	; 247
    11da:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11de:	8f e9       	ldi	r24, 0x9F	; 159
    11e0:	9f e0       	ldi	r25, 0x0F	; 15
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	f1 f7       	brne	.-4      	; 0x11e2 <set_cursor+0x2e>
    11e6:	00 c0       	rjmp	.+0      	; 0x11e8 <set_cursor+0x34>
    11e8:	00 00       	nop
    11ea:	08 95       	ret

000011ec <uint2lcd>:
//not displayed.
//TODO: optimize by removing the mod operators
//TODO: does not display the number zero!  (FIXED 8.30.2014)
//
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    11ec:	81 11       	cpse	r24, r1
    11ee:	19 c0       	rjmp	.+50     	; 0x1222 <uint2lcd+0x36>
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    11f4:	77 9b       	sbis	0x0e, 7	; 14
    11f6:	fe cf       	rjmp	.-4      	; 0x11f4 <uint2lcd+0x8>
  SPDR = byte;                        //send payload
    11f8:	80 e3       	ldi	r24, 0x30	; 48
    11fa:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    11fc:	77 9b       	sbis	0x0e, 7	; 14
    11fe:	fe cf       	rjmp	.-4      	; 0x11fc <uint2lcd+0x10>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1200:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1204:	88 60       	ori	r24, 0x08	; 8
    1206:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    120a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    120e:	87 7f       	andi	r24, 0xF7	; 247
    1210:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1214:	8f e9       	ldi	r24, 0x9F	; 159
    1216:	9f e0       	ldi	r25, 0x0F	; 15
    1218:	01 97       	sbiw	r24, 0x01	; 1
    121a:	f1 f7       	brne	.-4      	; 0x1218 <uint2lcd+0x2c>
    121c:	00 c0       	rjmp	.+0      	; 0x121e <uint2lcd+0x32>
    121e:	00 00       	nop
    1220:	08 95       	ret
//TODO: does not display the number zero!  (FIXED 8.30.2014)
//
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
    1222:	84 36       	cpi	r24, 0x64	; 100
    1224:	b0 f4       	brcc	.+44     	; 0x1252 <uint2lcd+0x66>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10, 100); }
    1226:	8a 30       	cpi	r24, 0x0A	; 10
    1228:	90 f5       	brcc	.+100    	; 0x128e <uint2lcd+0xa2>
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    122a:	91 e0       	ldi	r25, 0x01	; 1
    122c:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    122e:	77 9b       	sbis	0x0e, 7	; 14
    1230:	fe cf       	rjmp	.-4      	; 0x122e <uint2lcd+0x42>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10, 100); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    , 100); }
    1232:	9d ec       	ldi	r25, 0xCD	; 205
    1234:	89 9f       	mul	r24, r25
    1236:	91 2d       	mov	r25, r1
    1238:	11 24       	eor	r1, r1
    123a:	96 95       	lsr	r25
    123c:	96 95       	lsr	r25
    123e:	96 95       	lsr	r25
    1240:	fa e0       	ldi	r31, 0x0A	; 10
    1242:	9f 9f       	mul	r25, r31
    1244:	80 19       	sub	r24, r0
    1246:	11 24       	eor	r1, r1
    1248:	80 5d       	subi	r24, 0xD0	; 208


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
    124a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    124c:	77 9b       	sbis	0x0e, 7	; 14
    124e:	fe cf       	rjmp	.-4      	; 0x124c <uint2lcd+0x60>
    1250:	d7 cf       	rjmp	.-82     	; 0x1200 <uint2lcd+0x14>
//TODO: does not display the number zero!  (FIXED 8.30.2014)
//
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
    1252:	99 e2       	ldi	r25, 0x29	; 41
    1254:	89 9f       	mul	r24, r25
    1256:	91 2d       	mov	r25, r1
    1258:	11 24       	eor	r1, r1
    125a:	92 95       	swap	r25
    125c:	9f 70       	andi	r25, 0x0F	; 15
    125e:	90 5d       	subi	r25, 0xD0	; 208
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1260:	21 e0       	ldi	r18, 0x01	; 1
    1262:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1264:	77 9b       	sbis	0x0e, 7	; 14
    1266:	fe cf       	rjmp	.-4      	; 0x1264 <uint2lcd+0x78>
  SPDR = byte;                        //send payload
    1268:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    126a:	77 9b       	sbis	0x0e, 7	; 14
    126c:	fe cf       	rjmp	.-4      	; 0x126a <uint2lcd+0x7e>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    126e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1272:	98 60       	ori	r25, 0x08	; 8
    1274:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1278:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    127c:	97 7f       	andi	r25, 0xF7	; 247
    127e:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1282:	ef e9       	ldi	r30, 0x9F	; 159
    1284:	ff e0       	ldi	r31, 0x0F	; 15
    1286:	31 97       	sbiw	r30, 0x01	; 1
    1288:	f1 f7       	brne	.-4      	; 0x1286 <uint2lcd+0x9a>
    128a:	00 c0       	rjmp	.+0      	; 0x128c <uint2lcd+0xa0>
    128c:	00 00       	nop
//
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10, 100); }
    128e:	99 e2       	ldi	r25, 0x29	; 41
    1290:	89 9f       	mul	r24, r25
    1292:	91 2d       	mov	r25, r1
    1294:	11 24       	eor	r1, r1
    1296:	92 95       	swap	r25
    1298:	9f 70       	andi	r25, 0x0F	; 15
    129a:	28 2f       	mov	r18, r24
    129c:	f4 e6       	ldi	r31, 0x64	; 100
    129e:	9f 9f       	mul	r25, r31
    12a0:	20 19       	sub	r18, r0
    12a2:	11 24       	eor	r1, r1
    12a4:	92 2f       	mov	r25, r18
    12a6:	2d ec       	ldi	r18, 0xCD	; 205
    12a8:	92 9f       	mul	r25, r18
    12aa:	91 2d       	mov	r25, r1
    12ac:	11 24       	eor	r1, r1
    12ae:	96 95       	lsr	r25
    12b0:	96 95       	lsr	r25
    12b2:	96 95       	lsr	r25
    12b4:	90 5d       	subi	r25, 0xD0	; 208
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    12b6:	21 e0       	ldi	r18, 0x01	; 1
    12b8:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    12ba:	77 9b       	sbis	0x0e, 7	; 14
    12bc:	fe cf       	rjmp	.-4      	; 0x12ba <uint2lcd+0xce>
  SPDR = byte;                        //send payload
    12be:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    12c0:	77 9b       	sbis	0x0e, 7	; 14
    12c2:	fe cf       	rjmp	.-4      	; 0x12c0 <uint2lcd+0xd4>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    12c4:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12c8:	98 60       	ori	r25, 0x08	; 8
    12ca:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12ce:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12d2:	97 7f       	andi	r25, 0xF7	; 247
    12d4:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12d8:	ef e9       	ldi	r30, 0x9F	; 159
    12da:	ff e0       	ldi	r31, 0x0F	; 15
    12dc:	31 97       	sbiw	r30, 0x01	; 1
    12de:	f1 f7       	brne	.-4      	; 0x12dc <uint2lcd+0xf0>
    12e0:	00 c0       	rjmp	.+0      	; 0x12e2 <uint2lcd+0xf6>
    12e2:	00 00       	nop
    12e4:	a2 cf       	rjmp	.-188    	; 0x122a <uint2lcd+0x3e>

000012e6 <int2lcd>:
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    if(number < 0){send_lcd(CHAR_BYTE, '-', 100); uint2lcd(~number+1);}    //take 2's complement of number and display
    12e6:	87 ff       	sbrs	r24, 7
    else                                    {uint2lcd(number);}
    12e8:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <uint2lcd>
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    12ec:	91 e0       	ldi	r25, 0x01	; 1
    12ee:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    12f0:	77 9b       	sbis	0x0e, 7	; 14
    12f2:	fe cf       	rjmp	.-4      	; 0x12f0 <int2lcd+0xa>
  SPDR = byte;                        //send payload
    12f4:	9d e2       	ldi	r25, 0x2D	; 45
    12f6:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    12f8:	77 9b       	sbis	0x0e, 7	; 14
    12fa:	fe cf       	rjmp	.-4      	; 0x12f8 <int2lcd+0x12>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    12fc:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1300:	98 60       	ori	r25, 0x08	; 8
    1302:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1306:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    130a:	97 7f       	andi	r25, 0xF7	; 247
    130c:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1310:	ef e9       	ldi	r30, 0x9F	; 159
    1312:	ff e0       	ldi	r31, 0x0F	; 15
    1314:	31 97       	sbiw	r30, 0x01	; 1
    1316:	f1 f7       	brne	.-4      	; 0x1314 <int2lcd+0x2e>
    1318:	00 c0       	rjmp	.+0      	; 0x131a <int2lcd+0x34>
    131a:	00 00       	nop
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    if(number < 0){send_lcd(CHAR_BYTE, '-', 100); uint2lcd(~number+1);}    //take 2's complement of number and display
    131c:	81 95       	neg	r24
    131e:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <uint2lcd>

00001322 <cursor_on>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1322:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1324:	77 9b       	sbis	0x0e, 7	; 14
    1326:	fe cf       	rjmp	.-4      	; 0x1324 <cursor_on+0x2>
  SPDR = byte;                        //send payload
    1328:	8e e0       	ldi	r24, 0x0E	; 14
    132a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    132c:	77 9b       	sbis	0x0e, 7	; 14
    132e:	fe cf       	rjmp	.-4      	; 0x132c <cursor_on+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1330:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1334:	88 60       	ori	r24, 0x08	; 8
    1336:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    133a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    133e:	87 7f       	andi	r24, 0xF7	; 247
    1340:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1344:	8f e9       	ldi	r24, 0x9F	; 159
    1346:	9f e0       	ldi	r25, 0x0F	; 15
    1348:	01 97       	sbiw	r24, 0x01	; 1
    134a:	f1 f7       	brne	.-4      	; 0x1348 <cursor_on+0x26>
    134c:	00 c0       	rjmp	.+0      	; 0x134e <cursor_on+0x2c>
    134e:	00 00       	nop
    1350:	08 95       	ret

00001352 <cursor_off>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1352:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1354:	77 9b       	sbis	0x0e, 7	; 14
    1356:	fe cf       	rjmp	.-4      	; 0x1354 <cursor_off+0x2>
  SPDR = byte;                        //send payload
    1358:	8c e0       	ldi	r24, 0x0C	; 12
    135a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    135c:	77 9b       	sbis	0x0e, 7	; 14
    135e:	fe cf       	rjmp	.-4      	; 0x135c <cursor_off+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1360:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1364:	88 60       	ori	r24, 0x08	; 8
    1366:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    136a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    136e:	87 7f       	andi	r24, 0xF7	; 247
    1370:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1374:	8f e9       	ldi	r24, 0x9F	; 159
    1376:	9f e0       	ldi	r25, 0x0F	; 15
    1378:	01 97       	sbiw	r24, 0x01	; 1
    137a:	f1 f7       	brne	.-4      	; 0x1378 <cursor_off+0x26>
    137c:	00 c0       	rjmp	.+0      	; 0x137e <cursor_off+0x2c>
    137e:	00 00       	nop
    1380:	08 95       	ret

00001382 <shift_right>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1382:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1384:	77 9b       	sbis	0x0e, 7	; 14
    1386:	fe cf       	rjmp	.-4      	; 0x1384 <shift_right+0x2>
  SPDR = byte;                        //send payload
    1388:	8e e1       	ldi	r24, 0x1E	; 30
    138a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    138c:	77 9b       	sbis	0x0e, 7	; 14
    138e:	fe cf       	rjmp	.-4      	; 0x138c <shift_right+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1390:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1394:	88 60       	ori	r24, 0x08	; 8
    1396:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    139a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    139e:	87 7f       	andi	r24, 0xF7	; 247
    13a0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13a4:	8f e9       	ldi	r24, 0x9F	; 159
    13a6:	9f e0       	ldi	r25, 0x0F	; 15
    13a8:	01 97       	sbiw	r24, 0x01	; 1
    13aa:	f1 f7       	brne	.-4      	; 0x13a8 <shift_right+0x26>
    13ac:	00 c0       	rjmp	.+0      	; 0x13ae <shift_right+0x2c>
    13ae:	00 00       	nop
    13b0:	08 95       	ret

000013b2 <shift_left>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    13b2:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    13b4:	77 9b       	sbis	0x0e, 7	; 14
    13b6:	fe cf       	rjmp	.-4      	; 0x13b4 <shift_left+0x2>
  SPDR = byte;                        //send payload
    13b8:	88 e1       	ldi	r24, 0x18	; 24
    13ba:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    13bc:	77 9b       	sbis	0x0e, 7	; 14
    13be:	fe cf       	rjmp	.-4      	; 0x13bc <shift_left+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    13c0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13c4:	88 60       	ori	r24, 0x08	; 8
    13c6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13ca:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13ce:	87 7f       	andi	r24, 0xF7	; 247
    13d0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13d4:	8f e9       	ldi	r24, 0x9F	; 159
    13d6:	9f e0       	ldi	r25, 0x0F	; 15
    13d8:	01 97       	sbiw	r24, 0x01	; 1
    13da:	f1 f7       	brne	.-4      	; 0x13d8 <shift_left+0x26>
    13dc:	00 c0       	rjmp	.+0      	; 0x13de <shift_left+0x2c>
    13de:	00 00       	nop
    13e0:	08 95       	ret

000013e2 <strobe_lcd>:
    13e2:	e2 e6       	ldi	r30, 0x62	; 98
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	88 60       	ori	r24, 0x08	; 8
    13ea:	80 83       	st	Z, r24
    13ec:	80 81       	ld	r24, Z
    13ee:	87 7f       	andi	r24, 0xF7	; 247
    13f0:	80 83       	st	Z, r24
    13f2:	08 95       	ret

000013f4 <clear_display>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    13f4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    13f6:	77 9b       	sbis	0x0e, 7	; 14
    13f8:	fe cf       	rjmp	.-4      	; 0x13f6 <clear_display+0x2>
  SPDR = byte;                        //send payload
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    13fe:	77 9b       	sbis	0x0e, 7	; 14
    1400:	fe cf       	rjmp	.-4      	; 0x13fe <clear_display+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1402:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1406:	88 60       	ori	r24, 0x08	; 8
    1408:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    140c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1410:	87 7f       	andi	r24, 0xF7	; 247
    1412:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1416:	8f e9       	ldi	r24, 0x9F	; 159
    1418:	9f e0       	ldi	r25, 0x0F	; 15
    141a:	01 97       	sbiw	r24, 0x01	; 1
    141c:	f1 f7       	brne	.-4      	; 0x141a <clear_display+0x26>
    141e:	00 c0       	rjmp	.+0      	; 0x1420 <clear_display+0x2c>
    1420:	00 00       	nop
    1422:	08 95       	ret

00001424 <cursor_home>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1424:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1426:	77 9b       	sbis	0x0e, 7	; 14
    1428:	fe cf       	rjmp	.-4      	; 0x1426 <cursor_home+0x2>
  SPDR = byte;                        //send payload
    142a:	82 e0       	ldi	r24, 0x02	; 2
    142c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    142e:	77 9b       	sbis	0x0e, 7	; 14
    1430:	fe cf       	rjmp	.-4      	; 0x142e <cursor_home+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1432:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1436:	88 60       	ori	r24, 0x08	; 8
    1438:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    143c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1440:	87 7f       	andi	r24, 0xF7	; 247
    1442:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1446:	8f e9       	ldi	r24, 0x9F	; 159
    1448:	9f e0       	ldi	r25, 0x0F	; 15
    144a:	01 97       	sbiw	r24, 0x01	; 1
    144c:	f1 f7       	brne	.-4      	; 0x144a <cursor_home+0x26>
    144e:	00 c0       	rjmp	.+0      	; 0x1450 <cursor_home+0x2c>
    1450:	00 00       	nop
    1452:	08 95       	ret

00001454 <home_line2>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1454:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1456:	77 9b       	sbis	0x0e, 7	; 14
    1458:	fe cf       	rjmp	.-4      	; 0x1456 <home_line2+0x2>
  SPDR = byte;                        //send payload
    145a:	80 ec       	ldi	r24, 0xC0	; 192
    145c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    145e:	77 9b       	sbis	0x0e, 7	; 14
    1460:	fe cf       	rjmp	.-4      	; 0x145e <home_line2+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1462:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1466:	88 60       	ori	r24, 0x08	; 8
    1468:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    146c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1470:	87 7f       	andi	r24, 0xF7	; 247
    1472:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1476:	8f e9       	ldi	r24, 0x9F	; 159
    1478:	9f e0       	ldi	r25, 0x0F	; 15
    147a:	01 97       	sbiw	r24, 0x01	; 1
    147c:	f1 f7       	brne	.-4      	; 0x147a <home_line2+0x26>
    147e:	00 c0       	rjmp	.+0      	; 0x1480 <home_line2+0x2c>
    1480:	00 00       	nop
    1482:	08 95       	ret

00001484 <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
    1484:	90 e1       	ldi	r25, 0x10	; 16
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1486:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
    1488:	20 e2       	ldi	r18, 0x20	; 32
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    148a:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    148c:	77 9b       	sbis	0x0e, 7	; 14
    148e:	fe cf       	rjmp	.-4      	; 0x148c <fill_spaces+0x8>
  SPDR = byte;                        //send payload
    1490:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1492:	77 9b       	sbis	0x0e, 7	; 14
    1494:	fe cf       	rjmp	.-4      	; 0x1492 <fill_spaces+0xe>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1496:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    149a:	88 60       	ori	r24, 0x08	; 8
    149c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    14a0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    14a4:	87 7f       	andi	r24, 0xF7	; 247
    14a6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    14aa:	ef e9       	ldi	r30, 0x9F	; 159
    14ac:	ff e0       	ldi	r31, 0x0F	; 15
    14ae:	31 97       	sbiw	r30, 0x01	; 1
    14b0:	f1 f7       	brne	.-4      	; 0x14ae <fill_spaces+0x2a>
    14b2:	00 c0       	rjmp	.+0      	; 0x14b4 <fill_spaces+0x30>
    14b4:	00 00       	nop
    14b6:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
    14b8:	41 f7       	brne	.-48     	; 0x148a <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' ',100); //100us wait between characters
	}
}
    14ba:	08 95       	ret

000014bc <char2lcd>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    14bc:	91 e0       	ldi	r25, 0x01	; 1
    14be:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    14c0:	77 9b       	sbis	0x0e, 7	; 14
    14c2:	fe cf       	rjmp	.-4      	; 0x14c0 <char2lcd+0x4>
  SPDR = byte;                        //send payload
    14c4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    14c6:	77 9b       	sbis	0x0e, 7	; 14
    14c8:	fe cf       	rjmp	.-4      	; 0x14c6 <char2lcd+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    14ca:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    14ce:	88 60       	ori	r24, 0x08	; 8
    14d0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    14d4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    14d8:	87 7f       	andi	r24, 0xF7	; 247
    14da:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    14de:	8f e9       	ldi	r24, 0x9F	; 159
    14e0:	9f e0       	ldi	r25, 0x0F	; 15
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	f1 f7       	brne	.-4      	; 0x14e2 <char2lcd+0x26>
    14e6:	00 c0       	rjmp	.+0      	; 0x14e8 <char2lcd+0x2c>
    14e8:	00 00       	nop
    14ea:	08 95       	ret

000014ec <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
    14ec:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i], 100);}
    14ee:	40 e0       	ldi	r20, 0x00	; 0
    14f0:	50 e0       	ldi	r21, 0x00	; 0
    14f2:	60 e0       	ldi	r22, 0x00	; 0
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    14f4:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i], 100);}
    14f6:	df 01       	movw	r26, r30
    14f8:	a4 0f       	add	r26, r20
    14fa:	b5 1f       	adc	r27, r21
    14fc:	8c 91       	ld	r24, X
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    14fe:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1500:	77 9b       	sbis	0x0e, 7	; 14
    1502:	fe cf       	rjmp	.-4      	; 0x1500 <string2lcd+0x14>
  SPDR = byte;                        //send payload
    1504:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1506:	77 9b       	sbis	0x0e, 7	; 14
    1508:	fe cf       	rjmp	.-4      	; 0x1506 <string2lcd+0x1a>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    150a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    150e:	98 60       	ori	r25, 0x08	; 8
    1510:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1514:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1518:	97 7f       	andi	r25, 0xF7	; 247
    151a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    151e:	8f e9       	ldi	r24, 0x9F	; 159
    1520:	9f e0       	ldi	r25, 0x0F	; 15
    1522:	01 97       	sbiw	r24, 0x01	; 1
    1524:	f1 f7       	brne	.-4      	; 0x1522 <string2lcd+0x36>
    1526:	00 c0       	rjmp	.+0      	; 0x1528 <string2lcd+0x3c>
    1528:	00 00       	nop
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i], 100);}
    152a:	6f 5f       	subi	r22, 0xFF	; 255
    152c:	46 2f       	mov	r20, r22
    152e:	50 e0       	ldi	r21, 0x00	; 0
    1530:	df 01       	movw	r26, r30
    1532:	0d 90       	ld	r0, X+
    1534:	00 20       	and	r0, r0
    1536:	e9 f7       	brne	.-6      	; 0x1532 <string2lcd+0x46>
    1538:	9d 01       	movw	r18, r26
    153a:	2e 1b       	sub	r18, r30
    153c:	3f 0b       	sbc	r19, r31
    153e:	22 50       	subi	r18, 0x02	; 2
    1540:	31 09       	sbc	r19, r1
    1542:	24 17       	cp	r18, r20
    1544:	35 07       	cpc	r19, r21
    1546:	b8 f6       	brcc	.-82     	; 0x14f6 <string2lcd+0xa>
}
    1548:	08 95       	ret

0000154a <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    154a:	8f ef       	ldi	r24, 0xFF	; 255
    154c:	99 ef       	ldi	r25, 0xF9	; 249
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	f1 f7       	brne	.-4      	; 0x154e <lcd_init+0x4>
    1552:	00 c0       	rjmp	.+0      	; 0x1554 <lcd_init+0xa>
    1554:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! should not be here.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
    1556:	88 e0       	ldi	r24, 0x08	; 8
    1558:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    155c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    155e:	77 9b       	sbis	0x0e, 7	; 14
    1560:	fe cf       	rjmp	.-4      	; 0x155e <lcd_init+0x14>
  SPDR = byte;                        //send payload
    1562:	80 e3       	ldi	r24, 0x30	; 48
    1564:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1566:	77 9b       	sbis	0x0e, 7	; 14
    1568:	fe cf       	rjmp	.-4      	; 0x1566 <lcd_init+0x1c>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    156a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    156e:	88 60       	ori	r24, 0x08	; 8
    1570:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1574:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1578:	87 7f       	andi	r24, 0xF7	; 247
    157a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    157e:	8f e9       	ldi	r24, 0x9F	; 159
    1580:	9f e0       	ldi	r25, 0x0F	; 15
    1582:	01 97       	sbiw	r24, 0x01	; 1
    1584:	f1 f7       	brne	.-4      	; 0x1582 <lcd_init+0x38>
    1586:	00 c0       	rjmp	.+0      	; 0x1588 <lcd_init+0x3e>
    1588:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    158a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    158c:	77 9b       	sbis	0x0e, 7	; 14
    158e:	fe cf       	rjmp	.-4      	; 0x158c <lcd_init+0x42>
  SPDR = byte;                        //send payload
    1590:	80 e3       	ldi	r24, 0x30	; 48
    1592:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1594:	77 9b       	sbis	0x0e, 7	; 14
    1596:	fe cf       	rjmp	.-4      	; 0x1594 <lcd_init+0x4a>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1598:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    159c:	88 60       	ori	r24, 0x08	; 8
    159e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    15a2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    15a6:	87 7f       	andi	r24, 0xF7	; 247
    15a8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    15ac:	8f e9       	ldi	r24, 0x9F	; 159
    15ae:	9f e0       	ldi	r25, 0x0F	; 15
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	f1 f7       	brne	.-4      	; 0x15b0 <lcd_init+0x66>
    15b4:	00 c0       	rjmp	.+0      	; 0x15b6 <lcd_init+0x6c>
    15b6:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    15b8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    15ba:	77 9b       	sbis	0x0e, 7	; 14
    15bc:	fe cf       	rjmp	.-4      	; 0x15ba <lcd_init+0x70>
  SPDR = byte;                        //send payload
    15be:	80 e3       	ldi	r24, 0x30	; 48
    15c0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    15c2:	77 9b       	sbis	0x0e, 7	; 14
    15c4:	fe cf       	rjmp	.-4      	; 0x15c2 <lcd_init+0x78>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    15c6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    15ca:	88 60       	ori	r24, 0x08	; 8
    15cc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    15d0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    15d4:	87 7f       	andi	r24, 0xF7	; 247
    15d6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    15da:	8f e9       	ldi	r24, 0x9F	; 159
    15dc:	9f e0       	ldi	r25, 0x0F	; 15
    15de:	01 97       	sbiw	r24, 0x01	; 1
    15e0:	f1 f7       	brne	.-4      	; 0x15de <lcd_init+0x94>
    15e2:	00 c0       	rjmp	.+0      	; 0x15e4 <lcd_init+0x9a>
    15e4:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    15e6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    15e8:	77 9b       	sbis	0x0e, 7	; 14
    15ea:	fe cf       	rjmp	.-4      	; 0x15e8 <lcd_init+0x9e>
  SPDR = byte;                        //send payload
    15ec:	88 e3       	ldi	r24, 0x38	; 56
    15ee:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    15f0:	77 9b       	sbis	0x0e, 7	; 14
    15f2:	fe cf       	rjmp	.-4      	; 0x15f0 <lcd_init+0xa6>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    15f4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    15f8:	88 60       	ori	r24, 0x08	; 8
    15fa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    15fe:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1602:	87 7f       	andi	r24, 0xF7	; 247
    1604:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1608:	8f e9       	ldi	r24, 0x9F	; 159
    160a:	9f e0       	ldi	r25, 0x0F	; 15
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	f1 f7       	brne	.-4      	; 0x160c <lcd_init+0xc2>
    1610:	00 c0       	rjmp	.+0      	; 0x1612 <lcd_init+0xc8>
    1612:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1614:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1616:	77 9b       	sbis	0x0e, 7	; 14
    1618:	fe cf       	rjmp	.-4      	; 0x1616 <lcd_init+0xcc>
  SPDR = byte;                        //send payload
    161a:	88 e0       	ldi	r24, 0x08	; 8
    161c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    161e:	77 9b       	sbis	0x0e, 7	; 14
    1620:	fe cf       	rjmp	.-4      	; 0x161e <lcd_init+0xd4>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1622:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1626:	88 60       	ori	r24, 0x08	; 8
    1628:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    162c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1630:	87 7f       	andi	r24, 0xF7	; 247
    1632:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1636:	8f e9       	ldi	r24, 0x9F	; 159
    1638:	9f e0       	ldi	r25, 0x0F	; 15
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	f1 f7       	brne	.-4      	; 0x163a <lcd_init+0xf0>
    163e:	00 c0       	rjmp	.+0      	; 0x1640 <lcd_init+0xf6>
    1640:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1642:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1644:	77 9b       	sbis	0x0e, 7	; 14
    1646:	fe cf       	rjmp	.-4      	; 0x1644 <lcd_init+0xfa>
  SPDR = byte;                        //send payload
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    164c:	77 9b       	sbis	0x0e, 7	; 14
    164e:	fe cf       	rjmp	.-4      	; 0x164c <lcd_init+0x102>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1650:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1654:	88 60       	ori	r24, 0x08	; 8
    1656:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    165a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    165e:	87 7f       	andi	r24, 0xF7	; 247
    1660:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1664:	8f e9       	ldi	r24, 0x9F	; 159
    1666:	9f e0       	ldi	r25, 0x0F	; 15
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	f1 f7       	brne	.-4      	; 0x1668 <lcd_init+0x11e>
    166c:	00 c0       	rjmp	.+0      	; 0x166e <lcd_init+0x124>
    166e:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1670:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1672:	77 9b       	sbis	0x0e, 7	; 14
    1674:	fe cf       	rjmp	.-4      	; 0x1672 <lcd_init+0x128>
  SPDR = byte;                        //send payload
    1676:	86 e0       	ldi	r24, 0x06	; 6
    1678:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    167a:	77 9b       	sbis	0x0e, 7	; 14
    167c:	fe cf       	rjmp	.-4      	; 0x167a <lcd_init+0x130>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    167e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1682:	88 60       	ori	r24, 0x08	; 8
    1684:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1688:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    168c:	87 7f       	andi	r24, 0xF7	; 247
    168e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1692:	8f e9       	ldi	r24, 0x9F	; 159
    1694:	9f e0       	ldi	r25, 0x0F	; 15
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	f1 f7       	brne	.-4      	; 0x1696 <lcd_init+0x14c>
    169a:	00 c0       	rjmp	.+0      	; 0x169c <lcd_init+0x152>
    169c:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    169e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    16a0:	77 9b       	sbis	0x0e, 7	; 14
    16a2:	fe cf       	rjmp	.-4      	; 0x16a0 <lcd_init+0x156>
  SPDR = byte;                        //send payload
    16a4:	8c e0       	ldi	r24, 0x0C	; 12
    16a6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    16a8:	77 9b       	sbis	0x0e, 7	; 14
    16aa:	fe cf       	rjmp	.-4      	; 0x16a8 <lcd_init+0x15e>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    16ac:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    16b0:	88 60       	ori	r24, 0x08	; 8
    16b2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    16b6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    16ba:	87 7f       	andi	r24, 0xF7	; 247
    16bc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    16c0:	8f e9       	ldi	r24, 0x9F	; 159
    16c2:	9f e0       	ldi	r25, 0x0F	; 15
    16c4:	01 97       	sbiw	r24, 0x01	; 1
    16c6:	f1 f7       	brne	.-4      	; 0x16c4 <lcd_init+0x17a>
    16c8:	00 c0       	rjmp	.+0      	; 0x16ca <lcd_init+0x180>
    16ca:	00 00       	nop
    16cc:	08 95       	ret

000016ce <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
    16ce:	4f 92       	push	r4
    16d0:	5f 92       	push	r5
    16d2:	6f 92       	push	r6
    16d4:	7f 92       	push	r7
    16d6:	8f 92       	push	r8
    16d8:	9f 92       	push	r9
    16da:	af 92       	push	r10
    16dc:	bf 92       	push	r11
    16de:	cf 92       	push	r12
    16e0:	df 92       	push	r13
    16e2:	ef 92       	push	r14
    16e4:	ff 92       	push	r15
    16e6:	0f 93       	push	r16
    16e8:	1f 93       	push	r17
    16ea:	cf 93       	push	r28
    16ec:	df 93       	push	r29
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	69 97       	sbiw	r28, 0x19	; 25
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	f8 94       	cli
    16f8:	de bf       	out	0x3e, r29	; 62
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	cd bf       	out	0x3d, r28	; 61
    16fe:	14 2f       	mov	r17, r20
    1700:	42 2e       	mov	r4, r18
    1702:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient

      if (bSigned){
    1704:	00 23       	and	r16, r16
    1706:	79 f0       	breq	.+30     	; 0x1726 <lcd_int32+0x58>
        bSigned = (qr.quot<0);
    1708:	6b 01       	movw	r12, r22
    170a:	7c 01       	movw	r14, r24
    170c:	cc 24       	eor	r12, r12
    170e:	f7 fc       	sbrc	r15, 7
    1710:	c3 94       	inc	r12
    1712:	dd 24       	eor	r13, r13
    1714:	ee 24       	eor	r14, r14
    1716:	ff 24       	eor	r15, r15
    1718:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
    171a:	6b 01       	movw	r12, r22
    171c:	7c 01       	movw	r14, r24
    171e:	97 fd       	sbrc	r25, 7
    1720:	a5 c0       	rjmp	.+330    	; 0x186c <lcd_int32+0x19e>
    1722:	c7 01       	movw	r24, r14
    1724:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point
      if (decpos){
    1726:	44 20       	and	r4, r4
    1728:	09 f4       	brne	.+2      	; 0x172c <lcd_int32+0x5e>
    172a:	98 c0       	rjmp	.+304    	; 0x185c <lcd_int32+0x18e>
    172c:	9e 01       	movw	r18, r28
    172e:	2f 5f       	subi	r18, 0xFF	; 255
    1730:	3f 4f       	sbci	r19, 0xFF	; 255
    1732:	59 01       	movw	r10, r18
    1734:	49 01       	movw	r8, r18
    1736:	66 24       	eor	r6, r6
    1738:	6a 94       	dec	r6
    173a:	64 0c       	add	r6, r4
    173c:	71 2c       	mov	r7, r1
    173e:	3f ef       	ldi	r19, 0xFF	; 255
    1740:	63 1a       	sub	r6, r19
    1742:	73 0a       	sbc	r7, r19
    1744:	6a 0c       	add	r6, r10
    1746:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
    1748:	2a e0       	ldi	r18, 0x0A	; 10
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	40 e0       	ldi	r20, 0x00	; 0
    174e:	50 e0       	ldi	r21, 0x00	; 0
    1750:	0e 94 33 10 	call	0x2066	; 0x2066 <__divmodsi4>
    1754:	e6 2f       	mov	r30, r22
    1756:	2a 8b       	std	Y+18, r18	; 0x12
    1758:	3b 8b       	std	Y+19, r19	; 0x13
    175a:	4c 8b       	std	Y+20, r20	; 0x14
    175c:	5d 8b       	std	Y+21, r21	; 0x15
    175e:	6a 89       	ldd	r22, Y+18	; 0x12
    1760:	7b 89       	ldd	r23, Y+19	; 0x13
    1762:	8c 89       	ldd	r24, Y+20	; 0x14
    1764:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    1766:	20 e3       	ldi	r18, 0x30	; 48
    1768:	2e 0f       	add	r18, r30
    176a:	f4 01       	movw	r30, r8
    176c:	21 93       	st	Z+, r18
    176e:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point
      if (decpos){
        for (; decpos ; decpos--){
    1770:	6e 16       	cp	r6, r30
    1772:	7f 06       	cpc	r7, r31
    1774:	49 f7       	brne	.-46     	; 0x1748 <lcd_int32+0x7a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
    1776:	99 24       	eor	r9, r9
    1778:	93 94       	inc	r9
    177a:	94 0c       	add	r9, r4
    177c:	f5 01       	movw	r30, r10
    177e:	e4 0d       	add	r30, r4
    1780:	f1 1d       	adc	r31, r1
    1782:	2e e2       	ldi	r18, 0x2E	; 46
    1784:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point
      do{
          qr = ldiv(qr.quot, 10);
    1786:	2a e0       	ldi	r18, 0x0A	; 10
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	40 e0       	ldi	r20, 0x00	; 0
    178c:	50 e0       	ldi	r21, 0x00	; 0
    178e:	0e 94 33 10 	call	0x2066	; 0x2066 <__divmodsi4>
    1792:	e6 2f       	mov	r30, r22
    1794:	2a 8b       	std	Y+18, r18	; 0x12
    1796:	3b 8b       	std	Y+19, r19	; 0x13
    1798:	4c 8b       	std	Y+20, r20	; 0x14
    179a:	5d 8b       	std	Y+21, r21	; 0x15
    179c:	6e 8b       	std	Y+22, r22	; 0x16
    179e:	7f 8b       	std	Y+23, r23	; 0x17
    17a0:	88 8f       	std	Y+24, r24	; 0x18
    17a2:	99 8f       	std	Y+25, r25	; 0x19
    17a4:	6a 89       	ldd	r22, Y+18	; 0x12
    17a6:	7b 89       	ldd	r23, Y+19	; 0x13
    17a8:	8c 89       	ldd	r24, Y+20	; 0x14
    17aa:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    17ac:	31 e0       	ldi	r19, 0x01	; 1
    17ae:	39 0d       	add	r19, r9
    17b0:	d5 01       	movw	r26, r10
    17b2:	a9 0d       	add	r26, r9
    17b4:	b1 1d       	adc	r27, r1
    17b6:	e0 5d       	subi	r30, 0xD0	; 208
    17b8:	ec 93       	st	X, r30
    17ba:	93 2e       	mov	r9, r19
        }while(qr.quot);
    17bc:	61 15       	cp	r22, r1
    17be:	71 05       	cpc	r23, r1
    17c0:	81 05       	cpc	r24, r1
    17c2:	91 05       	cpc	r25, r1
    17c4:	01 f7       	brne	.-64     	; 0x1786 <lcd_int32+0xb8>

      // fill the whole field if a width was specified
      if (fieldwidth){
    17c6:	11 23       	and	r17, r17
    17c8:	61 f0       	breq	.+24     	; 0x17e2 <lcd_int32+0x114>
        fillch = bZeroFill? '0': ' '; // determine the fill character
    17ca:	51 10       	cpse	r5, r1
    17cc:	4d c0       	rjmp	.+154    	; 0x1868 <lcd_int32+0x19a>
    17ce:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
    17d0:	31 17       	cp	r19, r17
    17d2:	38 f4       	brcc	.+14     	; 0x17e2 <lcd_int32+0x114>
    17d4:	f5 01       	movw	r30, r10
    17d6:	e3 0f       	add	r30, r19
    17d8:	f1 1d       	adc	r31, r1
    17da:	90 83       	st	Z, r25
    17dc:	3f 5f       	subi	r19, 0xFF	; 255
    17de:	13 13       	cpse	r17, r19
    17e0:	f9 cf       	rjmp	.-14     	; 0x17d4 <lcd_int32+0x106>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
    17e2:	00 23       	and	r16, r16
    17e4:	31 f0       	breq	.+12     	; 0x17f2 <lcd_int32+0x124>
    17e6:	f5 01       	movw	r30, r10
    17e8:	e3 0f       	add	r30, r19
    17ea:	f1 1d       	adc	r31, r1
    17ec:	9d e2       	ldi	r25, 0x2D	; 45
    17ee:	90 83       	st	Z, r25
    17f0:	3f 5f       	subi	r19, 0xFF	; 255
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    17f2:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i] , 1000);} while(i);
    17f4:	31 50       	subi	r19, 0x01	; 1
    17f6:	f5 01       	movw	r30, r10
    17f8:	e3 0f       	add	r30, r19
    17fa:	f1 1d       	adc	r31, r1
    17fc:	90 81       	ld	r25, Z
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    17fe:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1800:	77 9b       	sbis	0x0e, 7	; 14
    1802:	fe cf       	rjmp	.-4      	; 0x1800 <lcd_int32+0x132>
  SPDR = byte;                        //send payload
    1804:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1806:	77 9b       	sbis	0x0e, 7	; 14
    1808:	fe cf       	rjmp	.-4      	; 0x1806 <lcd_int32+0x138>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    180a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    180e:	98 60       	ori	r25, 0x08	; 8
    1810:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1814:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1818:	97 7f       	andi	r25, 0xF7	; 247
    181a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    181e:	8f e9       	ldi	r24, 0x9F	; 159
    1820:	9f e0       	ldi	r25, 0x0F	; 15
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	f1 f7       	brne	.-4      	; 0x1822 <lcd_int32+0x154>
    1826:	00 c0       	rjmp	.+0      	; 0x1828 <lcd_int32+0x15a>
    1828:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i] , 1000);} while(i);
    182a:	31 11       	cpse	r19, r1
    182c:	e3 cf       	rjmp	.-58     	; 0x17f4 <lcd_int32+0x126>

}
    182e:	69 96       	adiw	r28, 0x19	; 25
    1830:	0f b6       	in	r0, 0x3f	; 63
    1832:	f8 94       	cli
    1834:	de bf       	out	0x3e, r29	; 62
    1836:	0f be       	out	0x3f, r0	; 63
    1838:	cd bf       	out	0x3d, r28	; 61
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	1f 91       	pop	r17
    1840:	0f 91       	pop	r16
    1842:	ff 90       	pop	r15
    1844:	ef 90       	pop	r14
    1846:	df 90       	pop	r13
    1848:	cf 90       	pop	r12
    184a:	bf 90       	pop	r11
    184c:	af 90       	pop	r10
    184e:	9f 90       	pop	r9
    1850:	8f 90       	pop	r8
    1852:	7f 90       	pop	r7
    1854:	6f 90       	pop	r6
    1856:	5f 90       	pop	r5
    1858:	4f 90       	pop	r4
    185a:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
    185c:	91 2c       	mov	r9, r1
    185e:	9e 01       	movw	r18, r28
    1860:	2f 5f       	subi	r18, 0xFF	; 255
    1862:	3f 4f       	sbci	r19, 0xFF	; 255
    1864:	59 01       	movw	r10, r18
    1866:	8f cf       	rjmp	.-226    	; 0x1786 <lcd_int32+0xb8>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
    1868:	90 e3       	ldi	r25, 0x30	; 48
    186a:	b2 cf       	rjmp	.-156    	; 0x17d0 <lcd_int32+0x102>

      qr.quot = l; // initialize the quotient

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
    186c:	f0 94       	com	r15
    186e:	e0 94       	com	r14
    1870:	d0 94       	com	r13
    1872:	c0 94       	com	r12
    1874:	c1 1c       	adc	r12, r1
    1876:	d1 1c       	adc	r13, r1
    1878:	e1 1c       	adc	r14, r1
    187a:	f1 1c       	adc	r15, r1
    187c:	52 cf       	rjmp	.-348    	; 0x1722 <lcd_int32+0x54>

0000187e <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l,
                  uint8_t fieldwidth,
                  uint8_t decpos,
                  uint8_t bZeroFill)
{
    187e:	5f 92       	push	r5
    1880:	6f 92       	push	r6
    1882:	7f 92       	push	r7
    1884:	8f 92       	push	r8
    1886:	9f 92       	push	r9
    1888:	af 92       	push	r10
    188a:	bf 92       	push	r11
    188c:	cf 92       	push	r12
    188e:	df 92       	push	r13
    1890:	ef 92       	push	r14
    1892:	ff 92       	push	r15
    1894:	0f 93       	push	r16
    1896:	1f 93       	push	r17
    1898:	cf 93       	push	r28
    189a:	df 93       	push	r29
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
    18a0:	61 97       	sbiw	r28, 0x11	; 17
    18a2:	0f b6       	in	r0, 0x3f	; 63
    18a4:	f8 94       	cli
    18a6:	de bf       	out	0x3e, r29	; 62
    18a8:	0f be       	out	0x3f, r0	; 63
    18aa:	cd bf       	out	0x3d, r28	; 61
    18ac:	5c 01       	movw	r10, r24
    18ae:	96 2e       	mov	r9, r22
    18b0:	54 2e       	mov	r5, r20
    18b2:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
    18b4:	8b 2c       	mov	r8, r11
    18b6:	88 1c       	adc	r8, r8
    18b8:	88 24       	eor	r8, r8
    18ba:	88 1c       	adc	r8, r8
    18bc:	78 2c       	mov	r7, r8
    18be:	9c 01       	movw	r18, r24
    18c0:	97 fd       	sbrc	r25, 7
    18c2:	9f c0       	rjmp	.+318    	; 0x1a02 <lcd_int16+0x184>
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point
        if (decpos){
    18c4:	55 20       	and	r5, r5
    18c6:	09 f4       	brne	.+2      	; 0x18ca <lcd_int16+0x4c>
    18c8:	90 c0       	rjmp	.+288    	; 0x19ea <lcd_int16+0x16c>
    18ca:	8e 01       	movw	r16, r28
    18cc:	0f 5f       	subi	r16, 0xFF	; 255
    18ce:	1f 4f       	sbci	r17, 0xFF	; 255
    18d0:	78 01       	movw	r14, r16
    18d2:	cc 24       	eor	r12, r12
    18d4:	ca 94       	dec	r12
    18d6:	c5 0c       	add	r12, r5
    18d8:	d1 2c       	mov	r13, r1
    18da:	8f ef       	ldi	r24, 0xFF	; 255
    18dc:	c8 1a       	sub	r12, r24
    18de:	d8 0a       	sbc	r13, r24
    18e0:	c0 0e       	add	r12, r16
    18e2:	d1 1e       	adc	r13, r17
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
    18e4:	6a e0       	ldi	r22, 0x0A	; 10
    18e6:	70 e0       	ldi	r23, 0x00	; 0
    18e8:	c9 01       	movw	r24, r18
    18ea:	0e 94 1f 10 	call	0x203e	; 0x203e <__divmodhi4>
    18ee:	46 2f       	mov	r20, r22
    18f0:	24 2f       	mov	r18, r20
    18f2:	37 2f       	mov	r19, r23
            sline[i++] = qr.rem + '0';
    18f4:	80 5d       	subi	r24, 0xD0	; 208
    18f6:	f7 01       	movw	r30, r14
    18f8:	81 93       	st	Z+, r24
    18fa:	7f 01       	movw	r14, r30
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point
        if (decpos){
          for (; decpos ; decpos--){
    18fc:	ec 15       	cp	r30, r12
    18fe:	fd 05       	cpc	r31, r13
    1900:	89 f7       	brne	.-30     	; 0x18e4 <lcd_int16+0x66>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
    1902:	ff 24       	eor	r15, r15
    1904:	f3 94       	inc	r15
    1906:	f5 0c       	add	r15, r5
    1908:	f8 01       	movw	r30, r16
    190a:	e5 0d       	add	r30, r5
    190c:	f1 1d       	adc	r31, r1
    190e:	8e e2       	ldi	r24, 0x2E	; 46
    1910:	80 83       	st	Z, r24
    1912:	01 c0       	rjmp	.+2      	; 0x1916 <lcd_int16+0x98>

        // convert the digits to the left of the decimal point
        do
        {
                qr = div(qr.quot, 10);
                sline[i++] = qr.rem + '0';
    1914:	f9 2e       	mov	r15, r25
        }

        // convert the digits to the left of the decimal point
        do
        {
                qr = div(qr.quot, 10);
    1916:	6a e0       	ldi	r22, 0x0A	; 10
    1918:	70 e0       	ldi	r23, 0x00	; 0
    191a:	c9 01       	movw	r24, r18
    191c:	0e 94 1f 10 	call	0x203e	; 0x203e <__divmodhi4>
    1920:	46 2f       	mov	r20, r22
    1922:	24 2f       	mov	r18, r20
    1924:	37 2f       	mov	r19, r23
                sline[i++] = qr.rem + '0';
    1926:	91 e0       	ldi	r25, 0x01	; 1
    1928:	9f 0d       	add	r25, r15
    192a:	f8 01       	movw	r30, r16
    192c:	ef 0d       	add	r30, r15
    192e:	f1 1d       	adc	r31, r1
    1930:	80 5d       	subi	r24, 0xD0	; 208
    1932:	80 83       	st	Z, r24
        }
        while(qr.quot);
    1934:	21 15       	cp	r18, r1
    1936:	31 05       	cpc	r19, r1
    1938:	69 f7       	brne	.-38     	; 0x1914 <lcd_int16+0x96>

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
    193a:	61 10       	cpse	r6, r1
    193c:	5b c0       	rjmp	.+182    	; 0x19f4 <lcd_int16+0x176>
    193e:	b7 fc       	sbrc	r11, 7
    1940:	65 c0       	rjmp	.+202    	; 0x1a0c <lcd_int16+0x18e>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
    1942:	99 20       	and	r9, r9
    1944:	b1 f0       	breq	.+44     	; 0x1972 <lcd_int16+0xf4>
    1946:	68 2d       	mov	r22, r8
    1948:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
    194a:	80 e2       	ldi	r24, 0x20	; 32
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    194c:	29 2f       	mov	r18, r25
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	49 2d       	mov	r20, r9
    1952:	50 e0       	ldi	r21, 0x00	; 0
    1954:	46 1b       	sub	r20, r22
    1956:	57 0b       	sbc	r21, r23
    1958:	24 17       	cp	r18, r20
    195a:	35 07       	cpc	r19, r21
    195c:	54 f4       	brge	.+20     	; 0x1972 <lcd_int16+0xf4>
    195e:	9f 5f       	subi	r25, 0xFF	; 255
    1960:	f8 01       	movw	r30, r16
    1962:	e2 0f       	add	r30, r18
    1964:	f3 1f       	adc	r31, r19
    1966:	80 83       	st	Z, r24
    1968:	29 2f       	mov	r18, r25
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	24 17       	cp	r18, r20
    196e:	35 07       	cpc	r19, r21
    1970:	b4 f3       	brlt	.-20     	; 0x195e <lcd_int16+0xe0>
        }

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}
    1972:	77 20       	and	r7, r7
    1974:	31 f0       	breq	.+12     	; 0x1982 <lcd_int16+0x104>
    1976:	f8 01       	movw	r30, r16
    1978:	e9 0f       	add	r30, r25
    197a:	f1 1d       	adc	r31, r1
    197c:	8d e2       	ldi	r24, 0x2D	; 45
    197e:	80 83       	st	Z, r24
    1980:	9f 5f       	subi	r25, 0xFF	; 255
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1982:	21 e0       	ldi	r18, 0x01	; 1

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number
            do{send_lcd(CHAR_BYTE, sline[--i] , 1000);} while(i);
    1984:	91 50       	subi	r25, 0x01	; 1
    1986:	f8 01       	movw	r30, r16
    1988:	e9 0f       	add	r30, r25
    198a:	f1 1d       	adc	r31, r1
    198c:	80 81       	ld	r24, Z
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    198e:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1990:	77 9b       	sbis	0x0e, 7	; 14
    1992:	fe cf       	rjmp	.-4      	; 0x1990 <lcd_int16+0x112>
  SPDR = byte;                        //send payload
    1994:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1996:	77 9b       	sbis	0x0e, 7	; 14
    1998:	fe cf       	rjmp	.-4      	; 0x1996 <lcd_int16+0x118>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    199a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    199e:	88 60       	ori	r24, 0x08	; 8
    19a0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    19a4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    19a8:	87 7f       	andi	r24, 0xF7	; 247
    19aa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    19ae:	ef e9       	ldi	r30, 0x9F	; 159
    19b0:	ff e0       	ldi	r31, 0x0F	; 15
    19b2:	31 97       	sbiw	r30, 0x01	; 1
    19b4:	f1 f7       	brne	.-4      	; 0x19b2 <lcd_int16+0x134>
    19b6:	00 c0       	rjmp	.+0      	; 0x19b8 <lcd_int16+0x13a>
    19b8:	00 00       	nop

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number
            do{send_lcd(CHAR_BYTE, sline[--i] , 1000);} while(i);
    19ba:	91 11       	cpse	r25, r1
    19bc:	e3 cf       	rjmp	.-58     	; 0x1984 <lcd_int16+0x106>
}
    19be:	61 96       	adiw	r28, 0x11	; 17
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	f8 94       	cli
    19c4:	de bf       	out	0x3e, r29	; 62
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	cd bf       	out	0x3d, r28	; 61
    19ca:	df 91       	pop	r29
    19cc:	cf 91       	pop	r28
    19ce:	1f 91       	pop	r17
    19d0:	0f 91       	pop	r16
    19d2:	ff 90       	pop	r15
    19d4:	ef 90       	pop	r14
    19d6:	df 90       	pop	r13
    19d8:	cf 90       	pop	r12
    19da:	bf 90       	pop	r11
    19dc:	af 90       	pop	r10
    19de:	9f 90       	pop	r9
    19e0:	8f 90       	pop	r8
    19e2:	7f 90       	pop	r7
    19e4:	6f 90       	pop	r6
    19e6:	5f 90       	pop	r5
    19e8:	08 95       	ret
                  uint8_t fieldwidth,
                  uint8_t decpos,
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
    19ea:	f1 2c       	mov	r15, r1
    19ec:	8e 01       	movw	r16, r28
    19ee:	0f 5f       	subi	r16, 0xFF	; 255
    19f0:	1f 4f       	sbci	r17, 0xFF	; 255
    19f2:	91 cf       	rjmp	.-222    	; 0x1916 <lcd_int16+0x98>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
    19f4:	99 20       	and	r9, r9
    19f6:	09 f4       	brne	.+2      	; 0x19fa <lcd_int16+0x17c>
    19f8:	bc cf       	rjmp	.-136    	; 0x1972 <lcd_int16+0xf4>
    19fa:	68 2d       	mov	r22, r8
    19fc:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
    19fe:	80 e3       	ldi	r24, 0x30	; 48
    1a00:	a5 cf       	rjmp	.-182    	; 0x194c <lcd_int16+0xce>
    1a02:	22 27       	eor	r18, r18
    1a04:	33 27       	eor	r19, r19
    1a06:	28 1b       	sub	r18, r24
    1a08:	39 0b       	sbc	r19, r25
    1a0a:	5c cf       	rjmp	.-328    	; 0x18c4 <lcd_int16+0x46>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    1a0c:	f3 94       	inc	r15
    1a0e:	f3 94       	inc	r15
    1a10:	f8 01       	movw	r30, r16
    1a12:	e9 0f       	add	r30, r25
    1a14:	f1 1d       	adc	r31, r1
    1a16:	8d e2       	ldi	r24, 0x2D	; 45
    1a18:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
    1a1a:	99 20       	and	r9, r9
    1a1c:	59 f0       	breq	.+22     	; 0x1a34 <lcd_int16+0x1b6>
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    1a1e:	2f 2d       	mov	r18, r15
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	49 2d       	mov	r20, r9
    1a24:	50 e0       	ldi	r21, 0x00	; 0
    1a26:	24 17       	cp	r18, r20
    1a28:	35 07       	cpc	r19, r21
    1a2a:	24 f4       	brge	.+8      	; 0x1a34 <lcd_int16+0x1b6>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    1a2c:	9f 2d       	mov	r25, r15
                bSigned = 0;
    1a2e:	71 2c       	mov	r7, r1
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
    1a30:	80 e2       	ldi	r24, 0x20	; 32
    1a32:	95 cf       	rjmp	.-214    	; 0x195e <lcd_int16+0xe0>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    1a34:	9f 2d       	mov	r25, r15
    1a36:	a5 cf       	rjmp	.-182    	; 0x1982 <lcd_int16+0x104>

00001a38 <lm73_temp_convert>:
      This is the flag that determines if the conversion is sent out
      as Farenheit or Celcius. 0x00=Celcius and 0x01=Farenheit
Return: VOID 
***********************************************************/
void lm73_temp_convert(char temp_digits[], uint16_t lm73_temp, uint8_t f_not_c)
{
    1a38:	cf 92       	push	r12
    1a3a:	df 92       	push	r13
    1a3c:	ef 92       	push	r14
    1a3e:	ff 92       	push	r15
    1a40:	0f 93       	push	r16
    1a42:	1f 93       	push	r17
    1a44:	cf 93       	push	r28
    1a46:	df 93       	push	r29
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	a0 97       	sbiw	r28, 0x20	; 32
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	f8 94       	cli
    1a52:	de bf       	out	0x3e, r29	; 62
    1a54:	0f be       	out	0x3f, r0	; 63
    1a56:	cd bf       	out	0x3d, r28	; 61
    1a58:	8c 01       	movw	r16, r24
    1a5a:	f4 2e       	mov	r15, r20
  //clear the character array
  temp_digits[0]=0;//set initial value to zero to denote empty array
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	1c 92       	st	X, r1

  //clean the register value
  uint16_t cleaned_temp   = (lm73_temp>>5);//copy RS value by 5 to get rid of 0:4
    1a60:	76 95       	lsr	r23
    1a62:	67 95       	ror	r22
    1a64:	72 95       	swap	r23
    1a66:	62 95       	swap	r22
    1a68:	6f 70       	andi	r22, 0x0F	; 15
    1a6a:	67 27       	eor	r22, r23
    1a6c:	7f 70       	andi	r23, 0x0F	; 15
    1a6e:	67 27       	eor	r22, r23
    1a70:	91 e0       	ldi	r25, 0x01	; 1
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0

  //setup variables to store additions
  uint8_t integer_part    = 0;//whole number
  uint8_t fractional_part = 0;//decimal part
    1a76:	e1 2c       	mov	r14, r1

  //clean the register value
  uint16_t cleaned_temp   = (lm73_temp>>5);//copy RS value by 5 to get rid of 0:4

  //setup variables to store additions
  uint8_t integer_part    = 0;//whole number
    1a78:	e0 e0       	ldi	r30, 0x00	; 0
      }else if (bit_t==1) {//0.50 degrees
        fractional_part+=50;
      }else if (bit_t==10) {//sign of temperature
        strcat(temp_digits, "-");
      }else{
        integer_part+=(1<<(bit_t-2));//bits 2:9(-2 due to 1st two bits)
    1a7a:	a1 e0       	ldi	r26, 0x01	; 1
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	03 c0       	rjmp	.+6      	; 0x1a86 <lm73_temp_convert+0x4e>
    1a80:	2f 5f       	subi	r18, 0xFF	; 255
    1a82:	3f 4f       	sbci	r19, 0xFF	; 255
    1a84:	9f 5f       	subi	r25, 0xFF	; 255
  //integer used to keep track of farenheit decimal
  uint8_t farenheit_carry = 0;

  //check each bit to get temperature
  for (uint8_t bit_t = 0; bit_t <11; bit_t++) {
    if (((cleaned_temp>>bit_t)&1)==1) {//bit is a one
    1a86:	ab 01       	movw	r20, r22
    1a88:	02 2e       	mov	r0, r18
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <lm73_temp_convert+0x58>
    1a8c:	56 95       	lsr	r21
    1a8e:	47 95       	ror	r20
    1a90:	0a 94       	dec	r0
    1a92:	e2 f7       	brpl	.-8      	; 0x1a8c <lm73_temp_convert+0x54>
    1a94:	40 ff       	sbrs	r20, 0
    1a96:	13 c0       	rjmp	.+38     	; 0x1abe <lm73_temp_convert+0x86>
      if (bit_t == 0) {//0.25 degrees
    1a98:	22 23       	and	r18, r18
    1a9a:	09 f4       	brne	.+2      	; 0x1a9e <lm73_temp_convert+0x66>
    1a9c:	d3 c0       	rjmp	.+422    	; 0x1c44 <lm73_temp_convert+0x20c>
        fractional_part+=25;
      }else if (bit_t==1) {//0.50 degrees
    1a9e:	21 30       	cpi	r18, 0x01	; 1
    1aa0:	09 f4       	brne	.+2      	; 0x1aa4 <lm73_temp_convert+0x6c>
    1aa2:	d3 c0       	rjmp	.+422    	; 0x1c4a <lm73_temp_convert+0x212>
        fractional_part+=50;
      }else if (bit_t==10) {//sign of temperature
    1aa4:	2a 30       	cpi	r18, 0x0A	; 10
    1aa6:	09 f4       	brne	.+2      	; 0x1aaa <lm73_temp_convert+0x72>
    1aa8:	d4 c0       	rjmp	.+424    	; 0x1c52 <lm73_temp_convert+0x21a>
        strcat(temp_digits, "-");
      }else{
        integer_part+=(1<<(bit_t-2));//bits 2:9(-2 due to 1st two bits)
    1aaa:	a9 01       	movw	r20, r18
    1aac:	42 50       	subi	r20, 0x02	; 2
    1aae:	51 09       	sbc	r21, r1
    1ab0:	6d 01       	movw	r12, r26
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <lm73_temp_convert+0x80>
    1ab4:	cc 0c       	add	r12, r12
    1ab6:	dd 1c       	adc	r13, r13
    1ab8:	4a 95       	dec	r20
    1aba:	e2 f7       	brpl	.-8      	; 0x1ab4 <lm73_temp_convert+0x7c>
    1abc:	ec 0d       	add	r30, r12

  //integer used to keep track of farenheit decimal
  uint8_t farenheit_carry = 0;

  //check each bit to get temperature
  for (uint8_t bit_t = 0; bit_t <11; bit_t++) {
    1abe:	9b 30       	cpi	r25, 0x0B	; 11
    1ac0:	f9 f6       	brne	.-66     	; 0x1a80 <lm73_temp_convert+0x48>
        integer_part+=(1<<(bit_t-2));//bits 2:9(-2 due to 1st two bits)
      }
    }
  }
  //Farenheit conversion
  if (f_not_c==1) {
    1ac2:	dd 24       	eor	r13, r13
    1ac4:	d3 94       	inc	r13
    1ac6:	fd 14       	cp	r15, r13
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <lm73_temp_convert+0x94>
    1aca:	42 c0       	rjmp	.+132    	; 0x1b50 <lm73_temp_convert+0x118>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1acc:	4a e0       	ldi	r20, 0x0A	; 10
    1ace:	be 01       	movw	r22, r28
    1ad0:	6f 5e       	subi	r22, 0xEF	; 239
    1ad2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad4:	8e 2f       	mov	r24, r30
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__itoa_ncheck>
    1adc:	4a e0       	ldi	r20, 0x0A	; 10
    1ade:	be 01       	movw	r22, r28
    1ae0:	6f 5f       	subi	r22, 0xFF	; 255
    1ae2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae4:	8e 2d       	mov	r24, r14
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__itoa_ncheck>
  }

  //write value to char array
  itoa(integer_part,ip_arr,10);//convert integer part to ascii
  itoa(fractional_part,fp_arr,10);//convert fractionla part to ascii
  strcat(temp_digits, ip_arr);//concatenate with the main array
    1aec:	be 01       	movw	r22, r28
    1aee:	6f 5e       	subi	r22, 0xEF	; 239
    1af0:	7f 4f       	sbci	r23, 0xFF	; 255
    1af2:	c8 01       	movw	r24, r16
    1af4:	0e 94 3e 12 	call	0x247c	; 0x247c <strcat>
  strcat(temp_digits, ".");//add decimal point
    1af8:	f8 01       	movw	r30, r16
    1afa:	01 90       	ld	r0, Z+
    1afc:	00 20       	and	r0, r0
    1afe:	e9 f7       	brne	.-6      	; 0x1afa <lm73_temp_convert+0xc2>
    1b00:	31 97       	sbiw	r30, 0x01	; 1
    1b02:	cf 01       	movw	r24, r30
    1b04:	80 1b       	sub	r24, r16
    1b06:	91 0b       	sbc	r25, r17
    1b08:	2e e2       	ldi	r18, 0x2E	; 46
    1b0a:	20 83       	st	Z, r18
  strcat(temp_digits, fp_arr);//concatenate with main array
    1b0c:	01 96       	adiw	r24, 0x01	; 1
    1b0e:	be 01       	movw	r22, r28
    1b10:	6f 5f       	subi	r22, 0xFF	; 255
    1b12:	7f 4f       	sbci	r23, 0xFF	; 255
    1b14:	80 0f       	add	r24, r16
    1b16:	91 1f       	adc	r25, r17
    1b18:	0e 94 49 12 	call	0x2492	; 0x2492 <strcpy>
  if (f_not_c) {
    1b1c:	f1 10       	cpse	r15, r1
    1b1e:	84 c0       	rjmp	.+264    	; 0x1c28 <lm73_temp_convert+0x1f0>
    strcat(temp_digits,"F");//Add DEG F
  }else{
    strcat(temp_digits, "C");//ADD DEG C
    1b20:	f8 01       	movw	r30, r16
    1b22:	01 90       	ld	r0, Z+
    1b24:	00 20       	and	r0, r0
    1b26:	e9 f7       	brne	.-6      	; 0x1b22 <lm73_temp_convert+0xea>
    1b28:	31 97       	sbiw	r30, 0x01	; 1
    1b2a:	83 e4       	ldi	r24, 0x43	; 67
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	91 83       	std	Z+1, r25	; 0x01
    1b30:	80 83       	st	Z, r24
  }


}//lm73_temp_convert
    1b32:	a0 96       	adiw	r28, 0x20	; 32
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	f8 94       	cli
    1b38:	de bf       	out	0x3e, r29	; 62
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	cd bf       	out	0x3d, r28	; 61
    1b3e:	df 91       	pop	r29
    1b40:	cf 91       	pop	r28
    1b42:	1f 91       	pop	r17
    1b44:	0f 91       	pop	r16
    1b46:	ff 90       	pop	r15
    1b48:	ef 90       	pop	r14
    1b4a:	df 90       	pop	r13
    1b4c:	cf 90       	pop	r12
    1b4e:	08 95       	ret
    }
  }
  //Farenheit conversion
  if (f_not_c==1) {
    //Convert decimal part 1st exclusively
    uint8_t farenheit_decimal = (fractional_part*9)/5;
    1b50:	29 e0       	ldi	r18, 0x09	; 9
    1b52:	e2 9e       	mul	r14, r18
    1b54:	c0 01       	movw	r24, r0
    1b56:	11 24       	eor	r1, r1
    1b58:	65 e0       	ldi	r22, 0x05	; 5
    1b5a:	70 e0       	ldi	r23, 0x00	; 0
    1b5c:	0e 94 1f 10 	call	0x203e	; 0x203e <__divmodhi4>
    1b60:	46 2f       	mov	r20, r22
    if (farenheit_decimal >=100) {
    1b62:	64 36       	cpi	r22, 0x64	; 100
    1b64:	08 f0       	brcs	.+2      	; 0x1b68 <lm73_temp_convert+0x130>
    1b66:	6a c0       	rjmp	.+212    	; 0x1c3c <lm73_temp_convert+0x204>
  //setup arrays to hold string equivalent of IP(integer part) and FP(fractional part)
  char ip_arr[16];
  char fp_arr[16];

  //integer used to keep track of farenheit decimal
  uint8_t farenheit_carry = 0;
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    // clear_display();//for testing
    // cursor_home();//for testing
    //Convert integer part
    uint16_t farenheit_integer  = (integer_part*90)/5 + 320;
    uint8_t f_decimal_from_int = (farenheit_integer%10) * 10;
    fractional_part +=f_decimal_from_int;//update fraction part
    1b6a:	82 e1       	ldi	r24, 0x12	; 18
    1b6c:	e8 9f       	mul	r30, r24
    1b6e:	70 01       	movw	r14, r0
    1b70:	11 24       	eor	r1, r1
    1b72:	a0 ec       	ldi	r26, 0xC0	; 192
    1b74:	ea 1a       	sub	r14, r26
    1b76:	ae ef       	ldi	r26, 0xFE	; 254
    1b78:	fa 0a       	sbc	r15, r26
    1b7a:	97 01       	movw	r18, r14
    1b7c:	ad ec       	ldi	r26, 0xCD	; 205
    1b7e:	bc ec       	ldi	r27, 0xCC	; 204
    1b80:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <__umulhisi3>
    1b84:	96 95       	lsr	r25
    1b86:	87 95       	ror	r24
    1b88:	96 95       	lsr	r25
    1b8a:	87 95       	ror	r24
    1b8c:	96 95       	lsr	r25
    1b8e:	87 95       	ror	r24
    1b90:	9c 01       	movw	r18, r24
    1b92:	22 0f       	add	r18, r18
    1b94:	33 1f       	adc	r19, r19
    1b96:	88 0f       	add	r24, r24
    1b98:	99 1f       	adc	r25, r25
    1b9a:	88 0f       	add	r24, r24
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	88 0f       	add	r24, r24
    1ba0:	99 1f       	adc	r25, r25
    1ba2:	82 0f       	add	r24, r18
    1ba4:	93 1f       	adc	r25, r19
    1ba6:	e8 1a       	sub	r14, r24
    1ba8:	f9 0a       	sbc	r15, r25
    1baa:	f4 2e       	mov	r15, r20
    1bac:	ba e0       	ldi	r27, 0x0A	; 10
    1bae:	eb 9e       	mul	r14, r27
    1bb0:	f0 0c       	add	r15, r0
    1bb2:	11 24       	eor	r1, r1
    if (fractional_part>=100) {
    1bb4:	73 e6       	ldi	r23, 0x63	; 99
    1bb6:	c7 2e       	mov	r12, r23
    1bb8:	cf 14       	cp	r12, r15
    1bba:	20 f4       	brcc	.+8      	; 0x1bc4 <lm73_temp_convert+0x18c>
      farenheit_carry++;//increase the farenheit carry
    1bbc:	ff 5f       	subi	r31, 0xFF	; 255
      fractional_part-=100;//update fractional part
    1bbe:	8c e9       	ldi	r24, 0x9C	; 156
    1bc0:	d8 2e       	mov	r13, r24
    1bc2:	fd 0c       	add	r15, r13
    1bc4:	29 e0       	ldi	r18, 0x09	; 9
    1bc6:	e2 9f       	mul	r30, r18
    1bc8:	c0 01       	movw	r24, r0
    1bca:	11 24       	eor	r1, r1
    1bcc:	65 e0       	ldi	r22, 0x05	; 5
    1bce:	70 e0       	ldi	r23, 0x00	; 0
    1bd0:	0e 94 1f 10 	call	0x203e	; 0x203e <__divmodhi4>
    1bd4:	80 e2       	ldi	r24, 0x20	; 32
    1bd6:	86 0f       	add	r24, r22
    1bd8:	8f 0f       	add	r24, r31
    1bda:	4a e0       	ldi	r20, 0x0A	; 10
    1bdc:	be 01       	movw	r22, r28
    1bde:	6f 5e       	subi	r22, 0xEF	; 239
    1be0:	7f 4f       	sbci	r23, 0xFF	; 255
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__itoa_ncheck>
    1be8:	4a e0       	ldi	r20, 0x0A	; 10
    1bea:	be 01       	movw	r22, r28
    1bec:	6f 5f       	subi	r22, 0xFF	; 255
    1bee:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf0:	8f 2d       	mov	r24, r15
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__itoa_ncheck>
  }

  //write value to char array
  itoa(integer_part,ip_arr,10);//convert integer part to ascii
  itoa(fractional_part,fp_arr,10);//convert fractionla part to ascii
  strcat(temp_digits, ip_arr);//concatenate with the main array
    1bf8:	be 01       	movw	r22, r28
    1bfa:	6f 5e       	subi	r22, 0xEF	; 239
    1bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfe:	c8 01       	movw	r24, r16
    1c00:	0e 94 3e 12 	call	0x247c	; 0x247c <strcat>
  strcat(temp_digits, ".");//add decimal point
    1c04:	f8 01       	movw	r30, r16
    1c06:	01 90       	ld	r0, Z+
    1c08:	00 20       	and	r0, r0
    1c0a:	e9 f7       	brne	.-6      	; 0x1c06 <lm73_temp_convert+0x1ce>
    1c0c:	31 97       	sbiw	r30, 0x01	; 1
    1c0e:	cf 01       	movw	r24, r30
    1c10:	80 1b       	sub	r24, r16
    1c12:	91 0b       	sbc	r25, r17
    1c14:	2e e2       	ldi	r18, 0x2E	; 46
    1c16:	20 83       	st	Z, r18
  strcat(temp_digits, fp_arr);//concatenate with main array
    1c18:	01 96       	adiw	r24, 0x01	; 1
    1c1a:	be 01       	movw	r22, r28
    1c1c:	6f 5f       	subi	r22, 0xFF	; 255
    1c1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c20:	80 0f       	add	r24, r16
    1c22:	91 1f       	adc	r25, r17
    1c24:	0e 94 49 12 	call	0x2492	; 0x2492 <strcpy>
  if (f_not_c) {
    strcat(temp_digits,"F");//Add DEG F
    1c28:	f8 01       	movw	r30, r16
    1c2a:	01 90       	ld	r0, Z+
    1c2c:	00 20       	and	r0, r0
    1c2e:	e9 f7       	brne	.-6      	; 0x1c2a <lm73_temp_convert+0x1f2>
    1c30:	31 97       	sbiw	r30, 0x01	; 1
    1c32:	86 e4       	ldi	r24, 0x46	; 70
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	91 83       	std	Z+1, r25	; 0x01
    1c38:	80 83       	st	Z, r24
    1c3a:	7b cf       	rjmp	.-266    	; 0x1b32 <lm73_temp_convert+0xfa>
  if (f_not_c==1) {
    //Convert decimal part 1st exclusively
    uint8_t farenheit_decimal = (fractional_part*9)/5;
    if (farenheit_decimal >=100) {
      farenheit_carry++;
      fractional_part = farenheit_decimal-100;
    1c3c:	4c e9       	ldi	r20, 0x9C	; 156
    1c3e:	46 0f       	add	r20, r22
  //Farenheit conversion
  if (f_not_c==1) {
    //Convert decimal part 1st exclusively
    uint8_t farenheit_decimal = (fractional_part*9)/5;
    if (farenheit_decimal >=100) {
      farenheit_carry++;
    1c40:	f1 e0       	ldi	r31, 0x01	; 1
    1c42:	93 cf       	rjmp	.-218    	; 0x1b6a <lm73_temp_convert+0x132>

  //check each bit to get temperature
  for (uint8_t bit_t = 0; bit_t <11; bit_t++) {
    if (((cleaned_temp>>bit_t)&1)==1) {//bit is a one
      if (bit_t == 0) {//0.25 degrees
        fractional_part+=25;
    1c44:	f9 e1       	ldi	r31, 0x19	; 25
    1c46:	ef 0e       	add	r14, r31
    1c48:	1b cf       	rjmp	.-458    	; 0x1a80 <lm73_temp_convert+0x48>
      }else if (bit_t==1) {//0.50 degrees
        fractional_part+=50;
    1c4a:	f2 e3       	ldi	r31, 0x32	; 50
    1c4c:	cf 2e       	mov	r12, r31
    1c4e:	ec 0c       	add	r14, r12
    1c50:	17 cf       	rjmp	.-466    	; 0x1a80 <lm73_temp_convert+0x48>
      }else if (bit_t==10) {//sign of temperature
        strcat(temp_digits, "-");
    1c52:	8d e2       	ldi	r24, 0x2D	; 45
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	d8 01       	movw	r26, r16
    1c58:	8d 93       	st	X+, r24
    1c5a:	9c 93       	st	X, r25
    1c5c:	32 cf       	rjmp	.-412    	; 0x1ac2 <lm73_temp_convert+0x8a>

00001c5e <read_temperature>:
    This variable holds the temperature value that was read
    from the LM73 temperature sensor
***********************************************************/
uint16_t read_temperature(){
  uint16_t lm73_temperature;//var to hold retun value
  twi_start_rd(LM73_ADDRESS, lm73_rd_buf, 2);
    1c5e:	42 e0       	ldi	r20, 0x02	; 2
    1c60:	6f ed       	ldi	r22, 0xDF	; 223
    1c62:	71 e0       	ldi	r23, 0x01	; 1
    1c64:	80 e9       	ldi	r24, 0x90	; 144
    1c66:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <twi_start_rd>
  lm73_temperature = lm73_rd_buf[0];//
  lm73_temperature = lm73_temperature<<8;//LS by 8
  lm73_temperature |= lm73_rd_buf[1];

  return lm73_temperature;
    1c6a:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <lm73_rd_buf>
    1c6e:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <lm73_rd_buf+0x1>
}
    1c72:	98 27       	eor	r25, r24
    1c74:	89 27       	eor	r24, r25
    1c76:	98 27       	eor	r25, r24
    1c78:	08 95       	ret

00001c7a <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
    1c7a:	1f 92       	push	r1
    1c7c:	0f 92       	push	r0
    1c7e:	0f b6       	in	r0, 0x3f	; 63
    1c80:	0f 92       	push	r0
    1c82:	11 24       	eor	r1, r1
    1c84:	0b b6       	in	r0, 0x3b	; 59
    1c86:	0f 92       	push	r0
    1c88:	2f 93       	push	r18
    1c8a:	3f 93       	push	r19
    1c8c:	8f 93       	push	r24
    1c8e:	9f 93       	push	r25
    1c90:	af 93       	push	r26
    1c92:	bf 93       	push	r27
    1c94:	ef 93       	push	r30
    1c96:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    1c98:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1c9c:	8e 2f       	mov	r24, r30
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	38 97       	sbiw	r30, 0x08	; 8
    1ca4:	e1 35       	cpi	r30, 0x51	; 81
    1ca6:	f1 05       	cpc	r31, r1
    1ca8:	b0 f0       	brcs	.+44     	; 0x1cd6 <__vector_33+0x5c>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
    1caa:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1cae:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <twi_state>
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
    1cb2:	84 e0       	ldi	r24, 0x04	; 4
    1cb4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  }//switch
}//TWI_isr
    1cb8:	ff 91       	pop	r31
    1cba:	ef 91       	pop	r30
    1cbc:	bf 91       	pop	r27
    1cbe:	af 91       	pop	r26
    1cc0:	9f 91       	pop	r25
    1cc2:	8f 91       	pop	r24
    1cc4:	3f 91       	pop	r19
    1cc6:	2f 91       	pop	r18
    1cc8:	0f 90       	pop	r0
    1cca:	0b be       	out	0x3b, r0	; 59
    1ccc:	0f 90       	pop	r0
    1cce:	0f be       	out	0x3f, r0	; 63
    1cd0:	0f 90       	pop	r0
    1cd2:	1f 90       	pop	r1
    1cd4:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    1cd6:	ea 5b       	subi	r30, 0xBA	; 186
    1cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cda:	0c 94 52 10 	jmp	0x20a4	; 0x20a4 <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
    1cde:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <twi_buf_ptr.1780>
    1ce2:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <twi_buf>
    1ce6:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <twi_buf+0x1>
    1cea:	e8 0f       	add	r30, r24
    1cec:	f1 1d       	adc	r31, r1
    1cee:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    1cf2:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
    1cf4:	84 e9       	ldi	r24, 0x94	; 148
    1cf6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;      
    1cfa:	de cf       	rjmp	.-68     	; 0x1cb8 <__vector_33+0x3e>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
    1cfc:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <twi_bus_addr>
    1d00:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
      twi_buf_ptr = 0;      //initalize buffer pointer 
    1d04:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <twi_buf_ptr.1780>
      TWCR = TWCR_SEND;     //send SLA+RW
    1d08:	85 e8       	ldi	r24, 0x85	; 133
    1d0a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;
    1d0e:	d4 cf       	rjmp	.-88     	; 0x1cb8 <__vector_33+0x3e>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
    1d10:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <twi_buf_ptr.1780>
    1d14:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <twi_msg_size>
    1d18:	89 17       	cp	r24, r25
    1d1a:	60 f7       	brcc	.-40     	; 0x1cf4 <__vector_33+0x7a>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
    1d1c:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <twi_buf>
    1d20:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <twi_buf+0x1>
    1d24:	91 e0       	ldi	r25, 0x01	; 1
    1d26:	98 0f       	add	r25, r24
    1d28:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <twi_buf_ptr.1780>
    1d2c:	e8 0f       	add	r30, r24
    1d2e:	f1 1d       	adc	r31, r1
    1d30:	80 81       	ld	r24, Z
    1d32:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
        TWCR = TWCR_SEND;               //send next byte 
    1d36:	85 e8       	ldi	r24, 0x85	; 133
    1d38:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1d3c:	bd cf       	rjmp	.-134    	; 0x1cb8 <__vector_33+0x3e>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
    1d3e:	85 ea       	ldi	r24, 0xA5	; 165
    1d40:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;
    1d44:	b9 cf       	rjmp	.-142    	; 0x1cb8 <__vector_33+0x3e>
    1d46:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <twi_buf_ptr.1780>
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    1d4a:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <twi_msg_size>
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	28 17       	cp	r18, r24
    1d56:	39 07       	cpc	r19, r25
    1d58:	dc f4       	brge	.+54     	; 0x1d90 <__vector_33+0x116>
    1d5a:	85 ec       	ldi	r24, 0xC5	; 197
    1d5c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1d60:	ab cf       	rjmp	.-170    	; 0x1cb8 <__vector_33+0x3e>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    1d62:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <twi_buf>
    1d66:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <twi_buf+0x1>
    1d6a:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <twi_buf_ptr.1780>
    1d6e:	21 e0       	ldi	r18, 0x01	; 1
    1d70:	28 0f       	add	r18, r24
    1d72:	20 93 72 01 	sts	0x0172, r18	; 0x800172 <twi_buf_ptr.1780>
    1d76:	e8 0f       	add	r30, r24
    1d78:	f1 1d       	adc	r31, r1
    1d7a:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    1d7e:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    1d80:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <twi_msg_size>
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	28 17       	cp	r18, r24
    1d8c:	39 07       	cpc	r19, r25
    1d8e:	2c f3       	brlt	.-54     	; 0x1d5a <__vector_33+0xe0>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
    1d90:	85 e8       	ldi	r24, 0x85	; 133
    1d92:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1d96:	90 cf       	rjmp	.-224    	; 0x1cb8 <__vector_33+0x3e>

00001d98 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    1d98:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
}
    1d9c:	81 70       	andi	r24, 0x01	; 1
    1d9e:	08 95       	ret

00001da0 <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    1da0:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
    1da4:	90 fd       	sbrc	r25, 0
    1da6:	fc cf       	rjmp	.-8      	; 0x1da0 <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
    1da8:	8e 7f       	andi	r24, 0xFE	; 254
    1daa:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <twi_bus_addr>
  twi_buf = twi_data;                   //load pointer to write buffer
    1dae:	70 93 e3 01 	sts	0x01E3, r23	; 0x8001e3 <twi_buf+0x1>
    1db2:	60 93 e2 01 	sts	0x01E2, r22	; 0x8001e2 <twi_buf>
  twi_msg_size = byte_cnt;              //load size of xfer 
    1db6:	40 93 e5 01 	sts	0x01E5, r20	; 0x8001e5 <twi_msg_size>
  TWCR = TWCR_START;                    //initiate START
    1dba:	85 ea       	ldi	r24, 0xA5	; 165
    1dbc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1dc0:	08 95       	ret

00001dc2 <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    1dc2:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
    1dc6:	90 fd       	sbrc	r25, 0
    1dc8:	fc cf       	rjmp	.-8      	; 0x1dc2 <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
    1dca:	81 60       	ori	r24, 0x01	; 1
    1dcc:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <twi_bus_addr>
  twi_buf = twi_data;                  //load pointer to write buffer
    1dd0:	70 93 e3 01 	sts	0x01E3, r23	; 0x8001e3 <twi_buf+0x1>
    1dd4:	60 93 e2 01 	sts	0x01E2, r22	; 0x8001e2 <twi_buf>
  twi_msg_size = byte_cnt;             //load size of xfer 
    1dd8:	40 93 e5 01 	sts	0x01E5, r20	; 0x8001e5 <twi_msg_size>
  TWCR = TWCR_START;                   //initiate START
    1ddc:	85 ea       	ldi	r24, 0xA5	; 165
    1dde:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1de2:	08 95       	ret

00001de4 <init_twi>:
//10K pullups are present on the board
//for alarm clock an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
    1de4:	8f ef       	ldi	r24, 0xFF	; 255
    1de6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  TWSR = 0x00;     //prescaler value = 1
    1dea:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
  TWBR = TWI_TWBR; //defined in twi_master.h 
    1dee:	8c e0       	ldi	r24, 0x0C	; 12
    1df0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    1df4:	08 95       	ret

00001df6 <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1df6:	5d 9b       	sbis	0x0b, 5	; 11
    1df8:	fe cf       	rjmp	.-4      	; 0x1df6 <uart_putc>
    UDR0 = data;    // Send data byte
    1dfa:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1dfc:	5d 9b       	sbis	0x0b, 5	; 11
    1dfe:	fe cf       	rjmp	.-4      	; 0x1dfc <uart_putc+0x6>
}
    1e00:	08 95       	ret

00001e02 <uart1_putc>:
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
    1e02:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    1e06:	95 ff       	sbrs	r25, 5
    1e08:	fc cf       	rjmp	.-8      	; 0x1e02 <uart1_putc>
    UDR1 = data;    // Send data byte
    1e0a:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
    1e0e:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    1e12:	85 ff       	sbrs	r24, 5
    1e14:	fc cf       	rjmp	.-8      	; 0x1e0e <uart1_putc+0xc>
}
    1e16:	08 95       	ret

00001e18 <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    1e18:	fc 01       	movw	r30, r24
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    1e1a:	90 81       	ld	r25, Z
    1e1c:	99 23       	and	r25, r25
    1e1e:	49 f0       	breq	.+18     	; 0x1e32 <uart_puts+0x1a>
    1e20:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1e22:	5d 9b       	sbis	0x0b, 5	; 11
    1e24:	fe cf       	rjmp	.-4      	; 0x1e22 <uart_puts+0xa>
    UDR0 = data;    // Send data byte
    1e26:	9c b9       	out	0x0c, r25	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1e28:	5d 9b       	sbis	0x0b, 5	; 11
    1e2a:	fe cf       	rjmp	.-4      	; 0x1e28 <uart_puts+0x10>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    1e2c:	91 91       	ld	r25, Z+
    1e2e:	91 11       	cpse	r25, r1
    1e30:	f8 cf       	rjmp	.-16     	; 0x1e22 <uart_puts+0xa>
    1e32:	08 95       	ret

00001e34 <uart1_puts>:
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    1e34:	fc 01       	movw	r30, r24
    1e36:	20 81       	ld	r18, Z
    1e38:	22 23       	and	r18, r18
    1e3a:	71 f0       	breq	.+28     	; 0x1e58 <uart1_puts+0x24>
    1e3c:	31 96       	adiw	r30, 0x01	; 1
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
    1e3e:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    1e42:	95 ff       	sbrs	r25, 5
    1e44:	fc cf       	rjmp	.-8      	; 0x1e3e <uart1_puts+0xa>
    UDR1 = data;    // Send data byte
    1e46:	20 93 9c 00 	sts	0x009C, r18	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
    1e4a:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    1e4e:	95 ff       	sbrs	r25, 5
    1e50:	fc cf       	rjmp	.-8      	; 0x1e4a <uart1_puts+0x16>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    1e52:	21 91       	ld	r18, Z+
    1e54:	21 11       	cpse	r18, r1
    1e56:	f3 cf       	rjmp	.-26     	; 0x1e3e <uart1_puts+0xa>
    1e58:	08 95       	ret

00001e5a <uart_puts_p>:
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
    1e5a:	9c 01       	movw	r18, r24
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	44 91       	lpm	r20, Z
    1e60:	44 23       	and	r20, r20
    1e62:	69 f0       	breq	.+26     	; 0x1e7e <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
    1e64:	01 96       	adiw	r24, 0x01	; 1
    1e66:	f9 01       	movw	r30, r18
    1e68:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1e6a:	5d 9b       	sbis	0x0b, 5	; 11
    1e6c:	fe cf       	rjmp	.-4      	; 0x1e6a <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
    1e6e:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1e70:	5d 9b       	sbis	0x0b, 5	; 11
    1e72:	fe cf       	rjmp	.-4      	; 0x1e70 <uart_puts_p+0x16>
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
    1e74:	9c 01       	movw	r18, r24
    1e76:	fc 01       	movw	r30, r24
    1e78:	44 91       	lpm	r20, Z
    1e7a:	41 11       	cpse	r20, r1
    1e7c:	f3 cf       	rjmp	.-26     	; 0x1e64 <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
    1e7e:	08 95       	ret

00001e80 <uart_init>:
//Jumpers J14 and J16 (mega128.1) or Jumpers J7 and J9 (mega128.2)
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); //INTERRUPTS ENABLED
    1e80:	8a b1       	in	r24, 0x0a	; 10
    1e82:	88 69       	ori	r24, 0x98	; 152
    1e84:	8a b9       	out	0x0a, r24	; 10
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);               //INTERRUPS DISABLED

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
    1e86:	e5 e9       	ldi	r30, 0x95	; 149
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	86 60       	ori	r24, 0x06	; 6
    1e8e:	80 83       	st	Z, r24
  UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
    1e90:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
    1e94:	87 e6       	ldi	r24, 0x67	; 103
    1e96:	89 b9       	out	0x09, r24	; 9
    1e98:	08 95       	ret

00001e9a <uart1_init>:
//must be in place for the MAX232 chip to get data.

void uart1_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
//UCSR1B |= (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1); //INTERRUPTS ENABLED
  UCSR1B |= (1<<RXEN1) | (1<<TXEN1);               //INTERRUPS DISABLED
    1e9a:	ea e9       	ldi	r30, 0x9A	; 154
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	88 61       	ori	r24, 0x18	; 24
    1ea2:	80 83       	st	Z, r24

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);
    1ea4:	ed e9       	ldi	r30, 0x9D	; 157
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	86 60       	ori	r24, 0x06	; 6
    1eac:	80 83       	st	Z, r24
  UBRR1H = (BAUDVALUE_1 >>8 ); //load upper byte of the baud rate into UBRR 
    1eae:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
  UBRR1L =  BAUDVALUE_1;       //load lower byte of the baud rate into UBRR 
    1eb2:	87 e6       	ldi	r24, 0x67	; 103
    1eb4:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    1eb8:	08 95       	ret

00001eba <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    1eba:	80 e8       	ldi	r24, 0x80	; 128
    1ebc:	9e e3       	ldi	r25, 0x3E	; 62
    1ebe:	02 c0       	rjmp	.+4      	; 0x1ec4 <uart_getc+0xa>
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
    1ec2:	21 f0       	breq	.+8      	; 0x1ecc <uart_getc+0x12>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    1ec4:	5f 9b       	sbis	0x0b, 7	; 11
    1ec6:	fc cf       	rjmp	.-8      	; 0x1ec0 <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
    1ec8:	8c b1       	in	r24, 0x0c	; 12
    1eca:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
    1ece:	08 95       	ret

00001ed0 <uart1_getc>:
    1ed0:	80 e8       	ldi	r24, 0x80	; 128
    1ed2:	9e e3       	ldi	r25, 0x3E	; 62
    1ed4:	02 c0       	rjmp	.+4      	; 0x1eda <uart1_getc+0xa>
    1ed6:	01 97       	sbiw	r24, 0x01	; 1
    1ed8:	39 f0       	breq	.+14     	; 0x1ee8 <uart1_getc+0x18>
    1eda:	20 91 9b 00 	lds	r18, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    1ede:	27 ff       	sbrs	r18, 7
    1ee0:	fa cf       	rjmp	.-12     	; 0x1ed6 <uart1_getc+0x6>
    1ee2:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    1ee6:	08 95       	ret
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	08 95       	ret

00001eec <main>:
//***********************************************************************
//                           init_tcnt0
//***********************************************************************
//initalize timer/counter zero to normal mode
void init_tcnt0(){
  ASSR  |= (1<<AS0);//run off external 32kHz osc
    1eec:	80 b7       	in	r24, 0x30	; 48
    1eee:	88 60       	ori	r24, 0x08	; 8
    1ef0:	80 bf       	out	0x30, r24	; 48
  TIMSK |= (1<<TOIE0);//overflow interrup
    1ef2:	87 b7       	in	r24, 0x37	; 55
    1ef4:	81 60       	ori	r24, 0x01	; 1
    1ef6:	87 bf       	out	0x37, r24	; 55
  TCCR0 |= (1<<CS00);//Normal mode, no prescale
    1ef8:	83 b7       	in	r24, 0x33	; 51
    1efa:	81 60       	ori	r24, 0x01	; 1
    1efc:	83 bf       	out	0x33, r24	; 51
//***********************************************************************
//                           init_tcnt2
//***********************************************************************
void init_tcnt2(){
  //Fast PWM, Non-inverting mode on OC2(PB7),CLKio/1024 prescale, uC clock
  TCCR2 |= (1<<WGM21)|(1<<WGM20)|(1<<COM21)|(1<<COM20)|(0<<CS20)|(0<<CS21)|(1<<CS22);
    1efe:	85 b5       	in	r24, 0x25	; 37
    1f00:	8c 67       	ori	r24, 0x7C	; 124
    1f02:	85 bd       	out	0x25, r24	; 37
  TIMSK |= (1<<TOIE2);//overflow interrupt
    1f04:	87 b7       	in	r24, 0x37	; 55
    1f06:	80 64       	ori	r24, 0x40	; 64
    1f08:	87 bf       	out	0x37, r24	; 55
  OCR2  |= 127;//initalize to half of the total scale (0-255)
    1f0a:	83 b5       	in	r24, 0x23	; 35
    1f0c:	8f 67       	ori	r24, 0x7F	; 127
    1f0e:	83 bd       	out	0x23, r24	; 35
//***********************************************************************
//                           init_tcnt1
//***********************************************************************
void init_tcnt1(){
  //CTC mode,no prescale, Normal port operation
  TCCR1B |= (1<<WGM12)|(1<<CS10);
    1f10:	8e b5       	in	r24, 0x2e	; 46
    1f12:	89 60       	ori	r24, 0x09	; 9
    1f14:	8e bd       	out	0x2e, r24	; 46
  TIMSK  |= (1<<OCIE1A);// Output compare A match
    1f16:	87 b7       	in	r24, 0x37	; 55
    1f18:	80 61       	ori	r24, 0x10	; 16
    1f1a:	87 bf       	out	0x37, r24	; 55
  OCR1A   = 0x1F3F;//7999 for 1Khz wave
    1f1c:	8f e3       	ldi	r24, 0x3F	; 63
    1f1e:	9f e1       	ldi	r25, 0x1F	; 31
    1f20:	9b bd       	out	0x2b, r25	; 43
    1f22:	8a bd       	out	0x2a, r24	; 42
//***********************************************************************
//                           init_tcnt3
//***********************************************************************
void init_tcnt3(){
  //Non-inverting mode //FAST PWM, 8-bit, no prescale
  TCCR3A |= (1<<COM3A1)|(0<<COM3A0)|(0<<WGM31)|(1<<WGM30);
    1f24:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1f28:	81 68       	ori	r24, 0x81	; 129
    1f2a:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  TCCR3B |= (0<<WGM33)|(1<<WGM32)|(1<<CS30);
    1f2e:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1f32:	89 60       	ori	r24, 0x09	; 9
    1f34:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
  ETIMSK |= (1<<TOIE3);//overflow interrup
    1f38:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <__TEXT_REGION_LENGTH__+0x7e007d>
    1f3c:	84 60       	ori	r24, 0x04	; 4
    1f3e:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x7e007d>
  OCR3A =  127;//Vout = OCR3A*(0.0198)+0.022
    1f42:	8f e7       	ldi	r24, 0x7F	; 127
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    1f4a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
  This function will setup the Analog-to-digital conveter
Parameters: NONE
Return: void
***************************************************************/
void adc_init(){
  DDRF  &= ~(_BV(DDF7));//make port F bit 7 is ADC input
    1f4e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    1f52:	8f 77       	andi	r24, 0x7F	; 127
    1f54:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  PORTF &= ~(_BV(PF7));// port F bit 7 pullups must be off
    1f58:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1f5c:	8f 77       	andi	r24, 0x7F	; 127
    1f5e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  ADMUX |= (1<<REFS0)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0) ;//single-ended, input PORTF bit 7, right adjusted, 10 bits
    1f62:	87 b1       	in	r24, 0x07	; 7
    1f64:	87 64       	ori	r24, 0x47	; 71
    1f66:	87 b9       	out	0x07, r24	; 7
  ADCSRA|= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);//ADC enabled, division factor 128
    1f68:	86 b1       	in	r24, 0x06	; 6
    1f6a:	87 68       	ori	r24, 0x87	; 135
    1f6c:	86 b9       	out	0x06, r24	; 6
    display to work correctly
  Parameters: NONE
  Return:void
  ***************************************************************/
  void lcd_ports(){
    DDRF  |= 0x08;  //port F bit 3 is enable for LCD
    1f6e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    1f72:	88 60       	ori	r24, 0x08	; 8
    1f74:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    PORTF &= 0xF7;  //port F bit 3 is initially low
    1f78:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1f7c:	87 7f       	andi	r24, 0xF7	; 247
    1f7e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  init_tcnt2();//initalize timer/counter 2
  init_tcnt1();//initialize timer/coutner 1
  init_tcnt3();//initialize timer/counter 3
  adc_init();//initalize AD
  lcd_ports();//initalize LCD ports
  uart_init();//initialize UART
    1f82:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <uart_init>
  DDRB |= 0xC0;//OE_EN(pb6), PWM(pb7)
    1f86:	87 b3       	in	r24, 0x17	; 23
    1f88:	80 6c       	ori	r24, 0xC0	; 192
    1f8a:	87 bb       	out	0x17, r24	; 23
//***********************************************************************
//                            spi_init
//**********************************************************************
void spi_init(void){
  //PORTB ouput: ss(pb0), MOSI(pb2), sclk(pb1)
  DDRB  |= (1<<BIT0)|(1<<BIT1)|(1<<BIT2);
    1f8c:	87 b3       	in	r24, 0x17	; 23
    1f8e:	87 60       	ori	r24, 0x07	; 7
    1f90:	87 bb       	out	0x17, r24	; 23
  SPCR   = (1<<SPE) | (1<<MSTR) ; //master mode, clk low on idle, leading edge sample
    1f92:	80 e5       	ldi	r24, 0x50	; 80
    1f94:	8d b9       	out	0x0d, r24	; 13
  SPSR   = (1<<SPI2X); //choose double speed operation
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	8e b9       	out	0x0e, r24	; 14
  adc_init();//initalize AD
  lcd_ports();//initalize LCD ports
  uart_init();//initialize UART
  DDRB |= 0xC0;//OE_EN(pb6), PWM(pb7)
  spi_init();//initialize SPI
  lcd_init();
    1f9a:	0e 94 a5 0a 	call	0x154a	; 0x154a <lcd_init>
  init_twi();
    1f9e:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <init_twi>
  sei();//enable global interruts
    1fa2:	78 94       	sei
  clear_display();
    1fa4:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <clear_display>
  DDRC = 0x70;//set PORTC(4(SEL0),5(SEL1),6(SEL2)) as output (never changes)
    1fa8:	80 e7       	ldi	r24, 0x70	; 112
    1faa:	84 bb       	out	0x14, r24	; 20
  DDRE = 0xC8;//set PORTE PIN 6,7,3 as ouputs(never changes)
    1fac:	88 ec       	ldi	r24, 0xC8	; 200
    1fae:	82 b9       	out	0x02, r24	; 2
  PORTE =0xC0;//set SH/LD and CLK_INH high (low enabled)
    1fb0:	80 ec       	ldi	r24, 0xC0	; 192
    1fb2:	83 b9       	out	0x03, r24	; 3
  DDRD = 0x4;//set pin 0 on PORTD as output for alarm
    1fb4:	84 e0       	ldi	r24, 0x04	; 4
    1fb6:	81 bb       	out	0x11, r24	; 17
  uint8_t digit_sel = 0;//digit select
  segment_data[2] =0xFC;//initalize colon ON
    1fb8:	8c ef       	ldi	r24, 0xFC	; 252
    1fba:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <segment_data+0x2>
  clear_display();
  DDRC = 0x70;//set PORTC(4(SEL0),5(SEL1),6(SEL2)) as output (never changes)
  DDRE = 0xC8;//set PORTE PIN 6,7,3 as ouputs(never changes)
  PORTE =0xC0;//set SH/LD and CLK_INH high (low enabled)
  DDRD = 0x4;//set pin 0 on PORTD as output for alarm
  uint8_t digit_sel = 0;//digit select
    1fbe:	c0 e0       	ldi	r28, 0x00	; 0
Return:void
***************************************************************/
void display_mode(){
  SPDR = mode;//write value to register
  while(bit_is_clear(SPSR,SPIF)){}//wait until data is sent
  PORTB ^=(1<<BIT0);//send rising edge to regclk on HC595
    1fc0:	d1 e0       	ldi	r29, 0x01	; 1
    display_mode();//display mode on bargraph

    if (digit_sel>4) {//bound diigit select 0-4
      digit_sel =0;
    }
    DDRA = 0xFF;//make PORTA output for Seven Segment
    1fc2:	1f ef       	ldi	r17, 0xFF	; 255
    PORTA = segment_data[digit_sel];//send 7 segment code to LED segments
    //send PORTC the digit to display & power ON to seven seg(bit7=0)
    if (digit_sel == 0) {
      PORTC = 0b01000000;//Hours Tens digit
    1fc4:	00 e4       	ldi	r16, 0x40	; 64
    }else if (digit_sel==1) {
      PORTC = 0b00110000;//Hours Ones  digit
    }else if (digit_sel==2) {
      PORTC = 0b00100000;//colon digit
    }else if (digit_sel==3) {
      PORTC = 0b00010000;//Minsutes tens digit
    1fc6:	80 e1       	ldi	r24, 0x10	; 16
    1fc8:	d8 2e       	mov	r13, r24
    if (digit_sel == 0) {
      PORTC = 0b01000000;//Hours Tens digit
    }else if (digit_sel==1) {
      PORTC = 0b00110000;//Hours Ones  digit
    }else if (digit_sel==2) {
      PORTC = 0b00100000;//colon digit
    1fca:	90 e2       	ldi	r25, 0x20	; 32
    1fcc:	e9 2e       	mov	r14, r25
    PORTA = segment_data[digit_sel];//send 7 segment code to LED segments
    //send PORTC the digit to display & power ON to seven seg(bit7=0)
    if (digit_sel == 0) {
      PORTC = 0b01000000;//Hours Tens digit
    }else if (digit_sel==1) {
      PORTC = 0b00110000;//Hours Ones  digit
    1fce:	20 e3       	ldi	r18, 0x30	; 48
    1fd0:	f2 2e       	mov	r15, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1fd2:	8f e3       	ldi	r24, 0x3F	; 63
    1fd4:	9f e1       	ldi	r25, 0x1F	; 31
    1fd6:	01 97       	sbiw	r24, 0x01	; 1
    1fd8:	f1 f7       	brne	.-4      	; 0x1fd6 <main+0xea>
    1fda:	00 c0       	rjmp	.+0      	; 0x1fdc <main+0xf0>
    1fdc:	00 00       	nop
  uint8_t digit_sel = 0;//digit select
  segment_data[2] =0xFC;//initalize colon ON

  while (1) {
    _delay_ms(2);
    decode_time();//break up the time to 4, BCD digits in the array
    1fde:	0e 94 64 02 	call	0x4c8	; 0x4c8 <decode_time>
  SPI protocol
Parameters: NONE
Return:void
***************************************************************/
void display_mode(){
  SPDR = mode;//write value to register
    1fe2:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <mode>
    1fe6:	8f b9       	out	0x0f, r24	; 15
  while(bit_is_clear(SPSR,SPIF)){}//wait until data is sent
    1fe8:	77 9b       	sbis	0x0e, 7	; 14
    1fea:	fe cf       	rjmp	.-4      	; 0x1fe8 <main+0xfc>
  PORTB ^=(1<<BIT0);//send rising edge to regclk on HC595
    1fec:	88 b3       	in	r24, 0x18	; 24
    1fee:	8d 27       	eor	r24, r29
    1ff0:	88 bb       	out	0x18, r24	; 24
  PORTB ^=(1<<BIT0);//send falling edge to reglck on HC595
    1ff2:	88 b3       	in	r24, 0x18	; 24
    1ff4:	8d 27       	eor	r24, r29
    1ff6:	88 bb       	out	0x18, r24	; 24
    display_mode();//display mode on bargraph

    if (digit_sel>4) {//bound diigit select 0-4
      digit_sel =0;
    }
    DDRA = 0xFF;//make PORTA output for Seven Segment
    1ff8:	1a bb       	out	0x1a, r17	; 26
  while (1) {
    _delay_ms(2);
    decode_time();//break up the time to 4, BCD digits in the array
    display_mode();//display mode on bargraph

    if (digit_sel>4) {//bound diigit select 0-4
    1ffa:	c5 30       	cpi	r28, 0x05	; 5
    1ffc:	88 f4       	brcc	.+34     	; 0x2020 <main+0x134>
      digit_sel =0;
    }
    DDRA = 0xFF;//make PORTA output for Seven Segment
    PORTA = segment_data[digit_sel];//send 7 segment code to LED segments
    1ffe:	ec 2f       	mov	r30, r28
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	e8 55       	subi	r30, 0x58	; 88
    2004:	fe 4f       	sbci	r31, 0xFE	; 254
    2006:	80 81       	ld	r24, Z
    2008:	8b bb       	out	0x1b, r24	; 27
    //send PORTC the digit to display & power ON to seven seg(bit7=0)
    if (digit_sel == 0) {
    200a:	cc 23       	and	r28, r28
    200c:	61 f0       	breq	.+24     	; 0x2026 <main+0x13a>
      PORTC = 0b01000000;//Hours Tens digit
    }else if (digit_sel==1) {
    200e:	c1 30       	cpi	r28, 0x01	; 1
    2010:	69 f0       	breq	.+26     	; 0x202c <main+0x140>
      PORTC = 0b00110000;//Hours Ones  digit
    }else if (digit_sel==2) {
    2012:	c2 30       	cpi	r28, 0x02	; 2
    2014:	71 f0       	breq	.+28     	; 0x2032 <main+0x146>
      PORTC = 0b00100000;//colon digit
    }else if (digit_sel==3) {
    2016:	c3 30       	cpi	r28, 0x03	; 3
    2018:	79 f0       	breq	.+30     	; 0x2038 <main+0x14c>
      PORTC = 0b00010000;//Minsutes tens digit
    }else if (digit_sel==4) {
      PORTC =0b00000000;//Minutes ones digit
    201a:	15 ba       	out	0x15, r1	; 21
    201c:	c5 e0       	ldi	r28, 0x05	; 5
    }
    digit_sel++;//update digit to display(increment)


  }//WHILE
    201e:	d9 cf       	rjmp	.-78     	; 0x1fd2 <main+0xe6>

    if (digit_sel>4) {//bound diigit select 0-4
      digit_sel =0;
    }
    DDRA = 0xFF;//make PORTA output for Seven Segment
    PORTA = segment_data[digit_sel];//send 7 segment code to LED segments
    2020:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <segment_data>
    2024:	8b bb       	out	0x1b, r24	; 27
    //send PORTC the digit to display & power ON to seven seg(bit7=0)
    if (digit_sel == 0) {
      PORTC = 0b01000000;//Hours Tens digit
    2026:	05 bb       	out	0x15, r16	; 21
    2028:	c1 e0       	ldi	r28, 0x01	; 1
    202a:	d3 cf       	rjmp	.-90     	; 0x1fd2 <main+0xe6>
    }else if (digit_sel==1) {
      PORTC = 0b00110000;//Hours Ones  digit
    202c:	f5 ba       	out	0x15, r15	; 21
    202e:	c2 e0       	ldi	r28, 0x02	; 2
    2030:	d0 cf       	rjmp	.-96     	; 0x1fd2 <main+0xe6>
    }else if (digit_sel==2) {
      PORTC = 0b00100000;//colon digit
    2032:	e5 ba       	out	0x15, r14	; 21
    2034:	c3 e0       	ldi	r28, 0x03	; 3
    2036:	cd cf       	rjmp	.-102    	; 0x1fd2 <main+0xe6>
    }else if (digit_sel==3) {
      PORTC = 0b00010000;//Minsutes tens digit
    2038:	d5 ba       	out	0x15, r13	; 21
    203a:	c4 e0       	ldi	r28, 0x04	; 4
    203c:	ca cf       	rjmp	.-108    	; 0x1fd2 <main+0xe6>

0000203e <__divmodhi4>:
    203e:	97 fb       	bst	r25, 7
    2040:	07 2e       	mov	r0, r23
    2042:	16 f4       	brtc	.+4      	; 0x2048 <__divmodhi4+0xa>
    2044:	00 94       	com	r0
    2046:	07 d0       	rcall	.+14     	; 0x2056 <__divmodhi4_neg1>
    2048:	77 fd       	sbrc	r23, 7
    204a:	09 d0       	rcall	.+18     	; 0x205e <__divmodhi4_neg2>
    204c:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodhi4>
    2050:	07 fc       	sbrc	r0, 7
    2052:	05 d0       	rcall	.+10     	; 0x205e <__divmodhi4_neg2>
    2054:	3e f4       	brtc	.+14     	; 0x2064 <__divmodhi4_exit>

00002056 <__divmodhi4_neg1>:
    2056:	90 95       	com	r25
    2058:	81 95       	neg	r24
    205a:	9f 4f       	sbci	r25, 0xFF	; 255
    205c:	08 95       	ret

0000205e <__divmodhi4_neg2>:
    205e:	70 95       	com	r23
    2060:	61 95       	neg	r22
    2062:	7f 4f       	sbci	r23, 0xFF	; 255

00002064 <__divmodhi4_exit>:
    2064:	08 95       	ret

00002066 <__divmodsi4>:
    2066:	05 2e       	mov	r0, r21
    2068:	97 fb       	bst	r25, 7
    206a:	1e f4       	brtc	.+6      	; 0x2072 <__divmodsi4+0xc>
    206c:	00 94       	com	r0
    206e:	0e 94 4a 10 	call	0x2094	; 0x2094 <__negsi2>
    2072:	57 fd       	sbrc	r21, 7
    2074:	07 d0       	rcall	.+14     	; 0x2084 <__divmodsi4_neg2>
    2076:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__udivmodsi4>
    207a:	07 fc       	sbrc	r0, 7
    207c:	03 d0       	rcall	.+6      	; 0x2084 <__divmodsi4_neg2>
    207e:	4e f4       	brtc	.+18     	; 0x2092 <__divmodsi4_exit>
    2080:	0c 94 4a 10 	jmp	0x2094	; 0x2094 <__negsi2>

00002084 <__divmodsi4_neg2>:
    2084:	50 95       	com	r21
    2086:	40 95       	com	r20
    2088:	30 95       	com	r19
    208a:	21 95       	neg	r18
    208c:	3f 4f       	sbci	r19, 0xFF	; 255
    208e:	4f 4f       	sbci	r20, 0xFF	; 255
    2090:	5f 4f       	sbci	r21, 0xFF	; 255

00002092 <__divmodsi4_exit>:
    2092:	08 95       	ret

00002094 <__negsi2>:
    2094:	90 95       	com	r25
    2096:	80 95       	com	r24
    2098:	70 95       	com	r23
    209a:	61 95       	neg	r22
    209c:	7f 4f       	sbci	r23, 0xFF	; 255
    209e:	8f 4f       	sbci	r24, 0xFF	; 255
    20a0:	9f 4f       	sbci	r25, 0xFF	; 255
    20a2:	08 95       	ret

000020a4 <__tablejump2__>:
    20a4:	ee 0f       	add	r30, r30
    20a6:	ff 1f       	adc	r31, r31
    20a8:	00 24       	eor	r0, r0
    20aa:	00 1c       	adc	r0, r0
    20ac:	0b be       	out	0x3b, r0	; 59
    20ae:	07 90       	elpm	r0, Z+
    20b0:	f6 91       	elpm	r31, Z
    20b2:	e0 2d       	mov	r30, r0
    20b4:	09 94       	ijmp

000020b6 <__umulhisi3>:
    20b6:	a2 9f       	mul	r26, r18
    20b8:	b0 01       	movw	r22, r0
    20ba:	b3 9f       	mul	r27, r19
    20bc:	c0 01       	movw	r24, r0
    20be:	a3 9f       	mul	r26, r19
    20c0:	70 0d       	add	r23, r0
    20c2:	81 1d       	adc	r24, r1
    20c4:	11 24       	eor	r1, r1
    20c6:	91 1d       	adc	r25, r1
    20c8:	b2 9f       	mul	r27, r18
    20ca:	70 0d       	add	r23, r0
    20cc:	81 1d       	adc	r24, r1
    20ce:	11 24       	eor	r1, r1
    20d0:	91 1d       	adc	r25, r1
    20d2:	08 95       	ret

000020d4 <__udivmodhi4>:
    20d4:	aa 1b       	sub	r26, r26
    20d6:	bb 1b       	sub	r27, r27
    20d8:	51 e1       	ldi	r21, 0x11	; 17
    20da:	07 c0       	rjmp	.+14     	; 0x20ea <__udivmodhi4_ep>

000020dc <__udivmodhi4_loop>:
    20dc:	aa 1f       	adc	r26, r26
    20de:	bb 1f       	adc	r27, r27
    20e0:	a6 17       	cp	r26, r22
    20e2:	b7 07       	cpc	r27, r23
    20e4:	10 f0       	brcs	.+4      	; 0x20ea <__udivmodhi4_ep>
    20e6:	a6 1b       	sub	r26, r22
    20e8:	b7 0b       	sbc	r27, r23

000020ea <__udivmodhi4_ep>:
    20ea:	88 1f       	adc	r24, r24
    20ec:	99 1f       	adc	r25, r25
    20ee:	5a 95       	dec	r21
    20f0:	a9 f7       	brne	.-22     	; 0x20dc <__udivmodhi4_loop>
    20f2:	80 95       	com	r24
    20f4:	90 95       	com	r25
    20f6:	bc 01       	movw	r22, r24
    20f8:	cd 01       	movw	r24, r26
    20fa:	08 95       	ret

000020fc <__udivmodsi4>:
    20fc:	a1 e2       	ldi	r26, 0x21	; 33
    20fe:	1a 2e       	mov	r1, r26
    2100:	aa 1b       	sub	r26, r26
    2102:	bb 1b       	sub	r27, r27
    2104:	fd 01       	movw	r30, r26
    2106:	0d c0       	rjmp	.+26     	; 0x2122 <__udivmodsi4_ep>

00002108 <__udivmodsi4_loop>:
    2108:	aa 1f       	adc	r26, r26
    210a:	bb 1f       	adc	r27, r27
    210c:	ee 1f       	adc	r30, r30
    210e:	ff 1f       	adc	r31, r31
    2110:	a2 17       	cp	r26, r18
    2112:	b3 07       	cpc	r27, r19
    2114:	e4 07       	cpc	r30, r20
    2116:	f5 07       	cpc	r31, r21
    2118:	20 f0       	brcs	.+8      	; 0x2122 <__udivmodsi4_ep>
    211a:	a2 1b       	sub	r26, r18
    211c:	b3 0b       	sbc	r27, r19
    211e:	e4 0b       	sbc	r30, r20
    2120:	f5 0b       	sbc	r31, r21

00002122 <__udivmodsi4_ep>:
    2122:	66 1f       	adc	r22, r22
    2124:	77 1f       	adc	r23, r23
    2126:	88 1f       	adc	r24, r24
    2128:	99 1f       	adc	r25, r25
    212a:	1a 94       	dec	r1
    212c:	69 f7       	brne	.-38     	; 0x2108 <__udivmodsi4_loop>
    212e:	60 95       	com	r22
    2130:	70 95       	com	r23
    2132:	80 95       	com	r24
    2134:	90 95       	com	r25
    2136:	9b 01       	movw	r18, r22
    2138:	ac 01       	movw	r20, r24
    213a:	bd 01       	movw	r22, r26
    213c:	cf 01       	movw	r24, r30
    213e:	08 95       	ret

00002140 <__subsf3>:
    2140:	50 58       	subi	r21, 0x80	; 128

00002142 <__addsf3>:
    2142:	bb 27       	eor	r27, r27
    2144:	aa 27       	eor	r26, r26
    2146:	0e 94 b8 10 	call	0x2170	; 0x2170 <__addsf3x>
    214a:	0c 94 97 11 	jmp	0x232e	; 0x232e <__fp_round>
    214e:	0e 94 89 11 	call	0x2312	; 0x2312 <__fp_pscA>
    2152:	38 f0       	brcs	.+14     	; 0x2162 <__addsf3+0x20>
    2154:	0e 94 90 11 	call	0x2320	; 0x2320 <__fp_pscB>
    2158:	20 f0       	brcs	.+8      	; 0x2162 <__addsf3+0x20>
    215a:	39 f4       	brne	.+14     	; 0x216a <__addsf3+0x28>
    215c:	9f 3f       	cpi	r25, 0xFF	; 255
    215e:	19 f4       	brne	.+6      	; 0x2166 <__addsf3+0x24>
    2160:	26 f4       	brtc	.+8      	; 0x216a <__addsf3+0x28>
    2162:	0c 94 86 11 	jmp	0x230c	; 0x230c <__fp_nan>
    2166:	0e f4       	brtc	.+2      	; 0x216a <__addsf3+0x28>
    2168:	e0 95       	com	r30
    216a:	e7 fb       	bst	r30, 7
    216c:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__fp_inf>

00002170 <__addsf3x>:
    2170:	e9 2f       	mov	r30, r25
    2172:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fp_split3>
    2176:	58 f3       	brcs	.-42     	; 0x214e <__addsf3+0xc>
    2178:	ba 17       	cp	r27, r26
    217a:	62 07       	cpc	r22, r18
    217c:	73 07       	cpc	r23, r19
    217e:	84 07       	cpc	r24, r20
    2180:	95 07       	cpc	r25, r21
    2182:	20 f0       	brcs	.+8      	; 0x218c <__addsf3x+0x1c>
    2184:	79 f4       	brne	.+30     	; 0x21a4 <__addsf3x+0x34>
    2186:	a6 f5       	brtc	.+104    	; 0x21f0 <__addsf3x+0x80>
    2188:	0c 94 ca 11 	jmp	0x2394	; 0x2394 <__fp_zero>
    218c:	0e f4       	brtc	.+2      	; 0x2190 <__addsf3x+0x20>
    218e:	e0 95       	com	r30
    2190:	0b 2e       	mov	r0, r27
    2192:	ba 2f       	mov	r27, r26
    2194:	a0 2d       	mov	r26, r0
    2196:	0b 01       	movw	r0, r22
    2198:	b9 01       	movw	r22, r18
    219a:	90 01       	movw	r18, r0
    219c:	0c 01       	movw	r0, r24
    219e:	ca 01       	movw	r24, r20
    21a0:	a0 01       	movw	r20, r0
    21a2:	11 24       	eor	r1, r1
    21a4:	ff 27       	eor	r31, r31
    21a6:	59 1b       	sub	r21, r25
    21a8:	99 f0       	breq	.+38     	; 0x21d0 <__addsf3x+0x60>
    21aa:	59 3f       	cpi	r21, 0xF9	; 249
    21ac:	50 f4       	brcc	.+20     	; 0x21c2 <__addsf3x+0x52>
    21ae:	50 3e       	cpi	r21, 0xE0	; 224
    21b0:	68 f1       	brcs	.+90     	; 0x220c <__addsf3x+0x9c>
    21b2:	1a 16       	cp	r1, r26
    21b4:	f0 40       	sbci	r31, 0x00	; 0
    21b6:	a2 2f       	mov	r26, r18
    21b8:	23 2f       	mov	r18, r19
    21ba:	34 2f       	mov	r19, r20
    21bc:	44 27       	eor	r20, r20
    21be:	58 5f       	subi	r21, 0xF8	; 248
    21c0:	f3 cf       	rjmp	.-26     	; 0x21a8 <__addsf3x+0x38>
    21c2:	46 95       	lsr	r20
    21c4:	37 95       	ror	r19
    21c6:	27 95       	ror	r18
    21c8:	a7 95       	ror	r26
    21ca:	f0 40       	sbci	r31, 0x00	; 0
    21cc:	53 95       	inc	r21
    21ce:	c9 f7       	brne	.-14     	; 0x21c2 <__addsf3x+0x52>
    21d0:	7e f4       	brtc	.+30     	; 0x21f0 <__addsf3x+0x80>
    21d2:	1f 16       	cp	r1, r31
    21d4:	ba 0b       	sbc	r27, r26
    21d6:	62 0b       	sbc	r22, r18
    21d8:	73 0b       	sbc	r23, r19
    21da:	84 0b       	sbc	r24, r20
    21dc:	ba f0       	brmi	.+46     	; 0x220c <__addsf3x+0x9c>
    21de:	91 50       	subi	r25, 0x01	; 1
    21e0:	a1 f0       	breq	.+40     	; 0x220a <__addsf3x+0x9a>
    21e2:	ff 0f       	add	r31, r31
    21e4:	bb 1f       	adc	r27, r27
    21e6:	66 1f       	adc	r22, r22
    21e8:	77 1f       	adc	r23, r23
    21ea:	88 1f       	adc	r24, r24
    21ec:	c2 f7       	brpl	.-16     	; 0x21de <__addsf3x+0x6e>
    21ee:	0e c0       	rjmp	.+28     	; 0x220c <__addsf3x+0x9c>
    21f0:	ba 0f       	add	r27, r26
    21f2:	62 1f       	adc	r22, r18
    21f4:	73 1f       	adc	r23, r19
    21f6:	84 1f       	adc	r24, r20
    21f8:	48 f4       	brcc	.+18     	; 0x220c <__addsf3x+0x9c>
    21fa:	87 95       	ror	r24
    21fc:	77 95       	ror	r23
    21fe:	67 95       	ror	r22
    2200:	b7 95       	ror	r27
    2202:	f7 95       	ror	r31
    2204:	9e 3f       	cpi	r25, 0xFE	; 254
    2206:	08 f0       	brcs	.+2      	; 0x220a <__addsf3x+0x9a>
    2208:	b0 cf       	rjmp	.-160    	; 0x216a <__addsf3+0x28>
    220a:	93 95       	inc	r25
    220c:	88 0f       	add	r24, r24
    220e:	08 f0       	brcs	.+2      	; 0x2212 <__addsf3x+0xa2>
    2210:	99 27       	eor	r25, r25
    2212:	ee 0f       	add	r30, r30
    2214:	97 95       	ror	r25
    2216:	87 95       	ror	r24
    2218:	08 95       	ret

0000221a <__fixsfsi>:
    221a:	0e 94 14 11 	call	0x2228	; 0x2228 <__fixunssfsi>
    221e:	68 94       	set
    2220:	b1 11       	cpse	r27, r1
    2222:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__fp_szero>
    2226:	08 95       	ret

00002228 <__fixunssfsi>:
    2228:	0e 94 b0 11 	call	0x2360	; 0x2360 <__fp_splitA>
    222c:	88 f0       	brcs	.+34     	; 0x2250 <__fixunssfsi+0x28>
    222e:	9f 57       	subi	r25, 0x7F	; 127
    2230:	98 f0       	brcs	.+38     	; 0x2258 <__fixunssfsi+0x30>
    2232:	b9 2f       	mov	r27, r25
    2234:	99 27       	eor	r25, r25
    2236:	b7 51       	subi	r27, 0x17	; 23
    2238:	b0 f0       	brcs	.+44     	; 0x2266 <__fixunssfsi+0x3e>
    223a:	e1 f0       	breq	.+56     	; 0x2274 <__fixunssfsi+0x4c>
    223c:	66 0f       	add	r22, r22
    223e:	77 1f       	adc	r23, r23
    2240:	88 1f       	adc	r24, r24
    2242:	99 1f       	adc	r25, r25
    2244:	1a f0       	brmi	.+6      	; 0x224c <__fixunssfsi+0x24>
    2246:	ba 95       	dec	r27
    2248:	c9 f7       	brne	.-14     	; 0x223c <__fixunssfsi+0x14>
    224a:	14 c0       	rjmp	.+40     	; 0x2274 <__fixunssfsi+0x4c>
    224c:	b1 30       	cpi	r27, 0x01	; 1
    224e:	91 f0       	breq	.+36     	; 0x2274 <__fixunssfsi+0x4c>
    2250:	0e 94 ca 11 	call	0x2394	; 0x2394 <__fp_zero>
    2254:	b1 e0       	ldi	r27, 0x01	; 1
    2256:	08 95       	ret
    2258:	0c 94 ca 11 	jmp	0x2394	; 0x2394 <__fp_zero>
    225c:	67 2f       	mov	r22, r23
    225e:	78 2f       	mov	r23, r24
    2260:	88 27       	eor	r24, r24
    2262:	b8 5f       	subi	r27, 0xF8	; 248
    2264:	39 f0       	breq	.+14     	; 0x2274 <__fixunssfsi+0x4c>
    2266:	b9 3f       	cpi	r27, 0xF9	; 249
    2268:	cc f3       	brlt	.-14     	; 0x225c <__fixunssfsi+0x34>
    226a:	86 95       	lsr	r24
    226c:	77 95       	ror	r23
    226e:	67 95       	ror	r22
    2270:	b3 95       	inc	r27
    2272:	d9 f7       	brne	.-10     	; 0x226a <__fixunssfsi+0x42>
    2274:	3e f4       	brtc	.+14     	; 0x2284 <__fixunssfsi+0x5c>
    2276:	90 95       	com	r25
    2278:	80 95       	com	r24
    227a:	70 95       	com	r23
    227c:	61 95       	neg	r22
    227e:	7f 4f       	sbci	r23, 0xFF	; 255
    2280:	8f 4f       	sbci	r24, 0xFF	; 255
    2282:	9f 4f       	sbci	r25, 0xFF	; 255
    2284:	08 95       	ret

00002286 <__floatunsisf>:
    2286:	e8 94       	clt
    2288:	09 c0       	rjmp	.+18     	; 0x229c <__floatsisf+0x12>

0000228a <__floatsisf>:
    228a:	97 fb       	bst	r25, 7
    228c:	3e f4       	brtc	.+14     	; 0x229c <__floatsisf+0x12>
    228e:	90 95       	com	r25
    2290:	80 95       	com	r24
    2292:	70 95       	com	r23
    2294:	61 95       	neg	r22
    2296:	7f 4f       	sbci	r23, 0xFF	; 255
    2298:	8f 4f       	sbci	r24, 0xFF	; 255
    229a:	9f 4f       	sbci	r25, 0xFF	; 255
    229c:	99 23       	and	r25, r25
    229e:	a9 f0       	breq	.+42     	; 0x22ca <__floatsisf+0x40>
    22a0:	f9 2f       	mov	r31, r25
    22a2:	96 e9       	ldi	r25, 0x96	; 150
    22a4:	bb 27       	eor	r27, r27
    22a6:	93 95       	inc	r25
    22a8:	f6 95       	lsr	r31
    22aa:	87 95       	ror	r24
    22ac:	77 95       	ror	r23
    22ae:	67 95       	ror	r22
    22b0:	b7 95       	ror	r27
    22b2:	f1 11       	cpse	r31, r1
    22b4:	f8 cf       	rjmp	.-16     	; 0x22a6 <__floatsisf+0x1c>
    22b6:	fa f4       	brpl	.+62     	; 0x22f6 <__floatsisf+0x6c>
    22b8:	bb 0f       	add	r27, r27
    22ba:	11 f4       	brne	.+4      	; 0x22c0 <__floatsisf+0x36>
    22bc:	60 ff       	sbrs	r22, 0
    22be:	1b c0       	rjmp	.+54     	; 0x22f6 <__floatsisf+0x6c>
    22c0:	6f 5f       	subi	r22, 0xFF	; 255
    22c2:	7f 4f       	sbci	r23, 0xFF	; 255
    22c4:	8f 4f       	sbci	r24, 0xFF	; 255
    22c6:	9f 4f       	sbci	r25, 0xFF	; 255
    22c8:	16 c0       	rjmp	.+44     	; 0x22f6 <__floatsisf+0x6c>
    22ca:	88 23       	and	r24, r24
    22cc:	11 f0       	breq	.+4      	; 0x22d2 <__floatsisf+0x48>
    22ce:	96 e9       	ldi	r25, 0x96	; 150
    22d0:	11 c0       	rjmp	.+34     	; 0x22f4 <__floatsisf+0x6a>
    22d2:	77 23       	and	r23, r23
    22d4:	21 f0       	breq	.+8      	; 0x22de <__floatsisf+0x54>
    22d6:	9e e8       	ldi	r25, 0x8E	; 142
    22d8:	87 2f       	mov	r24, r23
    22da:	76 2f       	mov	r23, r22
    22dc:	05 c0       	rjmp	.+10     	; 0x22e8 <__floatsisf+0x5e>
    22de:	66 23       	and	r22, r22
    22e0:	71 f0       	breq	.+28     	; 0x22fe <__floatsisf+0x74>
    22e2:	96 e8       	ldi	r25, 0x86	; 134
    22e4:	86 2f       	mov	r24, r22
    22e6:	70 e0       	ldi	r23, 0x00	; 0
    22e8:	60 e0       	ldi	r22, 0x00	; 0
    22ea:	2a f0       	brmi	.+10     	; 0x22f6 <__floatsisf+0x6c>
    22ec:	9a 95       	dec	r25
    22ee:	66 0f       	add	r22, r22
    22f0:	77 1f       	adc	r23, r23
    22f2:	88 1f       	adc	r24, r24
    22f4:	da f7       	brpl	.-10     	; 0x22ec <__floatsisf+0x62>
    22f6:	88 0f       	add	r24, r24
    22f8:	96 95       	lsr	r25
    22fa:	87 95       	ror	r24
    22fc:	97 f9       	bld	r25, 7
    22fe:	08 95       	ret

00002300 <__fp_inf>:
    2300:	97 f9       	bld	r25, 7
    2302:	9f 67       	ori	r25, 0x7F	; 127
    2304:	80 e8       	ldi	r24, 0x80	; 128
    2306:	70 e0       	ldi	r23, 0x00	; 0
    2308:	60 e0       	ldi	r22, 0x00	; 0
    230a:	08 95       	ret

0000230c <__fp_nan>:
    230c:	9f ef       	ldi	r25, 0xFF	; 255
    230e:	80 ec       	ldi	r24, 0xC0	; 192
    2310:	08 95       	ret

00002312 <__fp_pscA>:
    2312:	00 24       	eor	r0, r0
    2314:	0a 94       	dec	r0
    2316:	16 16       	cp	r1, r22
    2318:	17 06       	cpc	r1, r23
    231a:	18 06       	cpc	r1, r24
    231c:	09 06       	cpc	r0, r25
    231e:	08 95       	ret

00002320 <__fp_pscB>:
    2320:	00 24       	eor	r0, r0
    2322:	0a 94       	dec	r0
    2324:	12 16       	cp	r1, r18
    2326:	13 06       	cpc	r1, r19
    2328:	14 06       	cpc	r1, r20
    232a:	05 06       	cpc	r0, r21
    232c:	08 95       	ret

0000232e <__fp_round>:
    232e:	09 2e       	mov	r0, r25
    2330:	03 94       	inc	r0
    2332:	00 0c       	add	r0, r0
    2334:	11 f4       	brne	.+4      	; 0x233a <__fp_round+0xc>
    2336:	88 23       	and	r24, r24
    2338:	52 f0       	brmi	.+20     	; 0x234e <__fp_round+0x20>
    233a:	bb 0f       	add	r27, r27
    233c:	40 f4       	brcc	.+16     	; 0x234e <__fp_round+0x20>
    233e:	bf 2b       	or	r27, r31
    2340:	11 f4       	brne	.+4      	; 0x2346 <__fp_round+0x18>
    2342:	60 ff       	sbrs	r22, 0
    2344:	04 c0       	rjmp	.+8      	; 0x234e <__fp_round+0x20>
    2346:	6f 5f       	subi	r22, 0xFF	; 255
    2348:	7f 4f       	sbci	r23, 0xFF	; 255
    234a:	8f 4f       	sbci	r24, 0xFF	; 255
    234c:	9f 4f       	sbci	r25, 0xFF	; 255
    234e:	08 95       	ret

00002350 <__fp_split3>:
    2350:	57 fd       	sbrc	r21, 7
    2352:	90 58       	subi	r25, 0x80	; 128
    2354:	44 0f       	add	r20, r20
    2356:	55 1f       	adc	r21, r21
    2358:	59 f0       	breq	.+22     	; 0x2370 <__fp_splitA+0x10>
    235a:	5f 3f       	cpi	r21, 0xFF	; 255
    235c:	71 f0       	breq	.+28     	; 0x237a <__fp_splitA+0x1a>
    235e:	47 95       	ror	r20

00002360 <__fp_splitA>:
    2360:	88 0f       	add	r24, r24
    2362:	97 fb       	bst	r25, 7
    2364:	99 1f       	adc	r25, r25
    2366:	61 f0       	breq	.+24     	; 0x2380 <__fp_splitA+0x20>
    2368:	9f 3f       	cpi	r25, 0xFF	; 255
    236a:	79 f0       	breq	.+30     	; 0x238a <__fp_splitA+0x2a>
    236c:	87 95       	ror	r24
    236e:	08 95       	ret
    2370:	12 16       	cp	r1, r18
    2372:	13 06       	cpc	r1, r19
    2374:	14 06       	cpc	r1, r20
    2376:	55 1f       	adc	r21, r21
    2378:	f2 cf       	rjmp	.-28     	; 0x235e <__fp_split3+0xe>
    237a:	46 95       	lsr	r20
    237c:	f1 df       	rcall	.-30     	; 0x2360 <__fp_splitA>
    237e:	08 c0       	rjmp	.+16     	; 0x2390 <__fp_splitA+0x30>
    2380:	16 16       	cp	r1, r22
    2382:	17 06       	cpc	r1, r23
    2384:	18 06       	cpc	r1, r24
    2386:	99 1f       	adc	r25, r25
    2388:	f1 cf       	rjmp	.-30     	; 0x236c <__fp_splitA+0xc>
    238a:	86 95       	lsr	r24
    238c:	71 05       	cpc	r23, r1
    238e:	61 05       	cpc	r22, r1
    2390:	08 94       	sec
    2392:	08 95       	ret

00002394 <__fp_zero>:
    2394:	e8 94       	clt

00002396 <__fp_szero>:
    2396:	bb 27       	eor	r27, r27
    2398:	66 27       	eor	r22, r22
    239a:	77 27       	eor	r23, r23
    239c:	cb 01       	movw	r24, r22
    239e:	97 f9       	bld	r25, 7
    23a0:	08 95       	ret

000023a2 <__mulsf3>:
    23a2:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__mulsf3x>
    23a6:	0c 94 97 11 	jmp	0x232e	; 0x232e <__fp_round>
    23aa:	0e 94 89 11 	call	0x2312	; 0x2312 <__fp_pscA>
    23ae:	38 f0       	brcs	.+14     	; 0x23be <__mulsf3+0x1c>
    23b0:	0e 94 90 11 	call	0x2320	; 0x2320 <__fp_pscB>
    23b4:	20 f0       	brcs	.+8      	; 0x23be <__mulsf3+0x1c>
    23b6:	95 23       	and	r25, r21
    23b8:	11 f0       	breq	.+4      	; 0x23be <__mulsf3+0x1c>
    23ba:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__fp_inf>
    23be:	0c 94 86 11 	jmp	0x230c	; 0x230c <__fp_nan>
    23c2:	11 24       	eor	r1, r1
    23c4:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__fp_szero>

000023c8 <__mulsf3x>:
    23c8:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fp_split3>
    23cc:	70 f3       	brcs	.-36     	; 0x23aa <__mulsf3+0x8>

000023ce <__mulsf3_pse>:
    23ce:	95 9f       	mul	r25, r21
    23d0:	c1 f3       	breq	.-16     	; 0x23c2 <__mulsf3+0x20>
    23d2:	95 0f       	add	r25, r21
    23d4:	50 e0       	ldi	r21, 0x00	; 0
    23d6:	55 1f       	adc	r21, r21
    23d8:	62 9f       	mul	r22, r18
    23da:	f0 01       	movw	r30, r0
    23dc:	72 9f       	mul	r23, r18
    23de:	bb 27       	eor	r27, r27
    23e0:	f0 0d       	add	r31, r0
    23e2:	b1 1d       	adc	r27, r1
    23e4:	63 9f       	mul	r22, r19
    23e6:	aa 27       	eor	r26, r26
    23e8:	f0 0d       	add	r31, r0
    23ea:	b1 1d       	adc	r27, r1
    23ec:	aa 1f       	adc	r26, r26
    23ee:	64 9f       	mul	r22, r20
    23f0:	66 27       	eor	r22, r22
    23f2:	b0 0d       	add	r27, r0
    23f4:	a1 1d       	adc	r26, r1
    23f6:	66 1f       	adc	r22, r22
    23f8:	82 9f       	mul	r24, r18
    23fa:	22 27       	eor	r18, r18
    23fc:	b0 0d       	add	r27, r0
    23fe:	a1 1d       	adc	r26, r1
    2400:	62 1f       	adc	r22, r18
    2402:	73 9f       	mul	r23, r19
    2404:	b0 0d       	add	r27, r0
    2406:	a1 1d       	adc	r26, r1
    2408:	62 1f       	adc	r22, r18
    240a:	83 9f       	mul	r24, r19
    240c:	a0 0d       	add	r26, r0
    240e:	61 1d       	adc	r22, r1
    2410:	22 1f       	adc	r18, r18
    2412:	74 9f       	mul	r23, r20
    2414:	33 27       	eor	r19, r19
    2416:	a0 0d       	add	r26, r0
    2418:	61 1d       	adc	r22, r1
    241a:	23 1f       	adc	r18, r19
    241c:	84 9f       	mul	r24, r20
    241e:	60 0d       	add	r22, r0
    2420:	21 1d       	adc	r18, r1
    2422:	82 2f       	mov	r24, r18
    2424:	76 2f       	mov	r23, r22
    2426:	6a 2f       	mov	r22, r26
    2428:	11 24       	eor	r1, r1
    242a:	9f 57       	subi	r25, 0x7F	; 127
    242c:	50 40       	sbci	r21, 0x00	; 0
    242e:	9a f0       	brmi	.+38     	; 0x2456 <__mulsf3_pse+0x88>
    2430:	f1 f0       	breq	.+60     	; 0x246e <__mulsf3_pse+0xa0>
    2432:	88 23       	and	r24, r24
    2434:	4a f0       	brmi	.+18     	; 0x2448 <__mulsf3_pse+0x7a>
    2436:	ee 0f       	add	r30, r30
    2438:	ff 1f       	adc	r31, r31
    243a:	bb 1f       	adc	r27, r27
    243c:	66 1f       	adc	r22, r22
    243e:	77 1f       	adc	r23, r23
    2440:	88 1f       	adc	r24, r24
    2442:	91 50       	subi	r25, 0x01	; 1
    2444:	50 40       	sbci	r21, 0x00	; 0
    2446:	a9 f7       	brne	.-22     	; 0x2432 <__mulsf3_pse+0x64>
    2448:	9e 3f       	cpi	r25, 0xFE	; 254
    244a:	51 05       	cpc	r21, r1
    244c:	80 f0       	brcs	.+32     	; 0x246e <__mulsf3_pse+0xa0>
    244e:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__fp_inf>
    2452:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__fp_szero>
    2456:	5f 3f       	cpi	r21, 0xFF	; 255
    2458:	e4 f3       	brlt	.-8      	; 0x2452 <__mulsf3_pse+0x84>
    245a:	98 3e       	cpi	r25, 0xE8	; 232
    245c:	d4 f3       	brlt	.-12     	; 0x2452 <__mulsf3_pse+0x84>
    245e:	86 95       	lsr	r24
    2460:	77 95       	ror	r23
    2462:	67 95       	ror	r22
    2464:	b7 95       	ror	r27
    2466:	f7 95       	ror	r31
    2468:	e7 95       	ror	r30
    246a:	9f 5f       	subi	r25, 0xFF	; 255
    246c:	c1 f7       	brne	.-16     	; 0x245e <__mulsf3_pse+0x90>
    246e:	fe 2b       	or	r31, r30
    2470:	88 0f       	add	r24, r24
    2472:	91 1d       	adc	r25, r1
    2474:	96 95       	lsr	r25
    2476:	87 95       	ror	r24
    2478:	97 f9       	bld	r25, 7
    247a:	08 95       	ret

0000247c <strcat>:
    247c:	fb 01       	movw	r30, r22
    247e:	dc 01       	movw	r26, r24
    2480:	0d 90       	ld	r0, X+
    2482:	00 20       	and	r0, r0
    2484:	e9 f7       	brne	.-6      	; 0x2480 <strcat+0x4>
    2486:	11 97       	sbiw	r26, 0x01	; 1
    2488:	01 90       	ld	r0, Z+
    248a:	0d 92       	st	X+, r0
    248c:	00 20       	and	r0, r0
    248e:	e1 f7       	brne	.-8      	; 0x2488 <strcat+0xc>
    2490:	08 95       	ret

00002492 <strcpy>:
    2492:	fb 01       	movw	r30, r22
    2494:	dc 01       	movw	r26, r24
    2496:	01 90       	ld	r0, Z+
    2498:	0d 92       	st	X+, r0
    249a:	00 20       	and	r0, r0
    249c:	e1 f7       	brne	.-8      	; 0x2496 <strcpy+0x4>
    249e:	08 95       	ret

000024a0 <__itoa_ncheck>:
    24a0:	bb 27       	eor	r27, r27
    24a2:	4a 30       	cpi	r20, 0x0A	; 10
    24a4:	31 f4       	brne	.+12     	; 0x24b2 <__itoa_ncheck+0x12>
    24a6:	99 23       	and	r25, r25
    24a8:	22 f4       	brpl	.+8      	; 0x24b2 <__itoa_ncheck+0x12>
    24aa:	bd e2       	ldi	r27, 0x2D	; 45
    24ac:	90 95       	com	r25
    24ae:	81 95       	neg	r24
    24b0:	9f 4f       	sbci	r25, 0xFF	; 255
    24b2:	0c 94 5c 12 	jmp	0x24b8	; 0x24b8 <__utoa_common>

000024b6 <__utoa_ncheck>:
    24b6:	bb 27       	eor	r27, r27

000024b8 <__utoa_common>:
    24b8:	fb 01       	movw	r30, r22
    24ba:	55 27       	eor	r21, r21
    24bc:	aa 27       	eor	r26, r26
    24be:	88 0f       	add	r24, r24
    24c0:	99 1f       	adc	r25, r25
    24c2:	aa 1f       	adc	r26, r26
    24c4:	a4 17       	cp	r26, r20
    24c6:	10 f0       	brcs	.+4      	; 0x24cc <__utoa_common+0x14>
    24c8:	a4 1b       	sub	r26, r20
    24ca:	83 95       	inc	r24
    24cc:	50 51       	subi	r21, 0x10	; 16
    24ce:	b9 f7       	brne	.-18     	; 0x24be <__utoa_common+0x6>
    24d0:	a0 5d       	subi	r26, 0xD0	; 208
    24d2:	aa 33       	cpi	r26, 0x3A	; 58
    24d4:	08 f0       	brcs	.+2      	; 0x24d8 <__utoa_common+0x20>
    24d6:	a9 5d       	subi	r26, 0xD9	; 217
    24d8:	a1 93       	st	Z+, r26
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	79 f7       	brne	.-34     	; 0x24bc <__utoa_common+0x4>
    24de:	b1 11       	cpse	r27, r1
    24e0:	b1 93       	st	Z+, r27
    24e2:	11 92       	st	Z+, r1
    24e4:	cb 01       	movw	r24, r22
    24e6:	0c 94 75 12 	jmp	0x24ea	; 0x24ea <strrev>

000024ea <strrev>:
    24ea:	dc 01       	movw	r26, r24
    24ec:	fc 01       	movw	r30, r24
    24ee:	67 2f       	mov	r22, r23
    24f0:	71 91       	ld	r23, Z+
    24f2:	77 23       	and	r23, r23
    24f4:	e1 f7       	brne	.-8      	; 0x24ee <strrev+0x4>
    24f6:	32 97       	sbiw	r30, 0x02	; 2
    24f8:	04 c0       	rjmp	.+8      	; 0x2502 <strrev+0x18>
    24fa:	7c 91       	ld	r23, X
    24fc:	6d 93       	st	X+, r22
    24fe:	70 83       	st	Z, r23
    2500:	62 91       	ld	r22, -Z
    2502:	ae 17       	cp	r26, r30
    2504:	bf 07       	cpc	r27, r31
    2506:	c8 f3       	brcs	.-14     	; 0x24fa <strrev+0x10>
    2508:	08 95       	ret

0000250a <_exit>:
    250a:	f8 94       	cli

0000250c <__stop_program>:
    250c:	ff cf       	rjmp	.-2      	; 0x250c <__stop_program>
