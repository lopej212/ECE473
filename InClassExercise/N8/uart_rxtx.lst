
uart_rxtx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000e0c  00000ea0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e9  0080010e  0080010e  00000eae  2**0
                  ALLOC
  3 .stab         000029ac  00000000  00000000  00000eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013b0  00000000  00000000  0000385c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004c0c  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004c20  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  00004c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  000053dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00005af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  00005b0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_18>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e0       	ldi	r30, 0x0C	; 12
  a0:	fe e0       	ldi	r31, 0x0E	; 14
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 3f       	cpi	r26, 0xF7	; 247
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 0c 06 	call	0xc18	; 0xc18 <main>
  c6:	0c 94 04 07 	jmp	0xe08	; 0xe08 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <spi_init>:
char              lcd_str_array[16];  //holds string to send to lcd
uint8_t           send_seq=0;         //transmit sequence number
char              lcd_string[3];      //holds value of sequence number

void spi_init(void){
  DDRB   = DDRB | 0x07;           //Turn on SS, MOSI, SCLK pins
  ce:	87 b3       	in	r24, 0x17	; 23
  d0:	87 60       	ori	r24, 0x07	; 7
  d2:	87 bb       	out	0x17, r24	; 23
  SPCR  |= (1<<SPE) | (1<<MSTR);  //set up SPI mode
  d4:	8d b1       	in	r24, 0x0d	; 13
  d6:	80 65       	ori	r24, 0x50	; 80
  d8:	8d b9       	out	0x0d, r24	; 13
  SPSR  |= (1<<SPI2X);            //run at double speed
  da:	70 9a       	sbi	0x0e, 0	; 14
  dc:	08 95       	ret

000000de <__vector_18>:
    send_seq=(send_seq%20);
//**************  end tx portion ***************
  }//while
}//main

ISR(USART0_RX_vect){
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	0b b6       	in	r0, 0x3b	; 59
  ea:	0f 92       	push	r0
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31
static  uint8_t  i;
  rx_char = UDR0;              //get character
  f4:	8c b1       	in	r24, 0x0c	; 12
  f6:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <rx_char>
  lcd_str_array[i++]=rx_char;  //store in array
  fa:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <i.2110>
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	9e 0f       	add	r25, r30
 102:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <i.2110>
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	ea 5e       	subi	r30, 0xEA	; 234
 10a:	fe 4f       	sbci	r31, 0xFE	; 254
 10c:	80 83       	st	Z, r24
 //if entire string has arrived, set flag, reset index
  if(rx_char == '\0'){
 10e:	81 11       	cpse	r24, r1
 110:	09 c0       	rjmp	.+18     	; 0x124 <__vector_18+0x46>
    rcv_rdy=1;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <rcv_rdy>
    lcd_str_array[--i]  = (' ');     //clear the count field
 118:	80 e2       	ldi	r24, 0x20	; 32
 11a:	80 83       	st	Z, r24
    lcd_str_array[i+1]  = (' ');
 11c:	81 83       	std	Z+1, r24	; 0x01
    lcd_str_array[i+2]  = (' ');
 11e:	82 83       	std	Z+2, r24	; 0x02
    i=0;
 120:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <i.2110>
  }
}
 124:	ff 91       	pop	r31
 126:	ef 91       	pop	r30
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	0f 90       	pop	r0
 12e:	0b be       	out	0x3b, r0	; 59
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 13a:	5d 9b       	sbis	0x0b, 5	; 11
 13c:	fe cf       	rjmp	.-4      	; 0x13a <uart_putc>
    UDR0 = data;    // Send data byte
 13e:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 140:	5d 9b       	sbis	0x0b, 5	; 11
 142:	fe cf       	rjmp	.-4      	; 0x140 <uart_putc+0x6>
}
 144:	08 95       	ret

00000146 <uart1_putc>:
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
 146:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 14a:	95 ff       	sbrs	r25, 5
 14c:	fc cf       	rjmp	.-8      	; 0x146 <uart1_putc>
    UDR1 = data;    // Send data byte
 14e:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
 152:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 156:	85 ff       	sbrs	r24, 5
 158:	fc cf       	rjmp	.-8      	; 0x152 <uart1_putc+0xc>
}
 15a:	08 95       	ret

0000015c <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
 15c:	fc 01       	movw	r30, r24
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 15e:	90 81       	ld	r25, Z
 160:	99 23       	and	r25, r25
 162:	49 f0       	breq	.+18     	; 0x176 <uart_puts+0x1a>
 164:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 166:	5d 9b       	sbis	0x0b, 5	; 11
 168:	fe cf       	rjmp	.-4      	; 0x166 <uart_puts+0xa>
    UDR0 = data;    // Send data byte
 16a:	9c b9       	out	0x0c, r25	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 16c:	5d 9b       	sbis	0x0b, 5	; 11
 16e:	fe cf       	rjmp	.-4      	; 0x16c <uart_puts+0x10>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 170:	91 91       	ld	r25, Z+
 172:	91 11       	cpse	r25, r1
 174:	f8 cf       	rjmp	.-16     	; 0x166 <uart_puts+0xa>
 176:	08 95       	ret

00000178 <uart1_puts>:
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 178:	fc 01       	movw	r30, r24
 17a:	20 81       	ld	r18, Z
 17c:	22 23       	and	r18, r18
 17e:	71 f0       	breq	.+28     	; 0x19c <uart1_puts+0x24>
 180:	31 96       	adiw	r30, 0x01	; 1
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
 182:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 186:	95 ff       	sbrs	r25, 5
 188:	fc cf       	rjmp	.-8      	; 0x182 <uart1_puts+0xa>
    UDR1 = data;    // Send data byte
 18a:	20 93 9c 00 	sts	0x009C, r18	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
 18e:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 192:	95 ff       	sbrs	r25, 5
 194:	fc cf       	rjmp	.-8      	; 0x18e <uart1_puts+0x16>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 196:	21 91       	ld	r18, Z+
 198:	21 11       	cpse	r18, r1
 19a:	f3 cf       	rjmp	.-26     	; 0x182 <uart1_puts+0xa>
 19c:	08 95       	ret

0000019e <uart_puts_p>:
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
 19e:	9c 01       	movw	r18, r24
 1a0:	fc 01       	movw	r30, r24
 1a2:	44 91       	lpm	r20, Z
 1a4:	44 23       	and	r20, r20
 1a6:	69 f0       	breq	.+26     	; 0x1c2 <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	f9 01       	movw	r30, r18
 1ac:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 1ae:	5d 9b       	sbis	0x0b, 5	; 11
 1b0:	fe cf       	rjmp	.-4      	; 0x1ae <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
 1b2:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 1b4:	5d 9b       	sbis	0x0b, 5	; 11
 1b6:	fe cf       	rjmp	.-4      	; 0x1b4 <uart_puts_p+0x16>
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
 1b8:	9c 01       	movw	r18, r24
 1ba:	fc 01       	movw	r30, r24
 1bc:	44 91       	lpm	r20, Z
 1be:	41 11       	cpse	r20, r1
 1c0:	f3 cf       	rjmp	.-26     	; 0x1a8 <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
 1c2:	08 95       	ret

000001c4 <uart_init>:
//Jumpers J14 and J16 (mega128.1) or Jumpers J7 and J9 (mega128.2)
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); //INTERRUPTS ENABLED
 1c4:	8a b1       	in	r24, 0x0a	; 10
 1c6:	88 69       	ori	r24, 0x98	; 152
 1c8:	8a b9       	out	0x0a, r24	; 10
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);               //INTERRUPS DISABLED

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 1ca:	e5 e9       	ldi	r30, 0x95	; 149
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	86 60       	ori	r24, 0x06	; 6
 1d2:	80 83       	st	Z, r24
  UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
 1d4:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
 1d8:	87 e6       	ldi	r24, 0x67	; 103
 1da:	89 b9       	out	0x09, r24	; 9
 1dc:	08 95       	ret

000001de <uart1_init>:
//must be in place for the MAX232 chip to get data.

void uart1_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
//UCSR1B |= (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1); //INTERRUPTS ENABLED
  UCSR1B |= (1<<RXEN1) | (1<<TXEN1);               //INTERRUPS DISABLED
 1de:	ea e9       	ldi	r30, 0x9A	; 154
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	88 61       	ori	r24, 0x18	; 24
 1e6:	80 83       	st	Z, r24

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);
 1e8:	ed e9       	ldi	r30, 0x9D	; 157
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	86 60       	ori	r24, 0x06	; 6
 1f0:	80 83       	st	Z, r24
  UBRR1H = (BAUDVALUE_1 >>8 ); //load upper byte of the baud rate into UBRR 
 1f2:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
  UBRR1L =  BAUDVALUE_1;       //load lower byte of the baud rate into UBRR 
 1f6:	87 e6       	ldi	r24, 0x67	; 103
 1f8:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 1fc:	08 95       	ret

000001fe <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
 1fe:	80 e8       	ldi	r24, 0x80	; 128
 200:	9e e3       	ldi	r25, 0x3E	; 62
 202:	02 c0       	rjmp	.+4      	; 0x208 <uart_getc+0xa>
 204:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
 206:	21 f0       	breq	.+8      	; 0x210 <uart_getc+0x12>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
 208:	5f 9b       	sbis	0x0b, 7	; 11
 20a:	fc cf       	rjmp	.-8      	; 0x204 <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
 20c:	8c b1       	in	r24, 0x0c	; 12
 20e:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
 210:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
 212:	08 95       	ret

00000214 <uart1_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
 214:	80 e8       	ldi	r24, 0x80	; 128
 216:	9e e3       	ldi	r25, 0x3E	; 62
 218:	02 c0       	rjmp	.+4      	; 0x21e <uart1_getc+0xa>
 21a:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
 21c:	39 f0       	breq	.+14     	; 0x22c <uart1_getc+0x18>
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
 21e:	20 91 9b 00 	lds	r18, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 222:	27 ff       	sbrs	r18, 7
 224:	fa cf       	rjmp	.-12     	; 0x21a <uart1_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
 226:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 22a:	08 95       	ret
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
  timer++;
  if(timer >= 16000){ return(0);}
 22c:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
}
 22e:	08 95       	ret

00000230 <send_lcd>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	81 11       	cpse	r24, r1
 234:	01 c0       	rjmp	.+2      	; 0x238 <send_lcd+0x8>
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 23a:	77 9b       	sbis	0x0e, 7	; 14
 23c:	fe cf       	rjmp	.-4      	; 0x23a <send_lcd+0xa>
  SPDR = byte;                        //send payload
 23e:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 240:	77 9b       	sbis	0x0e, 7	; 14
 242:	fe cf       	rjmp	.-4      	; 0x240 <send_lcd+0x10>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 244:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 248:	88 60       	ori	r24, 0x08	; 8
 24a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 24e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 252:	87 7f       	andi	r24, 0xF7	; 247
 254:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 258:	8f e9       	ldi	r24, 0x9F	; 159
 25a:	9f e0       	ldi	r25, 0x0F	; 15
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <send_lcd+0x2c>
 260:	00 c0       	rjmp	.+0      	; 0x262 <send_lcd+0x32>
 262:	00 00       	nop
 264:	08 95       	ret

00000266 <refresh_lcd>:

void refresh_lcd(char lcd_string_array[]) {

    static uint8_t index=0;           // index into string array 

    SPDR = 0x01; //set SR for data
 266:	21 e0       	ldi	r18, 0x01	; 1
 268:	2f b9       	out	0x0f, r18	; 15
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
 26a:	77 9b       	sbis	0x0e, 7	; 14
 26c:	fe cf       	rjmp	.-4      	; 0x26a <refresh_lcd+0x4>
    SPDR = lcd_string_array[index];
 26e:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <index.2091>
 272:	fc 01       	movw	r30, r24
 274:	e2 0f       	add	r30, r18
 276:	f1 1d       	adc	r31, r1
 278:	80 81       	ld	r24, Z
 27a:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
 27c:	77 9b       	sbis	0x0e, 7	; 14
 27e:	fe cf       	rjmp	.-4      	; 0x27c <refresh_lcd+0x16>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 280:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 284:	88 60       	ori	r24, 0x08	; 8
 286:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 28a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 28e:	87 7f       	andi	r24, 0xF7	; 247
 290:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    SPDR = 0x01; //set SR for data
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
    SPDR = lcd_string_array[index];
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
    strobe_lcd();                   //write into LCD
    index++;                        //increment to next character
 294:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <index.2091>
 298:	8f 5f       	subi	r24, 0xFF	; 255
 29a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <index.2091>
    if(index == 16) {_delay_us(40); home_line2();}           //on to 2nd line, 1st position 
 29e:	80 31       	cpi	r24, 0x10	; 16
 2a0:	09 f1       	breq	.+66     	; 0x2e4 <refresh_lcd+0x7e>
    if(index == 32) {_delay_us(40); cursor_home(); index=0;} //back to 1st line, 1st position
 2a2:	80 32       	cpi	r24, 0x20	; 32
 2a4:	09 f0       	breq	.+2      	; 0x2a8 <refresh_lcd+0x42>
 2a6:	08 95       	ret
 2a8:	95 ed       	ldi	r25, 0xD5	; 213
 2aa:	9a 95       	dec	r25
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <refresh_lcd+0x44>
 2ae:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 2b0:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 2b2:	77 9b       	sbis	0x0e, 7	; 14
 2b4:	fe cf       	rjmp	.-4      	; 0x2b2 <refresh_lcd+0x4c>
  SPDR = byte;                        //send payload
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 2ba:	77 9b       	sbis	0x0e, 7	; 14
 2bc:	fe cf       	rjmp	.-4      	; 0x2ba <refresh_lcd+0x54>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 2be:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2c2:	88 60       	ori	r24, 0x08	; 8
 2c4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2c8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2cc:	87 7f       	andi	r24, 0xF7	; 247
 2ce:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2d2:	8f e9       	ldi	r24, 0x9F	; 159
 2d4:	9f e0       	ldi	r25, 0x0F	; 15
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <refresh_lcd+0x70>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <refresh_lcd+0x76>
 2dc:	00 00       	nop
    SPDR = lcd_string_array[index];
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
    strobe_lcd();                   //write into LCD
    index++;                        //increment to next character
    if(index == 16) {_delay_us(40); home_line2();}           //on to 2nd line, 1st position 
    if(index == 32) {_delay_us(40); cursor_home(); index=0;} //back to 1st line, 1st position
 2de:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <index.2091>
 2e2:	08 95       	ret
 2e4:	85 ed       	ldi	r24, 0xD5	; 213
 2e6:	8a 95       	dec	r24
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <refresh_lcd+0x80>
 2ea:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 2ec:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 2ee:	77 9b       	sbis	0x0e, 7	; 14
 2f0:	fe cf       	rjmp	.-4      	; 0x2ee <refresh_lcd+0x88>
  SPDR = byte;                        //send payload
 2f2:	80 ec       	ldi	r24, 0xC0	; 192
 2f4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 2f6:	77 9b       	sbis	0x0e, 7	; 14
 2f8:	fe cf       	rjmp	.-4      	; 0x2f6 <refresh_lcd+0x90>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 2fa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2fe:	88 60       	ori	r24, 0x08	; 8
 300:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 304:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 308:	87 7f       	andi	r24, 0xF7	; 247
 30a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 30e:	8f e9       	ldi	r24, 0x9F	; 159
 310:	9f e0       	ldi	r25, 0x0F	; 15
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <refresh_lcd+0xac>
 316:	00 c0       	rjmp	.+0      	; 0x318 <refresh_lcd+0xb2>
 318:	00 00       	nop
 31a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <index.2091>
 31e:	c1 cf       	rjmp	.-126    	; 0x2a2 <refresh_lcd+0x3c>

00000320 <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3), 1000);  //only needs 40uS!
 320:	66 0f       	add	r22, r22
 322:	66 0f       	add	r22, r22
 324:	66 0f       	add	r22, r22
 326:	60 5c       	subi	r22, 0xC0	; 192
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 328:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 32a:	77 9b       	sbis	0x0e, 7	; 14
 32c:	fe cf       	rjmp	.-4      	; 0x32a <set_custom_character+0xa>
  SPDR = byte;                        //send payload
 32e:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 330:	77 9b       	sbis	0x0e, 7	; 14
 332:	fe cf       	rjmp	.-4      	; 0x330 <set_custom_character+0x10>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 334:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 338:	28 60       	ori	r18, 0x08	; 8
 33a:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 33e:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 342:	27 7f       	andi	r18, 0xF7	; 247
 344:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 348:	af e9       	ldi	r26, 0x9F	; 159
 34a:	bf e0       	ldi	r27, 0x0F	; 15
 34c:	11 97       	sbiw	r26, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <set_custom_character+0x2c>
 350:	00 c0       	rjmp	.+0      	; 0x352 <set_custom_character+0x32>
 352:	00 00       	nop
 354:	fc 01       	movw	r30, r24
 356:	9c 01       	movw	r18, r24
 358:	28 5f       	subi	r18, 0xF8	; 248
 35a:	3f 4f       	sbci	r19, 0xFF	; 255
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 35c:	91 e0       	ldi	r25, 0x01	; 1
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3), 1000);  //only needs 40uS!
    for(i=0; i<8; i++){send_lcd(CHAR_BYTE, data[i], 100);}
 35e:	81 91       	ld	r24, Z+
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 360:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 362:	77 9b       	sbis	0x0e, 7	; 14
 364:	fe cf       	rjmp	.-4      	; 0x362 <set_custom_character+0x42>
  SPDR = byte;                        //send payload
 366:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 368:	77 9b       	sbis	0x0e, 7	; 14
 36a:	fe cf       	rjmp	.-4      	; 0x368 <set_custom_character+0x48>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 36c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 370:	88 60       	ori	r24, 0x08	; 8
 372:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 376:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 37a:	87 7f       	andi	r24, 0xF7	; 247
 37c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 380:	af e9       	ldi	r26, 0x9F	; 159
 382:	bf e0       	ldi	r27, 0x0F	; 15
 384:	11 97       	sbiw	r26, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <set_custom_character+0x64>
 388:	00 c0       	rjmp	.+0      	; 0x38a <set_custom_character+0x6a>
 38a:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3), 1000);  //only needs 40uS!
    for(i=0; i<8; i++){send_lcd(CHAR_BYTE, data[i], 100);}
 38c:	e2 17       	cp	r30, r18
 38e:	f3 07       	cpc	r31, r19
 390:	31 f7       	brne	.-52     	; 0x35e <set_custom_character+0x3e>
}
 392:	08 95       	ret

00000394 <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40), 1000);
 394:	90 e4       	ldi	r25, 0x40	; 64
 396:	89 9f       	mul	r24, r25
 398:	60 0d       	add	r22, r0
 39a:	11 24       	eor	r1, r1
 39c:	60 5c       	subi	r22, 0xC0	; 192
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 39e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3a0:	77 9b       	sbis	0x0e, 7	; 14
 3a2:	fe cf       	rjmp	.-4      	; 0x3a0 <set_cursor+0xc>
  SPDR = byte;                        //send payload
 3a4:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3a6:	77 9b       	sbis	0x0e, 7	; 14
 3a8:	fe cf       	rjmp	.-4      	; 0x3a6 <set_cursor+0x12>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 3aa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3ae:	88 60       	ori	r24, 0x08	; 8
 3b0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3b4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3b8:	87 7f       	andi	r24, 0xF7	; 247
 3ba:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3be:	8f e9       	ldi	r24, 0x9F	; 159
 3c0:	9f e0       	ldi	r25, 0x0F	; 15
 3c2:	01 97       	sbiw	r24, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <set_cursor+0x2e>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <set_cursor+0x34>
 3c8:	00 00       	nop
 3ca:	08 95       	ret

000003cc <uint2lcd>:
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: does not display the number zero!  (FIXED 8.30.2014)
//
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
 3cc:	81 11       	cpse	r24, r1
 3ce:	19 c0       	rjmp	.+50     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3d4:	77 9b       	sbis	0x0e, 7	; 14
 3d6:	fe cf       	rjmp	.-4      	; 0x3d4 <uint2lcd+0x8>
  SPDR = byte;                        //send payload
 3d8:	80 e3       	ldi	r24, 0x30	; 48
 3da:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3dc:	77 9b       	sbis	0x0e, 7	; 14
 3de:	fe cf       	rjmp	.-4      	; 0x3dc <uint2lcd+0x10>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 3e0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3e4:	88 60       	ori	r24, 0x08	; 8
 3e6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3ea:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3ee:	87 7f       	andi	r24, 0xF7	; 247
 3f0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3f4:	8f e9       	ldi	r24, 0x9F	; 159
 3f6:	9f e0       	ldi	r25, 0x0F	; 15
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <uint2lcd+0x2c>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <uint2lcd+0x32>
 3fe:	00 00       	nop
 400:	08 95       	ret
//TODO: does not display the number zero!  (FIXED 8.30.2014)
//
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
 402:	84 36       	cpi	r24, 0x64	; 100
 404:	b0 f4       	brcc	.+44     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10, 100); }
 406:	8a 30       	cpi	r24, 0x0A	; 10
 408:	90 f5       	brcc	.+100    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 40a:	91 e0       	ldi	r25, 0x01	; 1
 40c:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 40e:	77 9b       	sbis	0x0e, 7	; 14
 410:	fe cf       	rjmp	.-4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10, 100); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    , 100); }
 412:	9d ec       	ldi	r25, 0xCD	; 205
 414:	89 9f       	mul	r24, r25
 416:	91 2d       	mov	r25, r1
 418:	11 24       	eor	r1, r1
 41a:	96 95       	lsr	r25
 41c:	96 95       	lsr	r25
 41e:	96 95       	lsr	r25
 420:	fa e0       	ldi	r31, 0x0A	; 10
 422:	9f 9f       	mul	r25, r31
 424:	80 19       	sub	r24, r0
 426:	11 24       	eor	r1, r1
 428:	80 5d       	subi	r24, 0xD0	; 208


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
 42a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 42c:	77 9b       	sbis	0x0e, 7	; 14
 42e:	fe cf       	rjmp	.-4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 430:	d7 cf       	rjmp	.-82     	; 0x3e0 <uint2lcd+0x14>
//TODO: does not display the number zero!  (FIXED 8.30.2014)
//
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
 432:	99 e2       	ldi	r25, 0x29	; 41
 434:	89 9f       	mul	r24, r25
 436:	91 2d       	mov	r25, r1
 438:	11 24       	eor	r1, r1
 43a:	92 95       	swap	r25
 43c:	9f 70       	andi	r25, 0x0F	; 15
 43e:	90 5d       	subi	r25, 0xD0	; 208
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 440:	21 e0       	ldi	r18, 0x01	; 1
 442:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 444:	77 9b       	sbis	0x0e, 7	; 14
 446:	fe cf       	rjmp	.-4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
  SPDR = byte;                        //send payload
 448:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 44a:	77 9b       	sbis	0x0e, 7	; 14
 44c:	fe cf       	rjmp	.-4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 44e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 452:	98 60       	ori	r25, 0x08	; 8
 454:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 458:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 45c:	97 7f       	andi	r25, 0xF7	; 247
 45e:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 462:	ef e9       	ldi	r30, 0x9F	; 159
 464:	ff e0       	ldi	r31, 0x0F	; 15
 466:	31 97       	sbiw	r30, 0x01	; 1
 468:	f1 f7       	brne	.-4      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 46c:	00 00       	nop
//
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10, 100); }
 46e:	99 e2       	ldi	r25, 0x29	; 41
 470:	89 9f       	mul	r24, r25
 472:	91 2d       	mov	r25, r1
 474:	11 24       	eor	r1, r1
 476:	92 95       	swap	r25
 478:	9f 70       	andi	r25, 0x0F	; 15
 47a:	28 2f       	mov	r18, r24
 47c:	f4 e6       	ldi	r31, 0x64	; 100
 47e:	9f 9f       	mul	r25, r31
 480:	20 19       	sub	r18, r0
 482:	11 24       	eor	r1, r1
 484:	92 2f       	mov	r25, r18
 486:	2d ec       	ldi	r18, 0xCD	; 205
 488:	92 9f       	mul	r25, r18
 48a:	91 2d       	mov	r25, r1
 48c:	11 24       	eor	r1, r1
 48e:	96 95       	lsr	r25
 490:	96 95       	lsr	r25
 492:	96 95       	lsr	r25
 494:	90 5d       	subi	r25, 0xD0	; 208
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 496:	21 e0       	ldi	r18, 0x01	; 1
 498:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 49a:	77 9b       	sbis	0x0e, 7	; 14
 49c:	fe cf       	rjmp	.-4      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
  SPDR = byte;                        //send payload
 49e:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4a0:	77 9b       	sbis	0x0e, 7	; 14
 4a2:	fe cf       	rjmp	.-4      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 4a4:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4a8:	98 60       	ori	r25, 0x08	; 8
 4aa:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4ae:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4b2:	97 7f       	andi	r25, 0xF7	; 247
 4b4:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4b8:	ef e9       	ldi	r30, 0x9F	; 159
 4ba:	ff e0       	ldi	r31, 0x0F	; 15
 4bc:	31 97       	sbiw	r30, 0x01	; 1
 4be:	f1 f7       	brne	.-4      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4c2:	00 00       	nop
 4c4:	a2 cf       	rjmp	.-188    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>

000004c6 <int2lcd>:
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    if(number < 0){send_lcd(CHAR_BYTE, '-', 100); uint2lcd(~number+1);}    //take 2's complement of number and display
 4c6:	87 ff       	sbrs	r24, 7
    else                                    {uint2lcd(number);}
 4c8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <uint2lcd>
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 4cc:	91 e0       	ldi	r25, 0x01	; 1
 4ce:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4d0:	77 9b       	sbis	0x0e, 7	; 14
 4d2:	fe cf       	rjmp	.-4      	; 0x4d0 <int2lcd+0xa>
  SPDR = byte;                        //send payload
 4d4:	9d e2       	ldi	r25, 0x2D	; 45
 4d6:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4d8:	77 9b       	sbis	0x0e, 7	; 14
 4da:	fe cf       	rjmp	.-4      	; 0x4d8 <int2lcd+0x12>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 4dc:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4e0:	98 60       	ori	r25, 0x08	; 8
 4e2:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4e6:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4ea:	97 7f       	andi	r25, 0xF7	; 247
 4ec:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4f0:	ef e9       	ldi	r30, 0x9F	; 159
 4f2:	ff e0       	ldi	r31, 0x0F	; 15
 4f4:	31 97       	sbiw	r30, 0x01	; 1
 4f6:	f1 f7       	brne	.-4      	; 0x4f4 <int2lcd+0x2e>
 4f8:	00 c0       	rjmp	.+0      	; 0x4fa <int2lcd+0x34>
 4fa:	00 00       	nop
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    if(number < 0){send_lcd(CHAR_BYTE, '-', 100); uint2lcd(~number+1);}    //take 2's complement of number and display
 4fc:	81 95       	neg	r24
 4fe:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <uint2lcd>

00000502 <cursor_on>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 502:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 504:	77 9b       	sbis	0x0e, 7	; 14
 506:	fe cf       	rjmp	.-4      	; 0x504 <cursor_on+0x2>
  SPDR = byte;                        //send payload
 508:	8e e0       	ldi	r24, 0x0E	; 14
 50a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 50c:	77 9b       	sbis	0x0e, 7	; 14
 50e:	fe cf       	rjmp	.-4      	; 0x50c <cursor_on+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 510:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 514:	88 60       	ori	r24, 0x08	; 8
 516:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 51a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 51e:	87 7f       	andi	r24, 0xF7	; 247
 520:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 524:	8f e9       	ldi	r24, 0x9F	; 159
 526:	9f e0       	ldi	r25, 0x0F	; 15
 528:	01 97       	sbiw	r24, 0x01	; 1
 52a:	f1 f7       	brne	.-4      	; 0x528 <cursor_on+0x26>
 52c:	00 c0       	rjmp	.+0      	; 0x52e <cursor_on+0x2c>
 52e:	00 00       	nop
 530:	08 95       	ret

00000532 <cursor_off>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 532:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 534:	77 9b       	sbis	0x0e, 7	; 14
 536:	fe cf       	rjmp	.-4      	; 0x534 <cursor_off+0x2>
  SPDR = byte;                        //send payload
 538:	8c e0       	ldi	r24, 0x0C	; 12
 53a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 53c:	77 9b       	sbis	0x0e, 7	; 14
 53e:	fe cf       	rjmp	.-4      	; 0x53c <cursor_off+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 540:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 544:	88 60       	ori	r24, 0x08	; 8
 546:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 54a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 54e:	87 7f       	andi	r24, 0xF7	; 247
 550:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 554:	8f e9       	ldi	r24, 0x9F	; 159
 556:	9f e0       	ldi	r25, 0x0F	; 15
 558:	01 97       	sbiw	r24, 0x01	; 1
 55a:	f1 f7       	brne	.-4      	; 0x558 <cursor_off+0x26>
 55c:	00 c0       	rjmp	.+0      	; 0x55e <cursor_off+0x2c>
 55e:	00 00       	nop
 560:	08 95       	ret

00000562 <shift_right>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 562:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 564:	77 9b       	sbis	0x0e, 7	; 14
 566:	fe cf       	rjmp	.-4      	; 0x564 <shift_right+0x2>
  SPDR = byte;                        //send payload
 568:	8e e1       	ldi	r24, 0x1E	; 30
 56a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 56c:	77 9b       	sbis	0x0e, 7	; 14
 56e:	fe cf       	rjmp	.-4      	; 0x56c <shift_right+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 570:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 574:	88 60       	ori	r24, 0x08	; 8
 576:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 57a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 57e:	87 7f       	andi	r24, 0xF7	; 247
 580:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 584:	8f e9       	ldi	r24, 0x9F	; 159
 586:	9f e0       	ldi	r25, 0x0F	; 15
 588:	01 97       	sbiw	r24, 0x01	; 1
 58a:	f1 f7       	brne	.-4      	; 0x588 <shift_right+0x26>
 58c:	00 c0       	rjmp	.+0      	; 0x58e <shift_right+0x2c>
 58e:	00 00       	nop
 590:	08 95       	ret

00000592 <shift_left>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 592:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 594:	77 9b       	sbis	0x0e, 7	; 14
 596:	fe cf       	rjmp	.-4      	; 0x594 <shift_left+0x2>
  SPDR = byte;                        //send payload
 598:	88 e1       	ldi	r24, 0x18	; 24
 59a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 59c:	77 9b       	sbis	0x0e, 7	; 14
 59e:	fe cf       	rjmp	.-4      	; 0x59c <shift_left+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 5a0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5a4:	88 60       	ori	r24, 0x08	; 8
 5a6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5aa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5ae:	87 7f       	andi	r24, 0xF7	; 247
 5b0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5b4:	8f e9       	ldi	r24, 0x9F	; 159
 5b6:	9f e0       	ldi	r25, 0x0F	; 15
 5b8:	01 97       	sbiw	r24, 0x01	; 1
 5ba:	f1 f7       	brne	.-4      	; 0x5b8 <shift_left+0x26>
 5bc:	00 c0       	rjmp	.+0      	; 0x5be <shift_left+0x2c>
 5be:	00 00       	nop
 5c0:	08 95       	ret

000005c2 <strobe_lcd>:
 5c2:	e2 e6       	ldi	r30, 0x62	; 98
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	80 81       	ld	r24, Z
 5c8:	88 60       	ori	r24, 0x08	; 8
 5ca:	80 83       	st	Z, r24
 5cc:	80 81       	ld	r24, Z
 5ce:	87 7f       	andi	r24, 0xF7	; 247
 5d0:	80 83       	st	Z, r24
 5d2:	08 95       	ret

000005d4 <clear_display>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 5d4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5d6:	77 9b       	sbis	0x0e, 7	; 14
 5d8:	fe cf       	rjmp	.-4      	; 0x5d6 <clear_display+0x2>
  SPDR = byte;                        //send payload
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5de:	77 9b       	sbis	0x0e, 7	; 14
 5e0:	fe cf       	rjmp	.-4      	; 0x5de <clear_display+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 5e2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5e6:	88 60       	ori	r24, 0x08	; 8
 5e8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5ec:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5f0:	87 7f       	andi	r24, 0xF7	; 247
 5f2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5f6:	8f e9       	ldi	r24, 0x9F	; 159
 5f8:	9f e0       	ldi	r25, 0x0F	; 15
 5fa:	01 97       	sbiw	r24, 0x01	; 1
 5fc:	f1 f7       	brne	.-4      	; 0x5fa <clear_display+0x26>
 5fe:	00 c0       	rjmp	.+0      	; 0x600 <clear_display+0x2c>
 600:	00 00       	nop
 602:	08 95       	ret

00000604 <cursor_home>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 604:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 606:	77 9b       	sbis	0x0e, 7	; 14
 608:	fe cf       	rjmp	.-4      	; 0x606 <cursor_home+0x2>
  SPDR = byte;                        //send payload
 60a:	82 e0       	ldi	r24, 0x02	; 2
 60c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 60e:	77 9b       	sbis	0x0e, 7	; 14
 610:	fe cf       	rjmp	.-4      	; 0x60e <cursor_home+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 612:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 616:	88 60       	ori	r24, 0x08	; 8
 618:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 61c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 620:	87 7f       	andi	r24, 0xF7	; 247
 622:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 626:	8f e9       	ldi	r24, 0x9F	; 159
 628:	9f e0       	ldi	r25, 0x0F	; 15
 62a:	01 97       	sbiw	r24, 0x01	; 1
 62c:	f1 f7       	brne	.-4      	; 0x62a <cursor_home+0x26>
 62e:	00 c0       	rjmp	.+0      	; 0x630 <cursor_home+0x2c>
 630:	00 00       	nop
 632:	08 95       	ret

00000634 <home_line2>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 634:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 636:	77 9b       	sbis	0x0e, 7	; 14
 638:	fe cf       	rjmp	.-4      	; 0x636 <home_line2+0x2>
  SPDR = byte;                        //send payload
 63a:	80 ec       	ldi	r24, 0xC0	; 192
 63c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 63e:	77 9b       	sbis	0x0e, 7	; 14
 640:	fe cf       	rjmp	.-4      	; 0x63e <home_line2+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 642:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 646:	88 60       	ori	r24, 0x08	; 8
 648:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 64c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 650:	87 7f       	andi	r24, 0xF7	; 247
 652:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 656:	8f e9       	ldi	r24, 0x9F	; 159
 658:	9f e0       	ldi	r25, 0x0F	; 15
 65a:	01 97       	sbiw	r24, 0x01	; 1
 65c:	f1 f7       	brne	.-4      	; 0x65a <home_line2+0x26>
 65e:	00 c0       	rjmp	.+0      	; 0x660 <home_line2+0x2c>
 660:	00 00       	nop
 662:	08 95       	ret

00000664 <fill_spaces>:
 
//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
 664:	90 e1       	ldi	r25, 0x10	; 16
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 666:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
 668:	20 e2       	ldi	r18, 0x20	; 32
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 66a:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 66c:	77 9b       	sbis	0x0e, 7	; 14
 66e:	fe cf       	rjmp	.-4      	; 0x66c <fill_spaces+0x8>
  SPDR = byte;                        //send payload
 670:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 672:	77 9b       	sbis	0x0e, 7	; 14
 674:	fe cf       	rjmp	.-4      	; 0x672 <fill_spaces+0xe>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 676:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 67a:	88 60       	ori	r24, 0x08	; 8
 67c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 680:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 684:	87 7f       	andi	r24, 0xF7	; 247
 686:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 68a:	ef e9       	ldi	r30, 0x9F	; 159
 68c:	ff e0       	ldi	r31, 0x0F	; 15
 68e:	31 97       	sbiw	r30, 0x01	; 1
 690:	f1 f7       	brne	.-4      	; 0x68e <fill_spaces+0x2a>
 692:	00 c0       	rjmp	.+0      	; 0x694 <fill_spaces+0x30>
 694:	00 00       	nop
 696:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
 698:	41 f7       	brne	.-48     	; 0x66a <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' ',100); //100us wait between characters
	}
}  
 69a:	08 95       	ret

0000069c <char2lcd>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 69c:	91 e0       	ldi	r25, 0x01	; 1
 69e:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6a0:	77 9b       	sbis	0x0e, 7	; 14
 6a2:	fe cf       	rjmp	.-4      	; 0x6a0 <char2lcd+0x4>
  SPDR = byte;                        //send payload
 6a4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6a6:	77 9b       	sbis	0x0e, 7	; 14
 6a8:	fe cf       	rjmp	.-4      	; 0x6a6 <char2lcd+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 6aa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6ae:	88 60       	ori	r24, 0x08	; 8
 6b0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6b4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6b8:	87 7f       	andi	r24, 0xF7	; 247
 6ba:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6be:	8f e9       	ldi	r24, 0x9F	; 159
 6c0:	9f e0       	ldi	r25, 0x0F	; 15
 6c2:	01 97       	sbiw	r24, 0x01	; 1
 6c4:	f1 f7       	brne	.-4      	; 0x6c2 <char2lcd+0x26>
 6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <char2lcd+0x2c>
 6c8:	00 00       	nop
 6ca:	08 95       	ret

000006cc <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
 6cc:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i], 100);}                  
 6ce:	40 e0       	ldi	r20, 0x00	; 0
 6d0:	50 e0       	ldi	r21, 0x00	; 0
 6d2:	60 e0       	ldi	r22, 0x00	; 0
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 6d4:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i], 100);}                  
 6d6:	df 01       	movw	r26, r30
 6d8:	a4 0f       	add	r26, r20
 6da:	b5 1f       	adc	r27, r21
 6dc:	8c 91       	ld	r24, X
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 6de:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6e0:	77 9b       	sbis	0x0e, 7	; 14
 6e2:	fe cf       	rjmp	.-4      	; 0x6e0 <string2lcd+0x14>
  SPDR = byte;                        //send payload
 6e4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6e6:	77 9b       	sbis	0x0e, 7	; 14
 6e8:	fe cf       	rjmp	.-4      	; 0x6e6 <string2lcd+0x1a>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 6ea:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6ee:	98 60       	ori	r25, 0x08	; 8
 6f0:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6f4:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6f8:	97 7f       	andi	r25, 0xF7	; 247
 6fa:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6fe:	8f e9       	ldi	r24, 0x9F	; 159
 700:	9f e0       	ldi	r25, 0x0F	; 15
 702:	01 97       	sbiw	r24, 0x01	; 1
 704:	f1 f7       	brne	.-4      	; 0x702 <string2lcd+0x36>
 706:	00 c0       	rjmp	.+0      	; 0x708 <string2lcd+0x3c>
 708:	00 00       	nop
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i], 100);}                  
 70a:	6f 5f       	subi	r22, 0xFF	; 255
 70c:	46 2f       	mov	r20, r22
 70e:	50 e0       	ldi	r21, 0x00	; 0
 710:	df 01       	movw	r26, r30
 712:	0d 90       	ld	r0, X+
 714:	00 20       	and	r0, r0
 716:	e9 f7       	brne	.-6      	; 0x712 <string2lcd+0x46>
 718:	9d 01       	movw	r18, r26
 71a:	2e 1b       	sub	r18, r30
 71c:	3f 0b       	sbc	r19, r31
 71e:	22 50       	subi	r18, 0x02	; 2
 720:	31 09       	sbc	r19, r1
 722:	24 17       	cp	r18, r20
 724:	35 07       	cpc	r19, r21
 726:	b8 f6       	brcc	.-82     	; 0x6d6 <string2lcd+0xa>
} 
 728:	08 95       	ret

0000072a <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 72a:	8f ef       	ldi	r24, 0xFF	; 255
 72c:	99 ef       	ldi	r25, 0xF9	; 249
 72e:	01 97       	sbiw	r24, 0x01	; 1
 730:	f1 f7       	brne	.-4      	; 0x72e <lcd_init+0x4>
 732:	00 c0       	rjmp	.+0      	; 0x734 <lcd_init+0xa>
 734:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! should not be here.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
 736:	88 e0       	ldi	r24, 0x08	; 8
 738:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 73c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 73e:	77 9b       	sbis	0x0e, 7	; 14
 740:	fe cf       	rjmp	.-4      	; 0x73e <lcd_init+0x14>
  SPDR = byte;                        //send payload
 742:	80 e3       	ldi	r24, 0x30	; 48
 744:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 746:	77 9b       	sbis	0x0e, 7	; 14
 748:	fe cf       	rjmp	.-4      	; 0x746 <lcd_init+0x1c>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 74a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 74e:	88 60       	ori	r24, 0x08	; 8
 750:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 754:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 758:	87 7f       	andi	r24, 0xF7	; 247
 75a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 75e:	8f e9       	ldi	r24, 0x9F	; 159
 760:	9f e0       	ldi	r25, 0x0F	; 15
 762:	01 97       	sbiw	r24, 0x01	; 1
 764:	f1 f7       	brne	.-4      	; 0x762 <lcd_init+0x38>
 766:	00 c0       	rjmp	.+0      	; 0x768 <lcd_init+0x3e>
 768:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 76a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 76c:	77 9b       	sbis	0x0e, 7	; 14
 76e:	fe cf       	rjmp	.-4      	; 0x76c <lcd_init+0x42>
  SPDR = byte;                        //send payload
 770:	80 e3       	ldi	r24, 0x30	; 48
 772:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 774:	77 9b       	sbis	0x0e, 7	; 14
 776:	fe cf       	rjmp	.-4      	; 0x774 <lcd_init+0x4a>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 778:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 77c:	88 60       	ori	r24, 0x08	; 8
 77e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 782:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 786:	87 7f       	andi	r24, 0xF7	; 247
 788:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 78c:	8f e9       	ldi	r24, 0x9F	; 159
 78e:	9f e0       	ldi	r25, 0x0F	; 15
 790:	01 97       	sbiw	r24, 0x01	; 1
 792:	f1 f7       	brne	.-4      	; 0x790 <lcd_init+0x66>
 794:	00 c0       	rjmp	.+0      	; 0x796 <lcd_init+0x6c>
 796:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 798:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 79a:	77 9b       	sbis	0x0e, 7	; 14
 79c:	fe cf       	rjmp	.-4      	; 0x79a <lcd_init+0x70>
  SPDR = byte;                        //send payload
 79e:	80 e3       	ldi	r24, 0x30	; 48
 7a0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 7a2:	77 9b       	sbis	0x0e, 7	; 14
 7a4:	fe cf       	rjmp	.-4      	; 0x7a2 <lcd_init+0x78>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 7a6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7aa:	88 60       	ori	r24, 0x08	; 8
 7ac:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7b0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7b4:	87 7f       	andi	r24, 0xF7	; 247
 7b6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7ba:	8f e9       	ldi	r24, 0x9F	; 159
 7bc:	9f e0       	ldi	r25, 0x0F	; 15
 7be:	01 97       	sbiw	r24, 0x01	; 1
 7c0:	f1 f7       	brne	.-4      	; 0x7be <lcd_init+0x94>
 7c2:	00 c0       	rjmp	.+0      	; 0x7c4 <lcd_init+0x9a>
 7c4:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 7c6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 7c8:	77 9b       	sbis	0x0e, 7	; 14
 7ca:	fe cf       	rjmp	.-4      	; 0x7c8 <lcd_init+0x9e>
  SPDR = byte;                        //send payload
 7cc:	88 e3       	ldi	r24, 0x38	; 56
 7ce:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 7d0:	77 9b       	sbis	0x0e, 7	; 14
 7d2:	fe cf       	rjmp	.-4      	; 0x7d0 <lcd_init+0xa6>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 7d4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7d8:	88 60       	ori	r24, 0x08	; 8
 7da:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7e2:	87 7f       	andi	r24, 0xF7	; 247
 7e4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7e8:	8f e9       	ldi	r24, 0x9F	; 159
 7ea:	9f e0       	ldi	r25, 0x0F	; 15
 7ec:	01 97       	sbiw	r24, 0x01	; 1
 7ee:	f1 f7       	brne	.-4      	; 0x7ec <lcd_init+0xc2>
 7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <lcd_init+0xc8>
 7f2:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 7f4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 7f6:	77 9b       	sbis	0x0e, 7	; 14
 7f8:	fe cf       	rjmp	.-4      	; 0x7f6 <lcd_init+0xcc>
  SPDR = byte;                        //send payload
 7fa:	88 e0       	ldi	r24, 0x08	; 8
 7fc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 7fe:	77 9b       	sbis	0x0e, 7	; 14
 800:	fe cf       	rjmp	.-4      	; 0x7fe <lcd_init+0xd4>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 802:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 806:	88 60       	ori	r24, 0x08	; 8
 808:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 80c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 810:	87 7f       	andi	r24, 0xF7	; 247
 812:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 816:	8f e9       	ldi	r24, 0x9F	; 159
 818:	9f e0       	ldi	r25, 0x0F	; 15
 81a:	01 97       	sbiw	r24, 0x01	; 1
 81c:	f1 f7       	brne	.-4      	; 0x81a <lcd_init+0xf0>
 81e:	00 c0       	rjmp	.+0      	; 0x820 <lcd_init+0xf6>
 820:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 822:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 824:	77 9b       	sbis	0x0e, 7	; 14
 826:	fe cf       	rjmp	.-4      	; 0x824 <lcd_init+0xfa>
  SPDR = byte;                        //send payload
 828:	81 e0       	ldi	r24, 0x01	; 1
 82a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 82c:	77 9b       	sbis	0x0e, 7	; 14
 82e:	fe cf       	rjmp	.-4      	; 0x82c <lcd_init+0x102>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 830:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 834:	88 60       	ori	r24, 0x08	; 8
 836:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 83a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 83e:	87 7f       	andi	r24, 0xF7	; 247
 840:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 844:	8f e9       	ldi	r24, 0x9F	; 159
 846:	9f e0       	ldi	r25, 0x0F	; 15
 848:	01 97       	sbiw	r24, 0x01	; 1
 84a:	f1 f7       	brne	.-4      	; 0x848 <lcd_init+0x11e>
 84c:	00 c0       	rjmp	.+0      	; 0x84e <lcd_init+0x124>
 84e:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 850:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 852:	77 9b       	sbis	0x0e, 7	; 14
 854:	fe cf       	rjmp	.-4      	; 0x852 <lcd_init+0x128>
  SPDR = byte;                        //send payload
 856:	86 e0       	ldi	r24, 0x06	; 6
 858:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 85a:	77 9b       	sbis	0x0e, 7	; 14
 85c:	fe cf       	rjmp	.-4      	; 0x85a <lcd_init+0x130>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 85e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 862:	88 60       	ori	r24, 0x08	; 8
 864:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 868:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 86c:	87 7f       	andi	r24, 0xF7	; 247
 86e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 872:	8f e9       	ldi	r24, 0x9F	; 159
 874:	9f e0       	ldi	r25, 0x0F	; 15
 876:	01 97       	sbiw	r24, 0x01	; 1
 878:	f1 f7       	brne	.-4      	; 0x876 <lcd_init+0x14c>
 87a:	00 c0       	rjmp	.+0      	; 0x87c <lcd_init+0x152>
 87c:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 87e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 880:	77 9b       	sbis	0x0e, 7	; 14
 882:	fe cf       	rjmp	.-4      	; 0x880 <lcd_init+0x156>
  SPDR = byte;                        //send payload
 884:	8c e0       	ldi	r24, 0x0C	; 12
 886:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 888:	77 9b       	sbis	0x0e, 7	; 14
 88a:	fe cf       	rjmp	.-4      	; 0x888 <lcd_init+0x15e>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 88c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 890:	88 60       	ori	r24, 0x08	; 8
 892:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 896:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 89a:	87 7f       	andi	r24, 0xF7	; 247
 89c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 8a0:	8f e9       	ldi	r24, 0x9F	; 159
 8a2:	9f e0       	ldi	r25, 0x0F	; 15
 8a4:	01 97       	sbiw	r24, 0x01	; 1
 8a6:	f1 f7       	brne	.-4      	; 0x8a4 <lcd_init+0x17a>
 8a8:	00 c0       	rjmp	.+0      	; 0x8aa <lcd_init+0x180>
 8aa:	00 00       	nop
 8ac:	08 95       	ret

000008ae <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
 8ae:	4f 92       	push	r4
 8b0:	5f 92       	push	r5
 8b2:	6f 92       	push	r6
 8b4:	7f 92       	push	r7
 8b6:	8f 92       	push	r8
 8b8:	9f 92       	push	r9
 8ba:	af 92       	push	r10
 8bc:	bf 92       	push	r11
 8be:	cf 92       	push	r12
 8c0:	df 92       	push	r13
 8c2:	ef 92       	push	r14
 8c4:	ff 92       	push	r15
 8c6:	0f 93       	push	r16
 8c8:	1f 93       	push	r17
 8ca:	cf 93       	push	r28
 8cc:	df 93       	push	r29
 8ce:	cd b7       	in	r28, 0x3d	; 61
 8d0:	de b7       	in	r29, 0x3e	; 62
 8d2:	69 97       	sbiw	r28, 0x19	; 25
 8d4:	0f b6       	in	r0, 0x3f	; 63
 8d6:	f8 94       	cli
 8d8:	de bf       	out	0x3e, r29	; 62
 8da:	0f be       	out	0x3f, r0	; 63
 8dc:	cd bf       	out	0x3d, r28	; 61
 8de:	14 2f       	mov	r17, r20
 8e0:	42 2e       	mov	r4, r18
 8e2:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
 8e4:	00 23       	and	r16, r16
 8e6:	79 f0       	breq	.+30     	; 0x906 <lcd_int32+0x58>
        bSigned = (qr.quot<0);
 8e8:	6b 01       	movw	r12, r22
 8ea:	7c 01       	movw	r14, r24
 8ec:	cc 24       	eor	r12, r12
 8ee:	f7 fc       	sbrc	r15, 7
 8f0:	c3 94       	inc	r12
 8f2:	dd 24       	eor	r13, r13
 8f4:	ee 24       	eor	r14, r14
 8f6:	ff 24       	eor	r15, r15
 8f8:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
 8fa:	6b 01       	movw	r12, r22
 8fc:	7c 01       	movw	r14, r24
 8fe:	97 fd       	sbrc	r25, 7
 900:	a5 c0       	rjmp	.+330    	; 0xa4c <lcd_int32+0x19e>
 902:	c7 01       	movw	r24, r14
 904:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
 906:	44 20       	and	r4, r4
 908:	09 f4       	brne	.+2      	; 0x90c <lcd_int32+0x5e>
 90a:	98 c0       	rjmp	.+304    	; 0xa3c <lcd_int32+0x18e>
 90c:	9e 01       	movw	r18, r28
 90e:	2f 5f       	subi	r18, 0xFF	; 255
 910:	3f 4f       	sbci	r19, 0xFF	; 255
 912:	59 01       	movw	r10, r18
 914:	49 01       	movw	r8, r18
 916:	66 24       	eor	r6, r6
 918:	6a 94       	dec	r6
 91a:	64 0c       	add	r6, r4
 91c:	71 2c       	mov	r7, r1
 91e:	3f ef       	ldi	r19, 0xFF	; 255
 920:	63 1a       	sub	r6, r19
 922:	73 0a       	sbc	r7, r19
 924:	6a 0c       	add	r6, r10
 926:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
 928:	2a e0       	ldi	r18, 0x0A	; 10
 92a:	30 e0       	ldi	r19, 0x00	; 0
 92c:	40 e0       	ldi	r20, 0x00	; 0
 92e:	50 e0       	ldi	r21, 0x00	; 0
 930:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__divmodsi4>
 934:	e6 2f       	mov	r30, r22
 936:	2a 8b       	std	Y+18, r18	; 0x12
 938:	3b 8b       	std	Y+19, r19	; 0x13
 93a:	4c 8b       	std	Y+20, r20	; 0x14
 93c:	5d 8b       	std	Y+21, r21	; 0x15
 93e:	6a 89       	ldd	r22, Y+18	; 0x12
 940:	7b 89       	ldd	r23, Y+19	; 0x13
 942:	8c 89       	ldd	r24, Y+20	; 0x14
 944:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 946:	20 e3       	ldi	r18, 0x30	; 48
 948:	2e 0f       	add	r18, r30
 94a:	f4 01       	movw	r30, r8
 94c:	21 93       	st	Z+, r18
 94e:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
 950:	6e 16       	cp	r6, r30
 952:	7f 06       	cpc	r7, r31
 954:	49 f7       	brne	.-46     	; 0x928 <lcd_int32+0x7a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
 956:	99 24       	eor	r9, r9
 958:	93 94       	inc	r9
 95a:	94 0c       	add	r9, r4
 95c:	f5 01       	movw	r30, r10
 95e:	e4 0d       	add	r30, r4
 960:	f1 1d       	adc	r31, r1
 962:	2e e2       	ldi	r18, 0x2E	; 46
 964:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
 966:	2a e0       	ldi	r18, 0x0A	; 10
 968:	30 e0       	ldi	r19, 0x00	; 0
 96a:	40 e0       	ldi	r20, 0x00	; 0
 96c:	50 e0       	ldi	r21, 0x00	; 0
 96e:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__divmodsi4>
 972:	e6 2f       	mov	r30, r22
 974:	2a 8b       	std	Y+18, r18	; 0x12
 976:	3b 8b       	std	Y+19, r19	; 0x13
 978:	4c 8b       	std	Y+20, r20	; 0x14
 97a:	5d 8b       	std	Y+21, r21	; 0x15
 97c:	6e 8b       	std	Y+22, r22	; 0x16
 97e:	7f 8b       	std	Y+23, r23	; 0x17
 980:	88 8f       	std	Y+24, r24	; 0x18
 982:	99 8f       	std	Y+25, r25	; 0x19
 984:	6a 89       	ldd	r22, Y+18	; 0x12
 986:	7b 89       	ldd	r23, Y+19	; 0x13
 988:	8c 89       	ldd	r24, Y+20	; 0x14
 98a:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 98c:	31 e0       	ldi	r19, 0x01	; 1
 98e:	39 0d       	add	r19, r9
 990:	d5 01       	movw	r26, r10
 992:	a9 0d       	add	r26, r9
 994:	b1 1d       	adc	r27, r1
 996:	e0 5d       	subi	r30, 0xD0	; 208
 998:	ec 93       	st	X, r30
 99a:	93 2e       	mov	r9, r19
        }while(qr.quot);
 99c:	61 15       	cp	r22, r1
 99e:	71 05       	cpc	r23, r1
 9a0:	81 05       	cpc	r24, r1
 9a2:	91 05       	cpc	r25, r1
 9a4:	01 f7       	brne	.-64     	; 0x966 <lcd_int32+0xb8>

      // fill the whole field if a width was specified
      if (fieldwidth){
 9a6:	11 23       	and	r17, r17
 9a8:	61 f0       	breq	.+24     	; 0x9c2 <lcd_int32+0x114>
        fillch = bZeroFill? '0': ' '; // determine the fill character
 9aa:	51 10       	cpse	r5, r1
 9ac:	4d c0       	rjmp	.+154    	; 0xa48 <lcd_int32+0x19a>
 9ae:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
 9b0:	31 17       	cp	r19, r17
 9b2:	38 f4       	brcc	.+14     	; 0x9c2 <lcd_int32+0x114>
 9b4:	f5 01       	movw	r30, r10
 9b6:	e3 0f       	add	r30, r19
 9b8:	f1 1d       	adc	r31, r1
 9ba:	90 83       	st	Z, r25
 9bc:	3f 5f       	subi	r19, 0xFF	; 255
 9be:	13 13       	cpse	r17, r19
 9c0:	f9 cf       	rjmp	.-14     	; 0x9b4 <lcd_int32+0x106>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
 9c2:	00 23       	and	r16, r16
 9c4:	31 f0       	breq	.+12     	; 0x9d2 <lcd_int32+0x124>
 9c6:	f5 01       	movw	r30, r10
 9c8:	e3 0f       	add	r30, r19
 9ca:	f1 1d       	adc	r31, r1
 9cc:	9d e2       	ldi	r25, 0x2D	; 45
 9ce:	90 83       	st	Z, r25
 9d0:	3f 5f       	subi	r19, 0xFF	; 255
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 9d2:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i] , 1000);} while(i);
 9d4:	31 50       	subi	r19, 0x01	; 1
 9d6:	f5 01       	movw	r30, r10
 9d8:	e3 0f       	add	r30, r19
 9da:	f1 1d       	adc	r31, r1
 9dc:	90 81       	ld	r25, Z
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 9de:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 9e0:	77 9b       	sbis	0x0e, 7	; 14
 9e2:	fe cf       	rjmp	.-4      	; 0x9e0 <lcd_int32+0x132>
  SPDR = byte;                        //send payload
 9e4:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 9e6:	77 9b       	sbis	0x0e, 7	; 14
 9e8:	fe cf       	rjmp	.-4      	; 0x9e6 <lcd_int32+0x138>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 9ea:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 9ee:	98 60       	ori	r25, 0x08	; 8
 9f0:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 9f4:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 9f8:	97 7f       	andi	r25, 0xF7	; 247
 9fa:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 9fe:	8f e9       	ldi	r24, 0x9F	; 159
 a00:	9f e0       	ldi	r25, 0x0F	; 15
 a02:	01 97       	sbiw	r24, 0x01	; 1
 a04:	f1 f7       	brne	.-4      	; 0xa02 <lcd_int32+0x154>
 a06:	00 c0       	rjmp	.+0      	; 0xa08 <lcd_int32+0x15a>
 a08:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i] , 1000);} while(i);
 a0a:	31 11       	cpse	r19, r1
 a0c:	e3 cf       	rjmp	.-58     	; 0x9d4 <lcd_int32+0x126>

}
 a0e:	69 96       	adiw	r28, 0x19	; 25
 a10:	0f b6       	in	r0, 0x3f	; 63
 a12:	f8 94       	cli
 a14:	de bf       	out	0x3e, r29	; 62
 a16:	0f be       	out	0x3f, r0	; 63
 a18:	cd bf       	out	0x3d, r28	; 61
 a1a:	df 91       	pop	r29
 a1c:	cf 91       	pop	r28
 a1e:	1f 91       	pop	r17
 a20:	0f 91       	pop	r16
 a22:	ff 90       	pop	r15
 a24:	ef 90       	pop	r14
 a26:	df 90       	pop	r13
 a28:	cf 90       	pop	r12
 a2a:	bf 90       	pop	r11
 a2c:	af 90       	pop	r10
 a2e:	9f 90       	pop	r9
 a30:	8f 90       	pop	r8
 a32:	7f 90       	pop	r7
 a34:	6f 90       	pop	r6
 a36:	5f 90       	pop	r5
 a38:	4f 90       	pop	r4
 a3a:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
 a3c:	91 2c       	mov	r9, r1
 a3e:	9e 01       	movw	r18, r28
 a40:	2f 5f       	subi	r18, 0xFF	; 255
 a42:	3f 4f       	sbci	r19, 0xFF	; 255
 a44:	59 01       	movw	r10, r18
 a46:	8f cf       	rjmp	.-226    	; 0x966 <lcd_int32+0xb8>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
 a48:	90 e3       	ldi	r25, 0x30	; 48
 a4a:	b2 cf       	rjmp	.-156    	; 0x9b0 <lcd_int32+0x102>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
 a4c:	f0 94       	com	r15
 a4e:	e0 94       	com	r14
 a50:	d0 94       	com	r13
 a52:	c0 94       	com	r12
 a54:	c1 1c       	adc	r12, r1
 a56:	d1 1c       	adc	r13, r1
 a58:	e1 1c       	adc	r14, r1
 a5a:	f1 1c       	adc	r15, r1
 a5c:	52 cf       	rjmp	.-348    	; 0x902 <lcd_int32+0x54>

00000a5e <lcd_int16>:
 a5e:	5f 92       	push	r5
 a60:	6f 92       	push	r6
 a62:	7f 92       	push	r7
 a64:	8f 92       	push	r8
 a66:	9f 92       	push	r9
 a68:	af 92       	push	r10
 a6a:	bf 92       	push	r11
 a6c:	cf 92       	push	r12
 a6e:	df 92       	push	r13
 a70:	ef 92       	push	r14
 a72:	ff 92       	push	r15
 a74:	0f 93       	push	r16
 a76:	1f 93       	push	r17
 a78:	cf 93       	push	r28
 a7a:	df 93       	push	r29
 a7c:	cd b7       	in	r28, 0x3d	; 61
 a7e:	de b7       	in	r29, 0x3e	; 62
 a80:	61 97       	sbiw	r28, 0x11	; 17
 a82:	0f b6       	in	r0, 0x3f	; 63
 a84:	f8 94       	cli
 a86:	de bf       	out	0x3e, r29	; 62
 a88:	0f be       	out	0x3f, r0	; 63
 a8a:	cd bf       	out	0x3d, r28	; 61
 a8c:	5c 01       	movw	r10, r24
 a8e:	96 2e       	mov	r9, r22
 a90:	54 2e       	mov	r5, r20
 a92:	62 2e       	mov	r6, r18
 a94:	8b 2c       	mov	r8, r11
 a96:	88 1c       	adc	r8, r8
 a98:	88 24       	eor	r8, r8
 a9a:	88 1c       	adc	r8, r8
 a9c:	78 2c       	mov	r7, r8
 a9e:	9c 01       	movw	r18, r24
 aa0:	97 fd       	sbrc	r25, 7
 aa2:	9f c0       	rjmp	.+318    	; 0xbe2 <lcd_int16+0x184>
 aa4:	55 20       	and	r5, r5
 aa6:	09 f4       	brne	.+2      	; 0xaaa <lcd_int16+0x4c>
 aa8:	90 c0       	rjmp	.+288    	; 0xbca <lcd_int16+0x16c>
 aaa:	8e 01       	movw	r16, r28
 aac:	0f 5f       	subi	r16, 0xFF	; 255
 aae:	1f 4f       	sbci	r17, 0xFF	; 255
 ab0:	78 01       	movw	r14, r16
 ab2:	cc 24       	eor	r12, r12
 ab4:	ca 94       	dec	r12
 ab6:	c5 0c       	add	r12, r5
 ab8:	d1 2c       	mov	r13, r1
 aba:	8f ef       	ldi	r24, 0xFF	; 255
 abc:	c8 1a       	sub	r12, r24
 abe:	d8 0a       	sbc	r13, r24
 ac0:	c0 0e       	add	r12, r16
 ac2:	d1 1e       	adc	r13, r17
 ac4:	6a e0       	ldi	r22, 0x0A	; 10
 ac6:	70 e0       	ldi	r23, 0x00	; 0
 ac8:	c9 01       	movw	r24, r18
 aca:	0e 94 66 06 	call	0xccc	; 0xccc <__divmodhi4>
 ace:	46 2f       	mov	r20, r22
 ad0:	24 2f       	mov	r18, r20
 ad2:	37 2f       	mov	r19, r23
 ad4:	80 5d       	subi	r24, 0xD0	; 208
 ad6:	f7 01       	movw	r30, r14
 ad8:	81 93       	st	Z+, r24
 ada:	7f 01       	movw	r14, r30
 adc:	ec 15       	cp	r30, r12
 ade:	fd 05       	cpc	r31, r13
 ae0:	89 f7       	brne	.-30     	; 0xac4 <lcd_int16+0x66>
 ae2:	ff 24       	eor	r15, r15
 ae4:	f3 94       	inc	r15
 ae6:	f5 0c       	add	r15, r5
 ae8:	f8 01       	movw	r30, r16
 aea:	e5 0d       	add	r30, r5
 aec:	f1 1d       	adc	r31, r1
 aee:	8e e2       	ldi	r24, 0x2E	; 46
 af0:	80 83       	st	Z, r24
 af2:	01 c0       	rjmp	.+2      	; 0xaf6 <lcd_int16+0x98>
 af4:	f9 2e       	mov	r15, r25
 af6:	6a e0       	ldi	r22, 0x0A	; 10
 af8:	70 e0       	ldi	r23, 0x00	; 0
 afa:	c9 01       	movw	r24, r18
 afc:	0e 94 66 06 	call	0xccc	; 0xccc <__divmodhi4>
 b00:	46 2f       	mov	r20, r22
 b02:	24 2f       	mov	r18, r20
 b04:	37 2f       	mov	r19, r23
 b06:	91 e0       	ldi	r25, 0x01	; 1
 b08:	9f 0d       	add	r25, r15
 b0a:	f8 01       	movw	r30, r16
 b0c:	ef 0d       	add	r30, r15
 b0e:	f1 1d       	adc	r31, r1
 b10:	80 5d       	subi	r24, 0xD0	; 208
 b12:	80 83       	st	Z, r24
 b14:	21 15       	cp	r18, r1
 b16:	31 05       	cpc	r19, r1
 b18:	69 f7       	brne	.-38     	; 0xaf4 <lcd_int16+0x96>
 b1a:	61 10       	cpse	r6, r1
 b1c:	5b c0       	rjmp	.+182    	; 0xbd4 <lcd_int16+0x176>
 b1e:	b7 fc       	sbrc	r11, 7
 b20:	65 c0       	rjmp	.+202    	; 0xbec <lcd_int16+0x18e>
 b22:	99 20       	and	r9, r9
 b24:	b1 f0       	breq	.+44     	; 0xb52 <lcd_int16+0xf4>
 b26:	68 2d       	mov	r22, r8
 b28:	70 e0       	ldi	r23, 0x00	; 0
 b2a:	80 e2       	ldi	r24, 0x20	; 32
 b2c:	29 2f       	mov	r18, r25
 b2e:	30 e0       	ldi	r19, 0x00	; 0
 b30:	49 2d       	mov	r20, r9
 b32:	50 e0       	ldi	r21, 0x00	; 0
 b34:	46 1b       	sub	r20, r22
 b36:	57 0b       	sbc	r21, r23
 b38:	24 17       	cp	r18, r20
 b3a:	35 07       	cpc	r19, r21
 b3c:	54 f4       	brge	.+20     	; 0xb52 <lcd_int16+0xf4>
 b3e:	9f 5f       	subi	r25, 0xFF	; 255
 b40:	f8 01       	movw	r30, r16
 b42:	e2 0f       	add	r30, r18
 b44:	f3 1f       	adc	r31, r19
 b46:	80 83       	st	Z, r24
 b48:	29 2f       	mov	r18, r25
 b4a:	30 e0       	ldi	r19, 0x00	; 0
 b4c:	24 17       	cp	r18, r20
 b4e:	35 07       	cpc	r19, r21
 b50:	b4 f3       	brlt	.-20     	; 0xb3e <lcd_int16+0xe0>
 b52:	77 20       	and	r7, r7
 b54:	31 f0       	breq	.+12     	; 0xb62 <lcd_int16+0x104>
 b56:	f8 01       	movw	r30, r16
 b58:	e9 0f       	add	r30, r25
 b5a:	f1 1d       	adc	r31, r1
 b5c:	8d e2       	ldi	r24, 0x2D	; 45
 b5e:	80 83       	st	Z, r24
 b60:	9f 5f       	subi	r25, 0xFF	; 255
 b62:	21 e0       	ldi	r18, 0x01	; 1
 b64:	91 50       	subi	r25, 0x01	; 1
 b66:	f8 01       	movw	r30, r16
 b68:	e9 0f       	add	r30, r25
 b6a:	f1 1d       	adc	r31, r1
 b6c:	80 81       	ld	r24, Z
 b6e:	2f b9       	out	0x0f, r18	; 15
 b70:	77 9b       	sbis	0x0e, 7	; 14
 b72:	fe cf       	rjmp	.-4      	; 0xb70 <lcd_int16+0x112>
 b74:	8f b9       	out	0x0f, r24	; 15
 b76:	77 9b       	sbis	0x0e, 7	; 14
 b78:	fe cf       	rjmp	.-4      	; 0xb76 <lcd_int16+0x118>
 b7a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 b7e:	88 60       	ori	r24, 0x08	; 8
 b80:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 b84:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 b88:	87 7f       	andi	r24, 0xF7	; 247
 b8a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 b8e:	ef e9       	ldi	r30, 0x9F	; 159
 b90:	ff e0       	ldi	r31, 0x0F	; 15
 b92:	31 97       	sbiw	r30, 0x01	; 1
 b94:	f1 f7       	brne	.-4      	; 0xb92 <lcd_int16+0x134>
 b96:	00 c0       	rjmp	.+0      	; 0xb98 <lcd_int16+0x13a>
 b98:	00 00       	nop
 b9a:	91 11       	cpse	r25, r1
 b9c:	e3 cf       	rjmp	.-58     	; 0xb64 <lcd_int16+0x106>
 b9e:	61 96       	adiw	r28, 0x11	; 17
 ba0:	0f b6       	in	r0, 0x3f	; 63
 ba2:	f8 94       	cli
 ba4:	de bf       	out	0x3e, r29	; 62
 ba6:	0f be       	out	0x3f, r0	; 63
 ba8:	cd bf       	out	0x3d, r28	; 61
 baa:	df 91       	pop	r29
 bac:	cf 91       	pop	r28
 bae:	1f 91       	pop	r17
 bb0:	0f 91       	pop	r16
 bb2:	ff 90       	pop	r15
 bb4:	ef 90       	pop	r14
 bb6:	df 90       	pop	r13
 bb8:	cf 90       	pop	r12
 bba:	bf 90       	pop	r11
 bbc:	af 90       	pop	r10
 bbe:	9f 90       	pop	r9
 bc0:	8f 90       	pop	r8
 bc2:	7f 90       	pop	r7
 bc4:	6f 90       	pop	r6
 bc6:	5f 90       	pop	r5
 bc8:	08 95       	ret
 bca:	f1 2c       	mov	r15, r1
 bcc:	8e 01       	movw	r16, r28
 bce:	0f 5f       	subi	r16, 0xFF	; 255
 bd0:	1f 4f       	sbci	r17, 0xFF	; 255
 bd2:	91 cf       	rjmp	.-222    	; 0xaf6 <lcd_int16+0x98>
 bd4:	99 20       	and	r9, r9
 bd6:	09 f4       	brne	.+2      	; 0xbda <lcd_int16+0x17c>
 bd8:	bc cf       	rjmp	.-136    	; 0xb52 <lcd_int16+0xf4>
 bda:	68 2d       	mov	r22, r8
 bdc:	70 e0       	ldi	r23, 0x00	; 0
 bde:	80 e3       	ldi	r24, 0x30	; 48
 be0:	a5 cf       	rjmp	.-182    	; 0xb2c <lcd_int16+0xce>
 be2:	22 27       	eor	r18, r18
 be4:	33 27       	eor	r19, r19
 be6:	28 1b       	sub	r18, r24
 be8:	39 0b       	sbc	r19, r25
 bea:	5c cf       	rjmp	.-328    	; 0xaa4 <lcd_int16+0x46>
 bec:	f3 94       	inc	r15
 bee:	f3 94       	inc	r15
 bf0:	f8 01       	movw	r30, r16
 bf2:	e9 0f       	add	r30, r25
 bf4:	f1 1d       	adc	r31, r1
 bf6:	8d e2       	ldi	r24, 0x2D	; 45
 bf8:	80 83       	st	Z, r24
 bfa:	99 20       	and	r9, r9
 bfc:	59 f0       	breq	.+22     	; 0xc14 <lcd_int16+0x1b6>
 bfe:	2f 2d       	mov	r18, r15
 c00:	30 e0       	ldi	r19, 0x00	; 0
 c02:	49 2d       	mov	r20, r9
 c04:	50 e0       	ldi	r21, 0x00	; 0
 c06:	24 17       	cp	r18, r20
 c08:	35 07       	cpc	r19, r21
 c0a:	24 f4       	brge	.+8      	; 0xc14 <lcd_int16+0x1b6>
 c0c:	9f 2d       	mov	r25, r15
 c0e:	71 2c       	mov	r7, r1
 c10:	80 e2       	ldi	r24, 0x20	; 32
 c12:	95 cf       	rjmp	.-214    	; 0xb3e <lcd_int16+0xe0>
 c14:	9f 2d       	mov	r25, r15
 c16:	a5 cf       	rjmp	.-182    	; 0xb62 <lcd_int16+0x104>

00000c18 <main>:
  SPCR  |= (1<<SPE) | (1<<MSTR);  //set up SPI mode
  SPSR  |= (1<<SPI2X);            //run at double speed
}//spi_init

int main(){
  DDRF |= 0x08; //lcd strobe bit
 c18:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 c1c:	88 60       	ori	r24, 0x08	; 8
 c1e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  uart_init();
 c22:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <uart_init>
char              lcd_str_array[16];  //holds string to send to lcd
uint8_t           send_seq=0;         //transmit sequence number
char              lcd_string[3];      //holds value of sequence number

void spi_init(void){
  DDRB   = DDRB | 0x07;           //Turn on SS, MOSI, SCLK pins
 c26:	87 b3       	in	r24, 0x17	; 23
 c28:	87 60       	ori	r24, 0x07	; 7
 c2a:	87 bb       	out	0x17, r24	; 23
  SPCR  |= (1<<SPE) | (1<<MSTR);  //set up SPI mode
 c2c:	8d b1       	in	r24, 0x0d	; 13
 c2e:	80 65       	ori	r24, 0x50	; 80
 c30:	8d b9       	out	0x0d, r24	; 13
  SPSR  |= (1<<SPI2X);            //run at double speed
 c32:	70 9a       	sbi	0x0e, 0	; 14

int main(){
  DDRF |= 0x08; //lcd strobe bit
  uart_init();
  spi_init();
  lcd_init();
 c34:	0e 94 95 03 	call	0x72a	; 0x72a <lcd_init>
  clear_display();
 c38:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <clear_display>
  cursor_home();
 c3c:	0e 94 02 03 	call	0x604	; 0x604 <cursor_home>

  sei();
 c40:	78 94       	sei
    itoa(send_seq,lcd_string,10);
    uart_puts(lcd_string);
    uart_putc('\0');
    for(i=0;i<=9;i++){_delay_ms(100);}
    send_seq++;
    send_seq=(send_seq%20);
 c42:	cd ec       	ldi	r28, 0xCD	; 205
  cursor_home();

  sei();
  while(1){
//**************  start rcv portion ***************
      if(rcv_rdy==1){
 c44:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <rcv_rdy>
 c48:	81 30       	cpi	r24, 0x01	; 1
 c4a:	b9 f1       	breq	.+110    	; 0xcba <main+0xa2>
        cursor_home();
    }//if
//**************  end rcv portion ***************

//**************  start tx portion ***************
    uart_puts("Hi! Manuel: ");
 c4c:	80 e0       	ldi	r24, 0x00	; 0
 c4e:	91 e0       	ldi	r25, 0x01	; 1
 c50:	0e 94 ae 00 	call	0x15c	; 0x15c <uart_puts>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 c54:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 c58:	4a e0       	ldi	r20, 0x0A	; 10
 c5a:	63 e1       	ldi	r22, 0x13	; 19
 c5c:	71 e0       	ldi	r23, 0x01	; 1
 c5e:	90 e0       	ldi	r25, 0x00	; 0
 c60:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__itoa_ncheck>
    itoa(send_seq,lcd_string,10);
    uart_puts(lcd_string);
 c64:	83 e1       	ldi	r24, 0x13	; 19
 c66:	91 e0       	ldi	r25, 0x01	; 1
 c68:	0e 94 ae 00 	call	0x15c	; 0x15c <uart_puts>
    uart_putc('\0');
 c6c:	80 e0       	ldi	r24, 0x00	; 0
 c6e:	0e 94 9d 00 	call	0x13a	; 0x13a <uart_putc>
    for(i=0;i<=9;i++){_delay_ms(100);}
 c72:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <i>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 c76:	2f ef       	ldi	r18, 0xFF	; 255
 c78:	81 ee       	ldi	r24, 0xE1	; 225
 c7a:	94 e0       	ldi	r25, 0x04	; 4
 c7c:	21 50       	subi	r18, 0x01	; 1
 c7e:	80 40       	sbci	r24, 0x00	; 0
 c80:	90 40       	sbci	r25, 0x00	; 0
 c82:	e1 f7       	brne	.-8      	; 0xc7c <main+0x64>
 c84:	00 c0       	rjmp	.+0      	; 0xc86 <main+0x6e>
 c86:	00 00       	nop
 c88:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <i>
 c8c:	8f 5f       	subi	r24, 0xFF	; 255
 c8e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <i>
 c92:	8a 30       	cpi	r24, 0x0A	; 10
 c94:	80 f3       	brcs	.-32     	; 0xc76 <main+0x5e>
    send_seq++;
    send_seq=(send_seq%20);
 c96:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 c9a:	8f 5f       	subi	r24, 0xFF	; 255
 c9c:	8c 9f       	mul	r24, r28
 c9e:	91 2d       	mov	r25, r1
 ca0:	11 24       	eor	r1, r1
 ca2:	92 95       	swap	r25
 ca4:	9f 70       	andi	r25, 0x0F	; 15
 ca6:	24 e1       	ldi	r18, 0x14	; 20
 ca8:	92 9f       	mul	r25, r18
 caa:	80 19       	sub	r24, r0
 cac:	11 24       	eor	r1, r1
 cae:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
  cursor_home();

  sei();
  while(1){
//**************  start rcv portion ***************
      if(rcv_rdy==1){
 cb2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <rcv_rdy>
 cb6:	81 30       	cpi	r24, 0x01	; 1
 cb8:	49 f6       	brne	.-110    	; 0xc4c <main+0x34>
        string2lcd(lcd_str_array);  //write out string if its ready
 cba:	86 e1       	ldi	r24, 0x16	; 22
 cbc:	91 e0       	ldi	r25, 0x01	; 1
 cbe:	0e 94 66 03 	call	0x6cc	; 0x6cc <string2lcd>
        rcv_rdy=0;
 cc2:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <rcv_rdy>
        cursor_home();
 cc6:	0e 94 02 03 	call	0x604	; 0x604 <cursor_home>
 cca:	c0 cf       	rjmp	.-128    	; 0xc4c <main+0x34>

00000ccc <__divmodhi4>:
 ccc:	97 fb       	bst	r25, 7
 cce:	07 2e       	mov	r0, r23
 cd0:	16 f4       	brtc	.+4      	; 0xcd6 <__divmodhi4+0xa>
 cd2:	00 94       	com	r0
 cd4:	07 d0       	rcall	.+14     	; 0xce4 <__divmodhi4_neg1>
 cd6:	77 fd       	sbrc	r23, 7
 cd8:	09 d0       	rcall	.+18     	; 0xcec <__divmodhi4_neg2>
 cda:	0e 94 99 06 	call	0xd32	; 0xd32 <__udivmodhi4>
 cde:	07 fc       	sbrc	r0, 7
 ce0:	05 d0       	rcall	.+10     	; 0xcec <__divmodhi4_neg2>
 ce2:	3e f4       	brtc	.+14     	; 0xcf2 <__divmodhi4_exit>

00000ce4 <__divmodhi4_neg1>:
 ce4:	90 95       	com	r25
 ce6:	81 95       	neg	r24
 ce8:	9f 4f       	sbci	r25, 0xFF	; 255
 cea:	08 95       	ret

00000cec <__divmodhi4_neg2>:
 cec:	70 95       	com	r23
 cee:	61 95       	neg	r22
 cf0:	7f 4f       	sbci	r23, 0xFF	; 255

00000cf2 <__divmodhi4_exit>:
 cf2:	08 95       	ret

00000cf4 <__divmodsi4>:
 cf4:	05 2e       	mov	r0, r21
 cf6:	97 fb       	bst	r25, 7
 cf8:	1e f4       	brtc	.+6      	; 0xd00 <__divmodsi4+0xc>
 cfa:	00 94       	com	r0
 cfc:	0e 94 91 06 	call	0xd22	; 0xd22 <__negsi2>
 d00:	57 fd       	sbrc	r21, 7
 d02:	07 d0       	rcall	.+14     	; 0xd12 <__divmodsi4_neg2>
 d04:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__udivmodsi4>
 d08:	07 fc       	sbrc	r0, 7
 d0a:	03 d0       	rcall	.+6      	; 0xd12 <__divmodsi4_neg2>
 d0c:	4e f4       	brtc	.+18     	; 0xd20 <__divmodsi4_exit>
 d0e:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__negsi2>

00000d12 <__divmodsi4_neg2>:
 d12:	50 95       	com	r21
 d14:	40 95       	com	r20
 d16:	30 95       	com	r19
 d18:	21 95       	neg	r18
 d1a:	3f 4f       	sbci	r19, 0xFF	; 255
 d1c:	4f 4f       	sbci	r20, 0xFF	; 255
 d1e:	5f 4f       	sbci	r21, 0xFF	; 255

00000d20 <__divmodsi4_exit>:
 d20:	08 95       	ret

00000d22 <__negsi2>:
 d22:	90 95       	com	r25
 d24:	80 95       	com	r24
 d26:	70 95       	com	r23
 d28:	61 95       	neg	r22
 d2a:	7f 4f       	sbci	r23, 0xFF	; 255
 d2c:	8f 4f       	sbci	r24, 0xFF	; 255
 d2e:	9f 4f       	sbci	r25, 0xFF	; 255
 d30:	08 95       	ret

00000d32 <__udivmodhi4>:
 d32:	aa 1b       	sub	r26, r26
 d34:	bb 1b       	sub	r27, r27
 d36:	51 e1       	ldi	r21, 0x11	; 17
 d38:	07 c0       	rjmp	.+14     	; 0xd48 <__udivmodhi4_ep>

00000d3a <__udivmodhi4_loop>:
 d3a:	aa 1f       	adc	r26, r26
 d3c:	bb 1f       	adc	r27, r27
 d3e:	a6 17       	cp	r26, r22
 d40:	b7 07       	cpc	r27, r23
 d42:	10 f0       	brcs	.+4      	; 0xd48 <__udivmodhi4_ep>
 d44:	a6 1b       	sub	r26, r22
 d46:	b7 0b       	sbc	r27, r23

00000d48 <__udivmodhi4_ep>:
 d48:	88 1f       	adc	r24, r24
 d4a:	99 1f       	adc	r25, r25
 d4c:	5a 95       	dec	r21
 d4e:	a9 f7       	brne	.-22     	; 0xd3a <__udivmodhi4_loop>
 d50:	80 95       	com	r24
 d52:	90 95       	com	r25
 d54:	bc 01       	movw	r22, r24
 d56:	cd 01       	movw	r24, r26
 d58:	08 95       	ret

00000d5a <__udivmodsi4>:
 d5a:	a1 e2       	ldi	r26, 0x21	; 33
 d5c:	1a 2e       	mov	r1, r26
 d5e:	aa 1b       	sub	r26, r26
 d60:	bb 1b       	sub	r27, r27
 d62:	fd 01       	movw	r30, r26
 d64:	0d c0       	rjmp	.+26     	; 0xd80 <__udivmodsi4_ep>

00000d66 <__udivmodsi4_loop>:
 d66:	aa 1f       	adc	r26, r26
 d68:	bb 1f       	adc	r27, r27
 d6a:	ee 1f       	adc	r30, r30
 d6c:	ff 1f       	adc	r31, r31
 d6e:	a2 17       	cp	r26, r18
 d70:	b3 07       	cpc	r27, r19
 d72:	e4 07       	cpc	r30, r20
 d74:	f5 07       	cpc	r31, r21
 d76:	20 f0       	brcs	.+8      	; 0xd80 <__udivmodsi4_ep>
 d78:	a2 1b       	sub	r26, r18
 d7a:	b3 0b       	sbc	r27, r19
 d7c:	e4 0b       	sbc	r30, r20
 d7e:	f5 0b       	sbc	r31, r21

00000d80 <__udivmodsi4_ep>:
 d80:	66 1f       	adc	r22, r22
 d82:	77 1f       	adc	r23, r23
 d84:	88 1f       	adc	r24, r24
 d86:	99 1f       	adc	r25, r25
 d88:	1a 94       	dec	r1
 d8a:	69 f7       	brne	.-38     	; 0xd66 <__udivmodsi4_loop>
 d8c:	60 95       	com	r22
 d8e:	70 95       	com	r23
 d90:	80 95       	com	r24
 d92:	90 95       	com	r25
 d94:	9b 01       	movw	r18, r22
 d96:	ac 01       	movw	r20, r24
 d98:	bd 01       	movw	r22, r26
 d9a:	cf 01       	movw	r24, r30
 d9c:	08 95       	ret

00000d9e <__itoa_ncheck>:
 d9e:	bb 27       	eor	r27, r27
 da0:	4a 30       	cpi	r20, 0x0A	; 10
 da2:	31 f4       	brne	.+12     	; 0xdb0 <__itoa_ncheck+0x12>
 da4:	99 23       	and	r25, r25
 da6:	22 f4       	brpl	.+8      	; 0xdb0 <__itoa_ncheck+0x12>
 da8:	bd e2       	ldi	r27, 0x2D	; 45
 daa:	90 95       	com	r25
 dac:	81 95       	neg	r24
 dae:	9f 4f       	sbci	r25, 0xFF	; 255
 db0:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__utoa_common>

00000db4 <__utoa_ncheck>:
 db4:	bb 27       	eor	r27, r27

00000db6 <__utoa_common>:
 db6:	fb 01       	movw	r30, r22
 db8:	55 27       	eor	r21, r21
 dba:	aa 27       	eor	r26, r26
 dbc:	88 0f       	add	r24, r24
 dbe:	99 1f       	adc	r25, r25
 dc0:	aa 1f       	adc	r26, r26
 dc2:	a4 17       	cp	r26, r20
 dc4:	10 f0       	brcs	.+4      	; 0xdca <__utoa_common+0x14>
 dc6:	a4 1b       	sub	r26, r20
 dc8:	83 95       	inc	r24
 dca:	50 51       	subi	r21, 0x10	; 16
 dcc:	b9 f7       	brne	.-18     	; 0xdbc <__utoa_common+0x6>
 dce:	a0 5d       	subi	r26, 0xD0	; 208
 dd0:	aa 33       	cpi	r26, 0x3A	; 58
 dd2:	08 f0       	brcs	.+2      	; 0xdd6 <__utoa_common+0x20>
 dd4:	a9 5d       	subi	r26, 0xD9	; 217
 dd6:	a1 93       	st	Z+, r26
 dd8:	00 97       	sbiw	r24, 0x00	; 0
 dda:	79 f7       	brne	.-34     	; 0xdba <__utoa_common+0x4>
 ddc:	b1 11       	cpse	r27, r1
 dde:	b1 93       	st	Z+, r27
 de0:	11 92       	st	Z+, r1
 de2:	cb 01       	movw	r24, r22
 de4:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <strrev>

00000de8 <strrev>:
 de8:	dc 01       	movw	r26, r24
 dea:	fc 01       	movw	r30, r24
 dec:	67 2f       	mov	r22, r23
 dee:	71 91       	ld	r23, Z+
 df0:	77 23       	and	r23, r23
 df2:	e1 f7       	brne	.-8      	; 0xdec <strrev+0x4>
 df4:	32 97       	sbiw	r30, 0x02	; 2
 df6:	04 c0       	rjmp	.+8      	; 0xe00 <strrev+0x18>
 df8:	7c 91       	ld	r23, X
 dfa:	6d 93       	st	X+, r22
 dfc:	70 83       	st	Z, r23
 dfe:	62 91       	ld	r22, -Z
 e00:	ae 17       	cp	r26, r30
 e02:	bf 07       	cpc	r27, r31
 e04:	c8 f3       	brcs	.-14     	; 0xdf8 <strrev+0x10>
 e06:	08 95       	ret

00000e08 <_exit>:
 e08:	f8 94       	cli

00000e0a <__stop_program>:
 e0a:	ff cf       	rjmp	.-2      	; 0xe0a <__stop_program>
