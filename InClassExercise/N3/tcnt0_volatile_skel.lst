
tcnt0_volatile_skel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000128  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000128  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001bc  2**0
                  ALLOC
  3 .stab         00000600  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ce1  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000149d  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014b0  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  000014ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00001c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00002384  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  0000239e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_15>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  ac:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <__vector_15>:
uint8_t ext_count = 0x0;
//***********************************************************************
//                     ISR for timer counter zero
//***********************************************************************
ISR(TIMER0_COMP_vect)
{
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	8f 93       	push	r24
ext_count++;
  c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c4:	8f 5f       	subi	r24, 0xFF	; 255
  c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
  ca:	8f 91       	pop	r24
  cc:	0f 90       	pop	r0
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	0f 90       	pop	r0
  d2:	1f 90       	pop	r1
  d4:	18 95       	reti

000000d6 <init_tcnt0>:
//                           init_tcnt0
//***********************************************************************
//initalize timer/counter zero to CTC mode

void init_tcnt0(){
  ASSR  |=  (1<<AS0);                //run off external 32khz osc (TOSC)
  d6:	80 b7       	in	r24, 0x30	; 48
  d8:	88 60       	ori	r24, 0x08	; 8
  da:	80 bf       	out	0x30, r24	; 48
  //enable interrupts for output compare match 0
  TIMSK |= (1<<OCIE0);
  dc:	87 b7       	in	r24, 0x37	; 55
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	87 bf       	out	0x37, r24	; 55
  TCCR0 |=  (1<<WGM01) | (1<<CS00);  //CTC mode, no prescale
  e2:	83 b7       	in	r24, 0x33	; 51
  e4:	89 60       	ori	r24, 0x09	; 9
  e6:	83 bf       	out	0x33, r24	; 51
  OCR0  |=  0x07f;                   //compare at 128
  e8:	81 b7       	in	r24, 0x31	; 49
  ea:	8f 67       	ori	r24, 0x7F	; 127
  ec:	81 bf       	out	0x31, r24	; 49
  ee:	08 95       	ret

000000f0 <main>:
//***********************************************************************
//                              main
//***********************************************************************
int main() {

  DDRB = 0xFF;                     //set all port B pins to output
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	87 bb       	out	0x17, r24	; 23
//                           init_tcnt0
//***********************************************************************
//initalize timer/counter zero to CTC mode

void init_tcnt0(){
  ASSR  |=  (1<<AS0);                //run off external 32khz osc (TOSC)
  f4:	80 b7       	in	r24, 0x30	; 48
  f6:	88 60       	ori	r24, 0x08	; 8
  f8:	80 bf       	out	0x30, r24	; 48
  //enable interrupts for output compare match 0
  TIMSK |= (1<<OCIE0);
  fa:	87 b7       	in	r24, 0x37	; 55
  fc:	82 60       	ori	r24, 0x02	; 2
  fe:	87 bf       	out	0x37, r24	; 55
  TCCR0 |=  (1<<WGM01) | (1<<CS00);  //CTC mode, no prescale
 100:	83 b7       	in	r24, 0x33	; 51
 102:	89 60       	ori	r24, 0x09	; 9
 104:	83 bf       	out	0x33, r24	; 51
  OCR0  |=  0x07f;                   //compare at 128
 106:	81 b7       	in	r24, 0x31	; 49
 108:	8f 67       	ori	r24, 0x7F	; 127
 10a:	81 bf       	out	0x31, r24	; 49
//***********************************************************************
int main() {

  DDRB = 0xFF;                     //set all port B pins to output
  init_tcnt0();                    //initalize timer counter zero
  sei();                           //enable global interrupts
 10c:	78 94       	sei
 10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>

  while(1){
    if(ext_count == 255){     //blink light at 1sec intervals
 112:	8f 3f       	cpi	r24, 0xFF	; 255
 114:	f1 f7       	brne	.-4      	; 0x112 <main+0x22>
      PORTB++;                //increment count pattern
 116:	88 b3       	in	r24, 0x18	; 24
 118:	8f 5f       	subi	r24, 0xFF	; 255
 11a:	88 bb       	out	0x18, r24	; 24
      ext_count = 0x0;      //hint: its an assignment statement
 11c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	f7 cf       	rjmp	.-18     	; 0x112 <main+0x22>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
