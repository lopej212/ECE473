
testled1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000016c  000001e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006f0  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000cc5  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001595  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000015a8  2**2
                  CONTENTS, READONLY
  6 .debug_info   00000780  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000718  00000000  00000000  00001d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  0000247c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027d  00000000  00000000  00002496  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  9c:	0c 94 b4 00 	jmp	0x168	; 0x168 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <main>:

#include <avr/io.h>
#include <util/delay.h>
int main()
{
DDRA  = 0xFF;   //set port A to all outputs
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	8a bb       	out	0x1a, r24	; 26
DDRC  = 0xF0;   //set port bits 4-7 B as outputs
  a8:	90 ef       	ldi	r25, 0xF0	; 240
  aa:	94 bb       	out	0x14, r25	; 20
DDRD  = 0x00;   //set port D all inputs
  ac:	11 ba       	out	0x11, r1	; 17
PORTD = 0xFF;   //set port D all pullups
  ae:	82 bb       	out	0x12, r24	; 18
PORTA = 0xFF;   //set port A to all ones  (off, active low)
  b0:	8b bb       	out	0x1b, r24	; 27
while(1){
  //PORTC = 0x00; //digit zero  on
  //PORTC = 0x10; //digit one   on
  //PORTC = 0x20; //colon, indicator leds  on
  //PORTC = 0x30; //digit two   on
  PORTC = 0x40; //digit three on
  b2:	e0 e4       	ldi	r30, 0x40	; 64

//IF the following code is uncommnented,
//it will cycle through all of the segements
  PORTA = 0b11111110 ;
  b4:	7e ef       	ldi	r23, 0xFE	; 254
  _delay_ms(200);
  PORTA = 0b11111101 ;
  b6:	6d ef       	ldi	r22, 0xFD	; 253
  _delay_ms(200);
  PORTA = 0b11111011 ;
  b8:	5b ef       	ldi	r21, 0xFB	; 251
  _delay_ms(200);
  PORTA = 0b11110111 ;
  ba:	47 ef       	ldi	r20, 0xF7	; 247
  _delay_ms(200);
  PORTA = 0b11101111 ;
  bc:	3f ee       	ldi	r19, 0xEF	; 239
  _delay_ms(200);
  PORTA = 0b11011111 ;
  be:	2f ed       	ldi	r18, 0xDF	; 223
  _delay_ms(200);
  PORTA = 0b10111111 ;
  c0:	9f eb       	ldi	r25, 0xBF	; 191
  _delay_ms(200);
  PORTA = 0b01111111 ;
  c2:	8f e7       	ldi	r24, 0x7F	; 127
while(1){
  //PORTC = 0x00; //digit zero  on
  //PORTC = 0x10; //digit one   on
  //PORTC = 0x20; //colon, indicator leds  on
  //PORTC = 0x30; //digit two   on
  PORTC = 0x40; //digit three on
  c4:	e5 bb       	out	0x15, r30	; 21

//IF the following code is uncommnented,
//it will cycle through all of the segements
  PORTA = 0b11111110 ;
  c6:	7b bb       	out	0x1b, r23	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	af ef       	ldi	r26, 0xFF	; 255
  ca:	b3 ec       	ldi	r27, 0xC3	; 195
  cc:	f9 e0       	ldi	r31, 0x09	; 9
  ce:	a1 50       	subi	r26, 0x01	; 1
  d0:	b0 40       	sbci	r27, 0x00	; 0
  d2:	f0 40       	sbci	r31, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x2a>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x34>
  d8:	00 00       	nop
  _delay_ms(200);
  PORTA = 0b11111101 ;
  da:	6b bb       	out	0x1b, r22	; 27
  dc:	af ef       	ldi	r26, 0xFF	; 255
  de:	b3 ec       	ldi	r27, 0xC3	; 195
  e0:	f9 e0       	ldi	r31, 0x09	; 9
  e2:	a1 50       	subi	r26, 0x01	; 1
  e4:	b0 40       	sbci	r27, 0x00	; 0
  e6:	f0 40       	sbci	r31, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x3e>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x48>
  ec:	00 00       	nop
  _delay_ms(200);
  PORTA = 0b11111011 ;
  ee:	5b bb       	out	0x1b, r21	; 27
  f0:	af ef       	ldi	r26, 0xFF	; 255
  f2:	b3 ec       	ldi	r27, 0xC3	; 195
  f4:	f9 e0       	ldi	r31, 0x09	; 9
  f6:	a1 50       	subi	r26, 0x01	; 1
  f8:	b0 40       	sbci	r27, 0x00	; 0
  fa:	f0 40       	sbci	r31, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x52>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x5c>
 100:	00 00       	nop
  _delay_ms(200);
  PORTA = 0b11110111 ;
 102:	4b bb       	out	0x1b, r20	; 27
 104:	af ef       	ldi	r26, 0xFF	; 255
 106:	b3 ec       	ldi	r27, 0xC3	; 195
 108:	f9 e0       	ldi	r31, 0x09	; 9
 10a:	a1 50       	subi	r26, 0x01	; 1
 10c:	b0 40       	sbci	r27, 0x00	; 0
 10e:	f0 40       	sbci	r31, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x66>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x70>
 114:	00 00       	nop
  _delay_ms(200);
  PORTA = 0b11101111 ;
 116:	3b bb       	out	0x1b, r19	; 27
 118:	af ef       	ldi	r26, 0xFF	; 255
 11a:	b3 ec       	ldi	r27, 0xC3	; 195
 11c:	f9 e0       	ldi	r31, 0x09	; 9
 11e:	a1 50       	subi	r26, 0x01	; 1
 120:	b0 40       	sbci	r27, 0x00	; 0
 122:	f0 40       	sbci	r31, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x7a>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x84>
 128:	00 00       	nop
  _delay_ms(200);
  PORTA = 0b11011111 ;
 12a:	2b bb       	out	0x1b, r18	; 27
 12c:	af ef       	ldi	r26, 0xFF	; 255
 12e:	b3 ec       	ldi	r27, 0xC3	; 195
 130:	f9 e0       	ldi	r31, 0x09	; 9
 132:	a1 50       	subi	r26, 0x01	; 1
 134:	b0 40       	sbci	r27, 0x00	; 0
 136:	f0 40       	sbci	r31, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0x8e>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x98>
 13c:	00 00       	nop
  _delay_ms(200);
  PORTA = 0b10111111 ;
 13e:	9b bb       	out	0x1b, r25	; 27
 140:	af ef       	ldi	r26, 0xFF	; 255
 142:	b3 ec       	ldi	r27, 0xC3	; 195
 144:	f9 e0       	ldi	r31, 0x09	; 9
 146:	a1 50       	subi	r26, 0x01	; 1
 148:	b0 40       	sbci	r27, 0x00	; 0
 14a:	f0 40       	sbci	r31, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <main+0xa2>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0xac>
 150:	00 00       	nop
  _delay_ms(200);
  PORTA = 0b01111111 ;
 152:	8b bb       	out	0x1b, r24	; 27
 154:	af ef       	ldi	r26, 0xFF	; 255
 156:	b3 ec       	ldi	r27, 0xC3	; 195
 158:	f9 e0       	ldi	r31, 0x09	; 9
 15a:	a1 50       	subi	r26, 0x01	; 1
 15c:	b0 40       	sbci	r27, 0x00	; 0
 15e:	f0 40       	sbci	r31, 0x00	; 0
 160:	e1 f7       	brne	.-8      	; 0x15a <main+0xb6>
 162:	00 c0       	rjmp	.+0      	; 0x164 <main+0xc0>
 164:	00 00       	nop
 166:	ae cf       	rjmp	.-164    	; 0xc4 <main+0x20>

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
