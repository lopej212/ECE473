
testPush.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000146  000001da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000146  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001da  2**0
                  ALLOC
  3 .stab         0000060c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ceb  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000014d3  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014e4  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00001ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000023b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  000023d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  ac:	0c 94 a1 00 	jmp	0x142	; 0x142 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <debounce_switch>:
#include <avr/io.h>
#include <util/delay.h>

int8_t debounce_switch() {
  static uint16_t state = 0; //holds present state
  state = (state << 1) | (! bit_is_clear(PINA, 0)) | 0xE000;
  b4:	49 b3       	in	r20, 0x19	; 25
  b6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
  ba:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
  be:	22 0f       	add	r18, r18
  c0:	33 1f       	adc	r19, r19
  c2:	30 6e       	ori	r19, 0xE0	; 224
  c4:	84 2f       	mov	r24, r20
  c6:	81 70       	andi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	28 2b       	or	r18, r24
  cc:	39 2b       	or	r19, r25
  ce:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
  d2:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	21 15       	cp	r18, r1
  da:	30 4f       	sbci	r19, 0xF0	; 240
  dc:	09 f0       	breq	.+2      	; 0xe0 <debounce_switch+0x2c>
  de:	80 e0       	ldi	r24, 0x00	; 0
  if (state == 0xF000) return 1;
  return 0;
}
  e0:	08 95       	ret

000000e2 <main>:

int main()
{
  DDRA = 0x00; // set port A to all inputs
  e2:	1a ba       	out	0x1a, r1	; 26
  PORTA = 0xFF;// set port A all pullups
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	8b bb       	out	0x1b, r24	; 27
  DDRB = 0xFF; // set port bits  B as outputs
  e8:	87 bb       	out	0x17, r24	; 23
  PORTB = 0x00;
  ea:	18 ba       	out	0x18, r1	; 24
  DDRC = 0x00; //set PORT C as output
  ec:	14 ba       	out	0x14, r1	; 20
  PORTC = 0xF0;//power off to Seven segment and activate TRI Buffer
  ee:	80 ef       	ldi	r24, 0xF0	; 240
  f0:	85 bb       	out	0x15, r24	; 21

  while (1) {
    if (debounce_switch() ) {
      PORTB = 0x01;
  f2:	51 e0       	ldi	r21, 0x01	; 1
  f4:	06 c0       	rjmp	.+12     	; 0x102 <main+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	8f e3       	ldi	r24, 0x3F	; 63
  f8:	9f e1       	ldi	r25, 0x1F	; 31
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <main+0x18>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x1e>
 100:	00 00       	nop
#include <avr/io.h>
#include <util/delay.h>

int8_t debounce_switch() {
  static uint16_t state = 0; //holds present state
  state = (state << 1) | (! bit_is_clear(PINA, 0)) | 0xE000;
 102:	49 b3       	in	r20, 0x19	; 25
 104:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 108:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	90 6e       	ori	r25, 0xE0	; 224
 112:	24 2f       	mov	r18, r20
 114:	21 70       	andi	r18, 0x01	; 1
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	82 2b       	or	r24, r18
 11a:	93 2b       	or	r25, r19
 11c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 120:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  if (state == 0xF000) return 1;
 124:	81 15       	cp	r24, r1
 126:	90 4f       	sbci	r25, 0xF0	; 240
 128:	31 f7       	brne	.-52     	; 0xf6 <main+0x14>
  DDRC = 0x00; //set PORT C as output
  PORTC = 0xF0;//power off to Seven segment and activate TRI Buffer

  while (1) {
    if (debounce_switch() ) {
      PORTB = 0x01;
 12a:	58 bb       	out	0x18, r21	; 24
 12c:	9f ef       	ldi	r25, 0xFF	; 255
 12e:	49 e6       	ldi	r20, 0x69	; 105
 130:	88 e1       	ldi	r24, 0x18	; 24
 132:	91 50       	subi	r25, 0x01	; 1
 134:	40 40       	sbci	r20, 0x00	; 0
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0x50>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x5a>
 13c:	00 00       	nop
      _delay_ms(500);
      PORTB = 0x00;
 13e:	18 ba       	out	0x18, r1	; 24
 140:	da cf       	rjmp	.-76     	; 0xf6 <main+0x14>

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
