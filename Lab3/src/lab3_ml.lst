
lab3_ml.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000006d8  0000076c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800102  00800102  0000076e  2**0
                  ALLOC
  3 .stab         00001038  00000000  00000000  00000770  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f4b  00000000  00000000  000017a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000026f3  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002704  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  00002740  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00002ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000035d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  000035f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ed       	ldi	r30, 0xD8	; 216
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 32       	cpi	r26, 0x23	; 35
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 05 03 	call	0x60a	; 0x60a <main>
  c6:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <debounce_switch>:
//the button is pushed. Function returns a 1 only once per debounced button
//push so a debounce and toggle function can be implemented at the same time.
//Adapted to check all buttons from Ganssel's "Guide to Debouncing"
//Expects active low pushbuttons on PINA port.
//
uint8_t debounce_switch(uint8_t pin) {
  ce:	48 2f       	mov	r20, r24
  static uint16_t state[8] = {0};
  state[pin] = (state[pin]<<1)|(!bit_is_clear(PINA,pin))|0xE000;
  d0:	e8 2f       	mov	r30, r24
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	99 b3       	in	r25, 0x19	; 25
  d6:	ee 0f       	add	r30, r30
  d8:	ff 1f       	adc	r31, r31
  da:	e2 5f       	subi	r30, 0xF2	; 242
  dc:	fe 4f       	sbci	r31, 0xFE	; 254
  de:	20 81       	ld	r18, Z
  e0:	31 81       	ldd	r19, Z+1	; 0x01
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	30 6e       	ori	r19, 0xE0	; 224
  e8:	89 2f       	mov	r24, r25
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <debounce_switch+0x24>
  ee:	95 95       	asr	r25
  f0:	87 95       	ror	r24
  f2:	4a 95       	dec	r20
  f4:	e2 f7       	brpl	.-8      	; 0xee <debounce_switch+0x20>
  f6:	81 70       	andi	r24, 0x01	; 1
  f8:	99 27       	eor	r25, r25
  fa:	28 2b       	or	r18, r24
  fc:	39 2b       	or	r19, r25
  fe:	31 83       	std	Z+1, r19	; 0x01
 100:	20 83       	st	Z, r18
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	21 15       	cp	r18, r1
 106:	30 4f       	sbci	r19, 0xF0	; 240
 108:	09 f0       	breq	.+2      	; 0x10c <debounce_switch+0x3e>
 10a:	80 e0       	ldi	r24, 0x00	; 0
  if (state[pin]==0xF000) {
    return 1;
  }
  return 0;
}
 10c:	08 95       	ret

0000010e <spi_init>:
//***********************************************************************
//                            spi_init
//**********************************************************************
void spi_init(void){
  //DDRB should be 0x87, 0x97 is for testing
  DDRB   = 0x97; //output mode for SS, MOSI, SCLK, and output for OE_EN
 10e:	87 e9       	ldi	r24, 0x97	; 151
 110:	87 bb       	out	0x17, r24	; 23
  SPCR   = (1<<SPE) | (1<<MSTR) ; //master mode, clk low on idle, leading edge sample
 112:	80 e5       	ldi	r24, 0x50	; 80
 114:	8d b9       	out	0x0d, r24	; 13
  SPSR   = (1<<SPI2X); //choose double speed operation
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	8e b9       	out	0x0e, r24	; 14
 11a:	08 95       	ret

0000011c <spi_read>:
Return:
  uint8_t value that contains the value of SPDR register
***************************************************************/
 uint8_t spi_read(void)
{
  SPDR = 0x00;
 11c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)) {}
 11e:	77 9b       	sbis	0x0e, 7	; 14
 120:	fe cf       	rjmp	.-4      	; 0x11e <spi_read+0x2>
  return(SPDR);
 122:	8f b1       	in	r24, 0x0f	; 15
}
 124:	08 95       	ret

00000126 <init_tcnt0>:
//***********************************************************************
//                           init_tcnt0
//***********************************************************************
//initalize timer/counter zero to normal mode
void init_tcnt0(){
  TIMSK |= (1<<TOIE0);//set interrupt for overflow
 126:	87 b7       	in	r24, 0x37	; 55
 128:	81 60       	ori	r24, 0x01	; 1
 12a:	87 bf       	out	0x37, r24	; 55
  TCCR0 |=  (1<<CS02) | (1<<CS00);  //normal mode, 128 prescale
 12c:	83 b7       	in	r24, 0x33	; 51
 12e:	85 60       	ori	r24, 0x05	; 5
 130:	83 bf       	out	0x33, r24	; 51
 132:	08 95       	ret

00000134 <update_inc_dec>:
  This function will update the increase and decrese value
Parameters: NONE
Return:void
***************************************************************/
void update_inc_dec(){
  if (mode == 0) {// increas/decrease 1
 134:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <mode>
 138:	88 23       	and	r24, r24
 13a:	69 f0       	breq	.+26     	; 0x156 <update_inc_dec+0x22>
    inc_dec1 = 1;
  }else if (mode == 1) {//increase/dec 2
 13c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <mode>
 140:	81 30       	cpi	r24, 0x01	; 1
 142:	81 f0       	breq	.+32     	; 0x164 <update_inc_dec+0x30>
    inc_dec1 = 2;
  }else if (mode == 2) {//inc/dec 4
 144:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <mode>
 148:	82 30       	cpi	r24, 0x02	; 2
 14a:	81 f0       	breq	.+32     	; 0x16c <update_inc_dec+0x38>
    inc_dec1 = 4;
  }else if (mode == 3) {//inc/dec 0
 14c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <mode>
 150:	83 30       	cpi	r24, 0x03	; 3
 152:	29 f0       	breq	.+10     	; 0x15e <update_inc_dec+0x2a>
 154:	08 95       	ret
Parameters: NONE
Return:void
***************************************************************/
void update_inc_dec(){
  if (mode == 0) {// increas/decrease 1
    inc_dec1 = 1;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <inc_dec1>
 15c:	08 95       	ret
  }else if (mode == 1) {//increase/dec 2
    inc_dec1 = 2;
  }else if (mode == 2) {//inc/dec 4
    inc_dec1 = 4;
  }else if (mode == 3) {//inc/dec 0
    inc_dec1 = 0;
 15e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <inc_dec1>
 162:	08 95       	ret
***************************************************************/
void update_inc_dec(){
  if (mode == 0) {// increas/decrease 1
    inc_dec1 = 1;
  }else if (mode == 1) {//increase/dec 2
    inc_dec1 = 2;
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <inc_dec1>
 16a:	08 95       	ret
  }else if (mode == 2) {//inc/dec 4
    inc_dec1 = 4;
 16c:	84 e0       	ldi	r24, 0x04	; 4
 16e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <inc_dec1>
 172:	08 95       	ret

00000174 <update_mode>:
Parameters: NONE
Return:void
***************************************************************/
void update_mode() {
  //Reconfigure the PORTS to read from the pushbuttons:
  DDRA = 0x00;//set PORT A to all inputs
 174:	1a ba       	out	0x1a, r1	; 26
  PORTA = 0xFF;//set PORTA all pullups
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	8b bb       	out	0x1b, r24	; 27
  PORTC = 0xF0;//power off to Seven segment and ENABLE TRI buffer
 17a:	80 ef       	ldi	r24, 0xF0	; 240
 17c:	85 bb       	out	0x15, r24	; 21

  for(n = 0; n<2;n++){//only check button 0 and 1
 17e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <n>
 182:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <n>
 186:	82 30       	cpi	r24, 0x02	; 2
 188:	f0 f5       	brcc	.+124    	; 0x206 <update_mode+0x92>
    if (debounce_switch(n)) {
      if (n == 0) {//button 0
        mode ^= (1<<BIT0);//increment by two mode (toggle bit 0)
      }else if (n==1) {//button 1
        mode ^= (1<<BIT1);//increment by four mode (toggle bit 1)
 18a:	62 e0       	ldi	r22, 0x02	; 2
  PORTC = 0xF0;//power off to Seven segment and ENABLE TRI buffer

  for(n = 0; n<2;n++){//only check button 0 and 1
    if (debounce_switch(n)) {
      if (n == 0) {//button 0
        mode ^= (1<<BIT0);//increment by two mode (toggle bit 0)
 18c:	51 e0       	ldi	r21, 0x01	; 1
 18e:	09 c0       	rjmp	.+18     	; 0x1a2 <update_mode+0x2e>
  //Reconfigure the PORTS to read from the pushbuttons:
  DDRA = 0x00;//set PORT A to all inputs
  PORTA = 0xFF;//set PORTA all pullups
  PORTC = 0xF0;//power off to Seven segment and ENABLE TRI buffer

  for(n = 0; n<2;n++){//only check button 0 and 1
 190:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <n>
 194:	8f 5f       	subi	r24, 0xFF	; 255
 196:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <n>
 19a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <n>
 19e:	82 30       	cpi	r24, 0x02	; 2
 1a0:	90 f5       	brcc	.+100    	; 0x206 <update_mode+0x92>
    if (debounce_switch(n)) {
 1a2:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <n>
//Adapted to check all buttons from Ganssel's "Guide to Debouncing"
//Expects active low pushbuttons on PINA port.
//
uint8_t debounce_switch(uint8_t pin) {
  static uint16_t state[8] = {0};
  state[pin] = (state[pin]<<1)|(!bit_is_clear(PINA,pin))|0xE000;
 1a6:	e4 2f       	mov	r30, r20
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	99 b3       	in	r25, 0x19	; 25
 1ac:	ee 0f       	add	r30, r30
 1ae:	ff 1f       	adc	r31, r31
 1b0:	e2 5f       	subi	r30, 0xF2	; 242
 1b2:	fe 4f       	sbci	r31, 0xFE	; 254
 1b4:	20 81       	ld	r18, Z
 1b6:	31 81       	ldd	r19, Z+1	; 0x01
 1b8:	22 0f       	add	r18, r18
 1ba:	33 1f       	adc	r19, r19
 1bc:	30 6e       	ori	r19, 0xE0	; 224
 1be:	89 2f       	mov	r24, r25
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <update_mode+0x54>
 1c4:	95 95       	asr	r25
 1c6:	87 95       	ror	r24
 1c8:	4a 95       	dec	r20
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <update_mode+0x50>
 1cc:	81 70       	andi	r24, 0x01	; 1
 1ce:	99 27       	eor	r25, r25
 1d0:	82 2b       	or	r24, r18
 1d2:	93 2b       	or	r25, r19
 1d4:	91 83       	std	Z+1, r25	; 0x01
 1d6:	80 83       	st	Z, r24
  if (state[pin]==0xF000) {
 1d8:	81 15       	cp	r24, r1
 1da:	90 4f       	sbci	r25, 0xF0	; 240
 1dc:	c9 f6       	brne	.-78     	; 0x190 <update_mode+0x1c>
  PORTA = 0xFF;//set PORTA all pullups
  PORTC = 0xF0;//power off to Seven segment and ENABLE TRI buffer

  for(n = 0; n<2;n++){//only check button 0 and 1
    if (debounce_switch(n)) {
      if (n == 0) {//button 0
 1de:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <n>
 1e2:	81 11       	cpse	r24, r1
 1e4:	06 c0       	rjmp	.+12     	; 0x1f2 <update_mode+0x7e>
        mode ^= (1<<BIT0);//increment by two mode (toggle bit 0)
 1e6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <mode>
 1ea:	85 27       	eor	r24, r21
 1ec:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <mode>
 1f0:	cf cf       	rjmp	.-98     	; 0x190 <update_mode+0x1c>
      }else if (n==1) {//button 1
 1f2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <n>
 1f6:	81 30       	cpi	r24, 0x01	; 1
 1f8:	59 f6       	brne	.-106    	; 0x190 <update_mode+0x1c>
        mode ^= (1<<BIT1);//increment by four mode (toggle bit 1)
 1fa:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <mode>
 1fe:	86 27       	eor	r24, r22
 200:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <mode>
 204:	c5 cf       	rjmp	.-118    	; 0x190 <update_mode+0x1c>
      }
    }
  }
  update_inc_dec();
 206:	0e 94 9a 00 	call	0x134	; 0x134 <update_inc_dec>
  PORTC = 0xE0;//DISABLE Tri buffer (power still off to seven seg)
 20a:	80 ee       	ldi	r24, 0xE0	; 224
 20c:	85 bb       	out	0x15, r24	; 21
}
 20e:	08 95       	ret

00000210 <read_encoders>:
  or decrement the counta accordingly
Parameters: NONE
Return:void
***************************************************************/
void read_encoders(){
  PORTE ^= (1<<SH_LD);//toggle to low
 210:	93 b1       	in	r25, 0x03	; 3
 212:	80 e4       	ldi	r24, 0x40	; 64
 214:	98 27       	eor	r25, r24
 216:	93 b9       	out	0x03, r25	; 3
  PORTE ^= (1<<SH_LD);//toggle back to high
 218:	93 b1       	in	r25, 0x03	; 3
 21a:	89 27       	eor	r24, r25
 21c:	83 b9       	out	0x03, r24	; 3
  PORTE ^= (1<<CLK_INH);//toggle to low
 21e:	83 b1       	in	r24, 0x03	; 3
 220:	80 58       	subi	r24, 0x80	; 128
 222:	83 b9       	out	0x03, r24	; 3
Return:
  uint8_t value that contains the value of SPDR register
***************************************************************/
 uint8_t spi_read(void)
{
  SPDR = 0x00;
 224:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)) {}
 226:	77 9b       	sbis	0x0e, 7	; 14
 228:	fe cf       	rjmp	.-4      	; 0x226 <read_encoders+0x16>
  return(SPDR);
 22a:	8f b1       	in	r24, 0x0f	; 15
***************************************************************/
void read_encoders(){
  PORTE ^= (1<<SH_LD);//toggle to low
  PORTE ^= (1<<SH_LD);//toggle back to high
  PORTE ^= (1<<CLK_INH);//toggle to low
  encoder_val= spi_read();
 22c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
  PORTE ^= (1<<CLK_INH);//toggle to high
 230:	83 b1       	in	r24, 0x03	; 3
 232:	80 58       	subi	r24, 0x80	; 128
 234:	83 b9       	out	0x03, r24	; 3

  //"clean" encoder1 value
  encoder1_present = encoder_val;
 236:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 23a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <encoder1_present>
  for ( bitn = 7; bitn > 1; bitn--) {
 23e:	87 e0       	ldi	r24, 0x07	; 7
 240:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <bitn>
 244:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <bitn>
 248:	82 30       	cpi	r24, 0x02	; 2
 24a:	d8 f0       	brcs	.+54     	; 0x282 <read_encoders+0x72>
    encoder1_present &= ~(1<<bitn);
 24c:	41 e0       	ldi	r20, 0x01	; 1
 24e:	50 e0       	ldi	r21, 0x00	; 0
 250:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <bitn>
 254:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <encoder1_present>
 258:	ba 01       	movw	r22, r20
 25a:	02 c0       	rjmp	.+4      	; 0x260 <read_encoders+0x50>
 25c:	66 0f       	add	r22, r22
 25e:	77 1f       	adc	r23, r23
 260:	8a 95       	dec	r24
 262:	e2 f7       	brpl	.-8      	; 0x25c <read_encoders+0x4c>
 264:	cb 01       	movw	r24, r22
 266:	80 95       	com	r24
 268:	90 95       	com	r25
 26a:	82 23       	and	r24, r18
 26c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <encoder1_present>
  encoder_val= spi_read();
  PORTE ^= (1<<CLK_INH);//toggle to high

  //"clean" encoder1 value
  encoder1_present = encoder_val;
  for ( bitn = 7; bitn > 1; bitn--) {
 270:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <bitn>
 274:	81 50       	subi	r24, 0x01	; 1
 276:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <bitn>
 27a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <bitn>
 27e:	82 30       	cpi	r24, 0x02	; 2
 280:	38 f7       	brcc	.-50     	; 0x250 <read_encoders+0x40>
    encoder1_present &= ~(1<<bitn);
  }
  //"clean" encoder2 value
  encoder2_present = (encoder_val>>2);//RS so that we get rid bit 0:1
 282:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 286:	86 95       	lsr	r24
 288:	86 95       	lsr	r24
 28a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <encoder2_present>
  for ( bitn = 7; bitn > 1; bitn--) {
 28e:	87 e0       	ldi	r24, 0x07	; 7
 290:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <bitn>
 294:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <bitn>
 298:	82 30       	cpi	r24, 0x02	; 2
 29a:	d8 f0       	brcs	.+54     	; 0x2d2 <read_encoders+0xc2>
    encoder2_present &= ~(1<<bitn);
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	50 e0       	ldi	r21, 0x00	; 0
 2a0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <bitn>
 2a4:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <encoder2_present>
 2a8:	ba 01       	movw	r22, r20
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <read_encoders+0xa0>
 2ac:	66 0f       	add	r22, r22
 2ae:	77 1f       	adc	r23, r23
 2b0:	8a 95       	dec	r24
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <read_encoders+0x9c>
 2b4:	cb 01       	movw	r24, r22
 2b6:	80 95       	com	r24
 2b8:	90 95       	com	r25
 2ba:	82 23       	and	r24, r18
 2bc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <encoder2_present>
  for ( bitn = 7; bitn > 1; bitn--) {
    encoder1_present &= ~(1<<bitn);
  }
  //"clean" encoder2 value
  encoder2_present = (encoder_val>>2);//RS so that we get rid bit 0:1
  for ( bitn = 7; bitn > 1; bitn--) {
 2c0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <bitn>
 2c4:	81 50       	subi	r24, 0x01	; 1
 2c6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <bitn>
 2ca:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <bitn>
 2ce:	82 30       	cpi	r24, 0x02	; 2
 2d0:	38 f7       	brcc	.-50     	; 0x2a0 <read_encoders+0x90>
    encoder2_present &= ~(1<<bitn);
  }

  if (reset == 1) {
 2d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	79 f1       	breq	.+94     	; 0x338 <read_encoders+0x128>
  //     ext_count +=0;//add nothing
  //     break;
  // }

  //Update for encoder 2
  switch (encoder2_present) {
 2da:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <encoder2_present>
 2de:	81 30       	cpi	r24, 0x01	; 1
 2e0:	c9 f1       	breq	.+114    	; 0x354 <read_encoders+0x144>
 2e2:	81 30       	cpi	r24, 0x01	; 1
 2e4:	08 f4       	brcc	.+2      	; 0x2e8 <read_encoders+0xd8>
 2e6:	3f c0       	rjmp	.+126    	; 0x366 <read_encoders+0x156>
 2e8:	82 30       	cpi	r24, 0x02	; 2
 2ea:	69 f0       	breq	.+26     	; 0x306 <read_encoders+0xf6>
 2ec:	83 30       	cpi	r24, 0x03	; 3
 2ee:	09 f0       	breq	.+2      	; 0x2f2 <read_encoders+0xe2>
 2f0:	43 c0       	rjmp	.+134    	; 0x378 <read_encoders+0x168>
        ext_count -= inc_dec1;
        encoder2_past = encoder2_present;
      }
      break;
    case 3:
      if (encoder2_past == 1) {
 2f2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <encoder2_past>
 2f6:	81 30       	cpi	r24, 0x01	; 1
 2f8:	09 f4       	brne	.+2      	; 0x2fc <read_encoders+0xec>
 2fa:	47 c0       	rjmp	.+142    	; 0x38a <read_encoders+0x17a>
        ext_count+= inc_dec1;
        encoder2_past = encoder2_present;
      }else if (encoder2_past == 2 ) {
 2fc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <encoder2_past>
 300:	82 30       	cpi	r24, 0x02	; 2
 302:	49 f0       	breq	.+18     	; 0x316 <read_encoders+0x106>
 304:	08 95       	ret
        ext_count -=inc_dec1;
        encoder2_past = encoder2_present;
      }
      break;
    case 2:
      if (encoder2_past == 3) {
 306:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <encoder2_past>
 30a:	83 30       	cpi	r24, 0x03	; 3
 30c:	f1 f1       	breq	.+124    	; 0x38a <read_encoders+0x17a>
        ext_count += inc_dec1;
        encoder2_past = encoder2_present;
      }else if (encoder2_past == 0) {
 30e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <encoder2_past>
 312:	81 11       	cpse	r24, r1
 314:	f7 cf       	rjmp	.-18     	; 0x304 <read_encoders+0xf4>
    case 0:
      if (encoder2_past == 2) {
        ext_count += inc_dec1;
        encoder2_past = encoder2_present;
      }else if (encoder2_past == 1) {
        ext_count -= inc_dec1;
 316:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <inc_dec1>
 31a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ext_count>
 31e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ext_count+0x1>
 322:	82 1b       	sub	r24, r18
 324:	91 09       	sbc	r25, r1
 326:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <ext_count+0x1>
 32a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ext_count>
        encoder2_past = encoder2_present;
 32e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <encoder2_present>
 332:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <encoder2_past>
 336:	08 95       	ret
  for ( bitn = 7; bitn > 1; bitn--) {
    encoder2_present &= ~(1<<bitn);
  }

  if (reset == 1) {
    encoder1_past = encoder1_present;//set them equal
 338:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <encoder1_present>
 33c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <encoder1_past>
    encoder2_past = encoder2_present;//set them equal
 340:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <encoder2_present>
 344:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <encoder2_past>
    reset = 0;//set to zero after first time
 348:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
  //     ext_count +=0;//add nothing
  //     break;
  // }

  //Update for encoder 2
  switch (encoder2_present) {
 34c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <encoder2_present>
 350:	81 30       	cpi	r24, 0x01	; 1
 352:	39 f6       	brne	.-114    	; 0x2e2 <read_encoders+0xd2>
    case 1:
      if (encoder2_past == 0) {
 354:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <encoder2_past>
 358:	88 23       	and	r24, r24
 35a:	b9 f0       	breq	.+46     	; 0x38a <read_encoders+0x17a>
        ext_count += inc_dec1;
        encoder2_past = encoder2_present;
      }else if (encoder2_past == 3 ) {
 35c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <encoder2_past>
 360:	83 30       	cpi	r24, 0x03	; 3
 362:	c9 f2       	breq	.-78     	; 0x316 <read_encoders+0x106>
 364:	08 95       	ret
        ext_count -= inc_dec1;
        encoder2_past = encoder2_present;
      }
      break;
    case 0:
      if (encoder2_past == 2) {
 366:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <encoder2_past>
 36a:	82 30       	cpi	r24, 0x02	; 2
 36c:	71 f0       	breq	.+28     	; 0x38a <read_encoders+0x17a>
        ext_count += inc_dec1;
        encoder2_past = encoder2_present;
      }else if (encoder2_past == 1) {
 36e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <encoder2_past>
 372:	81 30       	cpi	r24, 0x01	; 1
 374:	81 f2       	breq	.-96     	; 0x316 <read_encoders+0x106>
 376:	08 95       	ret
        ext_count -= inc_dec1;
        encoder2_past = encoder2_present;
      }
      break;
    default:
      ext_count +=0;//add nothing
 378:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ext_count>
 37c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ext_count+0x1>
 380:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <ext_count+0x1>
 384:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ext_count>
 388:	08 95       	ret
        encoder2_past = encoder2_present;
      }
      break;
    case 0:
      if (encoder2_past == 2) {
        ext_count += inc_dec1;
 38a:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <inc_dec1>
 38e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ext_count>
 392:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ext_count+0x1>
 396:	82 0f       	add	r24, r18
 398:	91 1d       	adc	r25, r1
 39a:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <ext_count+0x1>
 39e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ext_count>
        encoder2_past = encoder2_present;
 3a2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <encoder2_present>
 3a6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <encoder2_past>
 3aa:	08 95       	ret

000003ac <__vector_16>:
  interrupt service routine
Parameters: NONE
Return:void
***************************************************************/
ISR(TIMER0_OVF_vect)
{
 3ac:	1f 92       	push	r1
 3ae:	0f 92       	push	r0
 3b0:	0f b6       	in	r0, 0x3f	; 63
 3b2:	0f 92       	push	r0
 3b4:	11 24       	eor	r1, r1
 3b6:	0b b6       	in	r0, 0x3b	; 59
 3b8:	0f 92       	push	r0
 3ba:	2f 93       	push	r18
 3bc:	3f 93       	push	r19
 3be:	4f 93       	push	r20
 3c0:	5f 93       	push	r21
 3c2:	6f 93       	push	r22
 3c4:	7f 93       	push	r23
 3c6:	8f 93       	push	r24
 3c8:	9f 93       	push	r25
 3ca:	af 93       	push	r26
 3cc:	bf 93       	push	r27
 3ce:	ef 93       	push	r30
 3d0:	ff 93       	push	r31
  //Store PORT values to be able to restore
  PORTA_previous =PINA;//save PORTA values
 3d2:	89 b3       	in	r24, 0x19	; 25
 3d4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <PORTA_previous>
  PORTC_previous = PINC;//save PORTC values
 3d8:	83 b3       	in	r24, 0x13	; 19
 3da:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <PORTC_previous>

  update_mode();//update mode
 3de:	0e 94 ba 00 	call	0x174	; 0x174 <update_mode>
  read_encoders();//read encoders
 3e2:	0e 94 08 01 	call	0x210	; 0x210 <read_encoders>

  //update the count value
  if (ext_count>1023) {//bound count to 0-1023
 3e6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ext_count>
 3ea:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ext_count+0x1>
 3ee:	81 15       	cp	r24, r1
 3f0:	94 40       	sbci	r25, 0x04	; 4
 3f2:	48 f0       	brcs	.+18     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
    ext_count = (ext_count -1023)-1;
 3f4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ext_count>
 3f8:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ext_count+0x1>
 3fc:	94 50       	subi	r25, 0x04	; 4
 3fe:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <ext_count+0x1>
 402:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ext_count>
  }
  if (ext_count<0) {
 406:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ext_count>
 40a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ext_count+0x1>
    ext_count = (1023+ext_count)+1;
  }

  //restore PORT A and C values
  DDRA = 0xFF;//outside of ISR, always output
 40e:	8f ef       	ldi	r24, 0xFF	; 255
 410:	8a bb       	out	0x1a, r24	; 26
  PORTA = PORTA_previous;//restore PORTA
 412:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <PORTA_previous>
 416:	8b bb       	out	0x1b, r24	; 27
  PORTC = PORTC_previous;//restore PORTC
 418:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <PORTC_previous>
 41c:	85 bb       	out	0x15, r24	; 21

}
 41e:	ff 91       	pop	r31
 420:	ef 91       	pop	r30
 422:	bf 91       	pop	r27
 424:	af 91       	pop	r26
 426:	9f 91       	pop	r25
 428:	8f 91       	pop	r24
 42a:	7f 91       	pop	r23
 42c:	6f 91       	pop	r22
 42e:	5f 91       	pop	r21
 430:	4f 91       	pop	r20
 432:	3f 91       	pop	r19
 434:	2f 91       	pop	r18
 436:	0f 90       	pop	r0
 438:	0b be       	out	0x3b, r0	; 59
 43a:	0f 90       	pop	r0
 43c:	0f be       	out	0x3f, r0	; 63
 43e:	0f 90       	pop	r0
 440:	1f 90       	pop	r1
 442:	18 95       	reti

00000444 <display_mode>:
  This function will display the mode on the bargraph
Parameters: NONE
Return:void
***************************************************************/
void display_mode(){
  SPDR = mode;//send value to register
 444:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <mode>
 448:	8f b9       	out	0x0f, r24	; 15
  while(bit_is_clear(SPSR,SPIF)){}
 44a:	77 9b       	sbis	0x0e, 7	; 14
 44c:	fe cf       	rjmp	.-4      	; 0x44a <display_mode+0x6>
  PORTB ^=(1<<BIT0);//send rising edge to regclk on HC595
 44e:	98 b3       	in	r25, 0x18	; 24
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	98 27       	eor	r25, r24
 454:	98 bb       	out	0x18, r25	; 24
  PORTB ^=(1<<BIT0);//send falling edge to reglck on HC595
 456:	98 b3       	in	r25, 0x18	; 24
 458:	89 27       	eor	r24, r25
 45a:	88 bb       	out	0x18, r24	; 24
 45c:	08 95       	ret

0000045e <decoder>:
Precondition: NONE
Return: uint_t binary equivalent
************************************************************************/
uint8_t decoder(uint8_t decimal)
{
  if (decimal == 0) {//decimal: 0
 45e:	88 23       	and	r24, r24
 460:	a1 f0       	breq	.+40     	; 0x48a <decoder+0x2c>
    return 0b11000000;
  }else if (decimal == 1) {//decimal: 1
 462:	81 30       	cpi	r24, 0x01	; 1
 464:	a1 f0       	breq	.+40     	; 0x48e <decoder+0x30>
    return 0b11111001;
  }else if (decimal == 2) {//decimal: 2
 466:	82 30       	cpi	r24, 0x02	; 2
 468:	a1 f0       	breq	.+40     	; 0x492 <decoder+0x34>
    return 0b10100100;
  }else if (decimal == 3) {//decimal: 3
 46a:	83 30       	cpi	r24, 0x03	; 3
 46c:	a1 f0       	breq	.+40     	; 0x496 <decoder+0x38>
    return 0b10110000;
  }else if (decimal == 4) {//deciaml: 4
 46e:	84 30       	cpi	r24, 0x04	; 4
 470:	a1 f0       	breq	.+40     	; 0x49a <decoder+0x3c>
    return 0b10011001;
  }else if (decimal == 5) {//decimal: 5
 472:	85 30       	cpi	r24, 0x05	; 5
 474:	a1 f0       	breq	.+40     	; 0x49e <decoder+0x40>
    return 0b10010010;
  }else if (decimal == 6) {//deciaml: 6
 476:	86 30       	cpi	r24, 0x06	; 6
 478:	a1 f0       	breq	.+40     	; 0x4a2 <decoder+0x44>
    return 0b10000010;
  }else if (decimal == 7) {//decimal: 7
 47a:	87 30       	cpi	r24, 0x07	; 7
 47c:	a1 f0       	breq	.+40     	; 0x4a6 <decoder+0x48>
    return 0b11111000;
  }else if (decimal == 8) {//decimal: 8
 47e:	88 30       	cpi	r24, 0x08	; 8
 480:	a1 f0       	breq	.+40     	; 0x4aa <decoder+0x4c>
    return 0b10000000;
  }else if (decimal == 9) {//decimal: 9
 482:	89 30       	cpi	r24, 0x09	; 9
 484:	a1 f0       	breq	.+40     	; 0x4ae <decoder+0x50>
    return 0b10010000;
  }
  //should never reach this return
  return 0b11111111;// All segments OFF
 486:	8f ef       	ldi	r24, 0xFF	; 255
 488:	08 95       	ret
Return: uint_t binary equivalent
************************************************************************/
uint8_t decoder(uint8_t decimal)
{
  if (decimal == 0) {//decimal: 0
    return 0b11000000;
 48a:	80 ec       	ldi	r24, 0xC0	; 192
 48c:	08 95       	ret
  }else if (decimal == 1) {//decimal: 1
    return 0b11111001;
 48e:	89 ef       	ldi	r24, 0xF9	; 249
 490:	08 95       	ret
  }else if (decimal == 2) {//decimal: 2
    return 0b10100100;
 492:	84 ea       	ldi	r24, 0xA4	; 164
 494:	08 95       	ret
  }else if (decimal == 3) {//decimal: 3
    return 0b10110000;
 496:	80 eb       	ldi	r24, 0xB0	; 176
 498:	08 95       	ret
  }else if (decimal == 4) {//deciaml: 4
    return 0b10011001;
 49a:	89 e9       	ldi	r24, 0x99	; 153
 49c:	08 95       	ret
  }else if (decimal == 5) {//decimal: 5
    return 0b10010010;
 49e:	82 e9       	ldi	r24, 0x92	; 146
 4a0:	08 95       	ret
  }else if (decimal == 6) {//deciaml: 6
    return 0b10000010;
 4a2:	82 e8       	ldi	r24, 0x82	; 130
 4a4:	08 95       	ret
  }else if (decimal == 7) {//decimal: 7
    return 0b11111000;
 4a6:	88 ef       	ldi	r24, 0xF8	; 248
 4a8:	08 95       	ret
  }else if (decimal == 8) {//decimal: 8
    return 0b10000000;
 4aa:	80 e8       	ldi	r24, 0x80	; 128
 4ac:	08 95       	ret
  }else if (decimal == 9) {//decimal: 9
    return 0b10010000;
 4ae:	80 e9       	ldi	r24, 0x90	; 144
  }
  //should never reach this return
  return 0b11111111;// All segments OFF
}
 4b0:	08 95       	ret

000004b2 <segsum>:
//***********************************************************************************
//                                   segment_sum
//takes a 16-bit binary input value and places the appropriate equivalent 4 digit
//BCD segment code in the array segment_data for display.
//array is loaded at exit as:  |digit0|digit1|colon(digit2)|digit3|digit4|
void segsum(uint16_t sum) {
 4b2:	af 92       	push	r10
 4b4:	bf 92       	push	r11
 4b6:	cf 92       	push	r12
 4b8:	df 92       	push	r13
 4ba:	ff 92       	push	r15
 4bc:	0f 93       	push	r16
 4be:	1f 93       	push	r17
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
 4c4:	ec 01       	movw	r28, r24
  uint8_t thousands = (sum/1000)%10;//parses the thousands places
 4c6:	9c 01       	movw	r18, r24
 4c8:	36 95       	lsr	r19
 4ca:	27 95       	ror	r18
 4cc:	36 95       	lsr	r19
 4ce:	27 95       	ror	r18
 4d0:	36 95       	lsr	r19
 4d2:	27 95       	ror	r18
 4d4:	a5 ec       	ldi	r26, 0xC5	; 197
 4d6:	b0 e2       	ldi	r27, 0x20	; 32
 4d8:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__umulhisi3>
 4dc:	ac 01       	movw	r20, r24
 4de:	52 95       	swap	r21
 4e0:	42 95       	swap	r20
 4e2:	4f 70       	andi	r20, 0x0F	; 15
 4e4:	45 27       	eor	r20, r21
 4e6:	5f 70       	andi	r21, 0x0F	; 15
 4e8:	45 27       	eor	r20, r21
 4ea:	9a 01       	movw	r18, r20
 4ec:	ad ec       	ldi	r26, 0xCD	; 205
 4ee:	bc ec       	ldi	r27, 0xCC	; 204
 4f0:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__umulhisi3>
 4f4:	96 95       	lsr	r25
 4f6:	87 95       	ror	r24
 4f8:	96 95       	lsr	r25
 4fa:	87 95       	ror	r24
 4fc:	96 95       	lsr	r25
 4fe:	87 95       	ror	r24
 500:	9c 01       	movw	r18, r24
 502:	22 0f       	add	r18, r18
 504:	33 1f       	adc	r19, r19
 506:	88 0f       	add	r24, r24
 508:	99 1f       	adc	r25, r25
 50a:	88 0f       	add	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	88 0f       	add	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	82 0f       	add	r24, r18
 514:	93 1f       	adc	r25, r19
 516:	48 1b       	sub	r20, r24
 518:	59 0b       	sbc	r21, r25
 51a:	f4 2e       	mov	r15, r20
  uint8_t hundreds  = (sum/100)%10;//parses the hundreds place
 51c:	9e 01       	movw	r18, r28
 51e:	36 95       	lsr	r19
 520:	27 95       	ror	r18
 522:	36 95       	lsr	r19
 524:	27 95       	ror	r18
 526:	ab e7       	ldi	r26, 0x7B	; 123
 528:	b4 e1       	ldi	r27, 0x14	; 20
 52a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__umulhisi3>
 52e:	8c 01       	movw	r16, r24
 530:	16 95       	lsr	r17
 532:	07 95       	ror	r16
 534:	98 01       	movw	r18, r16
 536:	ad ec       	ldi	r26, 0xCD	; 205
 538:	bc ec       	ldi	r27, 0xCC	; 204
 53a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__umulhisi3>
 53e:	96 95       	lsr	r25
 540:	87 95       	ror	r24
 542:	96 95       	lsr	r25
 544:	87 95       	ror	r24
 546:	96 95       	lsr	r25
 548:	87 95       	ror	r24
 54a:	9c 01       	movw	r18, r24
 54c:	22 0f       	add	r18, r18
 54e:	33 1f       	adc	r19, r19
 550:	88 0f       	add	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	88 0f       	add	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	82 0f       	add	r24, r18
 55e:	93 1f       	adc	r25, r19
 560:	08 1b       	sub	r16, r24
 562:	19 0b       	sbc	r17, r25
  uint8_t tens      = (sum/10)%10;//parses the tens places
 564:	9e 01       	movw	r18, r28
 566:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__umulhisi3>
 56a:	6c 01       	movw	r12, r24
 56c:	d6 94       	lsr	r13
 56e:	c7 94       	ror	r12
 570:	d6 94       	lsr	r13
 572:	c7 94       	ror	r12
 574:	d6 94       	lsr	r13
 576:	c7 94       	ror	r12
 578:	96 01       	movw	r18, r12
 57a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__umulhisi3>
 57e:	96 95       	lsr	r25
 580:	87 95       	ror	r24
 582:	96 95       	lsr	r25
 584:	87 95       	ror	r24
 586:	96 95       	lsr	r25
 588:	87 95       	ror	r24
 58a:	9c 01       	movw	r18, r24
 58c:	22 0f       	add	r18, r18
 58e:	33 1f       	adc	r19, r19
 590:	88 0f       	add	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	88 0f       	add	r24, r24
 596:	99 1f       	adc	r25, r25
 598:	88 0f       	add	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	82 0f       	add	r24, r18
 59e:	93 1f       	adc	r25, r19
 5a0:	56 01       	movw	r10, r12
 5a2:	a8 1a       	sub	r10, r24
 5a4:	b9 0a       	sbc	r11, r25
  uint8_t ones      = (sum%10);//parses the ones place

  //decoded numbers
  segment_data[0] = decoder(thousands);//thousands
 5a6:	84 2f       	mov	r24, r20
 5a8:	0e 94 2f 02 	call	0x45e	; 0x45e <decoder>
 5ac:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <segment_data>
  segment_data[1] = decoder(hundreds);//hundreds
 5b0:	80 2f       	mov	r24, r16
 5b2:	0e 94 2f 02 	call	0x45e	; 0x45e <decoder>
 5b6:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <segment_data+0x1>
  segment_data[2] = 0b11111111;//everyting off for colon
 5ba:	df ef       	ldi	r29, 0xFF	; 255
 5bc:	d0 93 20 01 	sts	0x0120, r29	; 0x800120 <segment_data+0x2>
  segment_data[3] = decoder(tens);//tens
 5c0:	8a 2d       	mov	r24, r10
 5c2:	0e 94 2f 02 	call	0x45e	; 0x45e <decoder>
 5c6:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <segment_data+0x3>
  segment_data[4] = decoder(ones);//ones
 5ca:	8c 2f       	mov	r24, r28
 5cc:	9a e0       	ldi	r25, 0x0A	; 10
 5ce:	c9 9e       	mul	r12, r25
 5d0:	80 19       	sub	r24, r0
 5d2:	11 24       	eor	r1, r1
 5d4:	0e 94 2f 02 	call	0x45e	; 0x45e <decoder>
 5d8:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <segment_data+0x4>

  //blank out leading zero digits
  // and move data to right place for misplaced colon position
  if ((thousands == 0) && (hundreds==0) && (tens ==0)) {// three leading zeros
 5dc:	f1 10       	cpse	r15, r1
 5de:	08 c0       	rjmp	.+16     	; 0x5f0 <segsum+0x13e>
    segment_data[0] = 0b11111111;
 5e0:	d0 93 1e 01 	sts	0x011E, r29	; 0x80011e <segment_data>
  segment_data[3] = decoder(tens);//tens
  segment_data[4] = decoder(ones);//ones

  //blank out leading zero digits
  // and move data to right place for misplaced colon position
  if ((thousands == 0) && (hundreds==0) && (tens ==0)) {// three leading zeros
 5e4:	01 11       	cpse	r16, r1
 5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <segsum+0x13e>
    segment_data[0] = 0b11111111;
    segment_data[1] = 0b11111111;
 5e8:	d0 93 1f 01 	sts	0x011F, r29	; 0x80011f <segment_data+0x1>
  segment_data[3] = decoder(tens);//tens
  segment_data[4] = decoder(ones);//ones

  //blank out leading zero digits
  // and move data to right place for misplaced colon position
  if ((thousands == 0) && (hundreds==0) && (tens ==0)) {// three leading zeros
 5ec:	aa 20       	and	r10, r10
 5ee:	51 f0       	breq	.+20     	; 0x604 <segsum+0x152>
    segment_data[0] = 0b11111111;
    segment_data[1] = 0b11111111;
  }else if (thousands==0){
    segment_data[0] = 0b11111111;//1 zero off
  }
}//segment_sum
 5f0:	df 91       	pop	r29
 5f2:	cf 91       	pop	r28
 5f4:	1f 91       	pop	r17
 5f6:	0f 91       	pop	r16
 5f8:	ff 90       	pop	r15
 5fa:	df 90       	pop	r13
 5fc:	cf 90       	pop	r12
 5fe:	bf 90       	pop	r11
 600:	af 90       	pop	r10
 602:	08 95       	ret
  //blank out leading zero digits
  // and move data to right place for misplaced colon position
  if ((thousands == 0) && (hundreds==0) && (tens ==0)) {// three leading zeros
    segment_data[0] = 0b11111111;
    segment_data[1] = 0b11111111;
    segment_data[3] = 0b11111111;
 604:	d0 93 21 01 	sts	0x0121, r29	; 0x800121 <segment_data+0x3>
 608:	f3 cf       	rjmp	.-26     	; 0x5f0 <segsum+0x13e>

0000060a <main>:
//***********************************************************************
//                           init_tcnt0
//***********************************************************************
//initalize timer/counter zero to normal mode
void init_tcnt0(){
  TIMSK |= (1<<TOIE0);//set interrupt for overflow
 60a:	87 b7       	in	r24, 0x37	; 55
 60c:	81 60       	ori	r24, 0x01	; 1
 60e:	87 bf       	out	0x37, r24	; 55
  TCCR0 |=  (1<<CS02) | (1<<CS00);  //normal mode, 128 prescale
 610:	83 b7       	in	r24, 0x33	; 51
 612:	85 60       	ori	r24, 0x05	; 5
 614:	83 bf       	out	0x33, r24	; 51
//***********************************************************************
//                            spi_init
//**********************************************************************
void spi_init(void){
  //DDRB should be 0x87, 0x97 is for testing
  DDRB   = 0x97; //output mode for SS, MOSI, SCLK, and output for OE_EN
 616:	87 e9       	ldi	r24, 0x97	; 151
 618:	87 bb       	out	0x17, r24	; 23
  SPCR   = (1<<SPE) | (1<<MSTR) ; //master mode, clk low on idle, leading edge sample
 61a:	80 e5       	ldi	r24, 0x50	; 80
 61c:	8d b9       	out	0x0d, r24	; 13
  SPSR   = (1<<SPI2X); //choose double speed operation
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	8e b9       	out	0x0e, r24	; 14

int main()
{
  init_tcnt0();//initalize timer/counter 0
  spi_init();// initalize SPI protocol
  sei();//enable global interrupts
 622:	78 94       	sei
  DDRC = 0xF0;//set PORTC as output (never changes)
 624:	80 ef       	ldi	r24, 0xF0	; 240
 626:	84 bb       	out	0x14, r24	; 20
  DDRE = 0xC0;//set PORTE PIN 6 and 7 as ouputs(never changes)
 628:	80 ec       	ldi	r24, 0xC0	; 192
 62a:	82 b9       	out	0x02, r24	; 2
  PORTE =0xC0;//set SH/LD and CLK_INH high (low enabled)
 62c:	83 b9       	out	0x03, r24	; 3
  uint8_t digit_sel = 0;//digit select
 62e:	c0 e0       	ldi	r28, 0x00	; 0
Return:void
***************************************************************/
void display_mode(){
  SPDR = mode;//send value to register
  while(bit_is_clear(SPSR,SPIF)){}
  PORTB ^=(1<<BIT0);//send rising edge to regclk on HC595
 630:	d1 e0       	ldi	r29, 0x01	; 1
    segsum(ext_count);//break up the disp_value to 4, BCD digits in the array

    if (digit_sel > 4) {//bound a counter (0-4)
      digit_sel = 0;
    }
    DDRA = 0xFF;//make PORTA output for Seven segment
 632:	1f ef       	ldi	r17, 0xFF	; 255
    PORTA = segment_data[digit_sel];//send 7 segment code to LED segments
    //send PORTB the digit to display & power ON to seven seg(bit7=0)
    if (digit_sel == 0) {
      PORTC = 0b01000000;//thousands digit
 634:	00 e4       	ldi	r16, 0x40	; 64
    }else if (digit_sel==1) {
      PORTC = 0b00110000;//hundreds digit
    }else if (digit_sel==2) {
      PORTC = 0b00100000;//colon digit
    }else if (digit_sel==3) {
      PORTC = 0b00010000;//tens digit
 636:	80 e1       	ldi	r24, 0x10	; 16
 638:	d8 2e       	mov	r13, r24
    if (digit_sel == 0) {
      PORTC = 0b01000000;//thousands digit
    }else if (digit_sel==1) {
      PORTC = 0b00110000;//hundreds digit
    }else if (digit_sel==2) {
      PORTC = 0b00100000;//colon digit
 63a:	90 e2       	ldi	r25, 0x20	; 32
 63c:	e9 2e       	mov	r14, r25
    PORTA = segment_data[digit_sel];//send 7 segment code to LED segments
    //send PORTB the digit to display & power ON to seven seg(bit7=0)
    if (digit_sel == 0) {
      PORTC = 0b01000000;//thousands digit
    }else if (digit_sel==1) {
      PORTC = 0b00110000;//hundreds digit
 63e:	20 e3       	ldi	r18, 0x30	; 48
 640:	f2 2e       	mov	r15, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 642:	8f e3       	ldi	r24, 0x3F	; 63
 644:	9f e1       	ldi	r25, 0x1F	; 31
 646:	01 97       	sbiw	r24, 0x01	; 1
 648:	f1 f7       	brne	.-4      	; 0x646 <main+0x3c>
 64a:	00 c0       	rjmp	.+0      	; 0x64c <main+0x42>
 64c:	00 00       	nop
  This function will display the mode on the bargraph
Parameters: NONE
Return:void
***************************************************************/
void display_mode(){
  SPDR = mode;//send value to register
 64e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <mode>
 652:	8f b9       	out	0x0f, r24	; 15
  while(bit_is_clear(SPSR,SPIF)){}
 654:	77 9b       	sbis	0x0e, 7	; 14
 656:	fe cf       	rjmp	.-4      	; 0x654 <main+0x4a>
  PORTB ^=(1<<BIT0);//send rising edge to regclk on HC595
 658:	88 b3       	in	r24, 0x18	; 24
 65a:	8d 27       	eor	r24, r29
 65c:	88 bb       	out	0x18, r24	; 24
  PORTB ^=(1<<BIT0);//send falling edge to reglck on HC595
 65e:	88 b3       	in	r24, 0x18	; 24
 660:	8d 27       	eor	r24, r29
 662:	88 bb       	out	0x18, r24	; 24


  while (1) {
    _delay_ms(2);
    display_mode();//display mode on bar graph
    segsum(ext_count);//break up the disp_value to 4, BCD digits in the array
 664:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ext_count>
 668:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ext_count+0x1>
 66c:	0e 94 59 02 	call	0x4b2	; 0x4b2 <segsum>

    if (digit_sel > 4) {//bound a counter (0-4)
      digit_sel = 0;
    }
    DDRA = 0xFF;//make PORTA output for Seven segment
 670:	1a bb       	out	0x1a, r17	; 26
  while (1) {
    _delay_ms(2);
    display_mode();//display mode on bar graph
    segsum(ext_count);//break up the disp_value to 4, BCD digits in the array

    if (digit_sel > 4) {//bound a counter (0-4)
 672:	c5 30       	cpi	r28, 0x05	; 5
 674:	88 f4       	brcc	.+34     	; 0x698 <main+0x8e>
      digit_sel = 0;
    }
    DDRA = 0xFF;//make PORTA output for Seven segment
    PORTA = segment_data[digit_sel];//send 7 segment code to LED segments
 676:	ec 2f       	mov	r30, r28
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	e2 5e       	subi	r30, 0xE2	; 226
 67c:	fe 4f       	sbci	r31, 0xFE	; 254
 67e:	80 81       	ld	r24, Z
 680:	8b bb       	out	0x1b, r24	; 27
    //send PORTB the digit to display & power ON to seven seg(bit7=0)
    if (digit_sel == 0) {
 682:	cc 23       	and	r28, r28
 684:	61 f0       	breq	.+24     	; 0x69e <main+0x94>
      PORTC = 0b01000000;//thousands digit
    }else if (digit_sel==1) {
 686:	c1 30       	cpi	r28, 0x01	; 1
 688:	69 f0       	breq	.+26     	; 0x6a4 <main+0x9a>
      PORTC = 0b00110000;//hundreds digit
    }else if (digit_sel==2) {
 68a:	c2 30       	cpi	r28, 0x02	; 2
 68c:	71 f0       	breq	.+28     	; 0x6aa <main+0xa0>
      PORTC = 0b00100000;//colon digit
    }else if (digit_sel==3) {
 68e:	c3 30       	cpi	r28, 0x03	; 3
 690:	79 f0       	breq	.+30     	; 0x6b0 <main+0xa6>
      PORTC = 0b00010000;//tens digit
    }else if (digit_sel==4) {
      PORTC =0b00000000;//one digit
 692:	15 ba       	out	0x15, r1	; 21
 694:	c5 e0       	ldi	r28, 0x05	; 5
    }
    digit_sel++;//update digit to display(increment)
  }
 696:	d5 cf       	rjmp	.-86     	; 0x642 <main+0x38>

    if (digit_sel > 4) {//bound a counter (0-4)
      digit_sel = 0;
    }
    DDRA = 0xFF;//make PORTA output for Seven segment
    PORTA = segment_data[digit_sel];//send 7 segment code to LED segments
 698:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <segment_data>
 69c:	8b bb       	out	0x1b, r24	; 27
    //send PORTB the digit to display & power ON to seven seg(bit7=0)
    if (digit_sel == 0) {
      PORTC = 0b01000000;//thousands digit
 69e:	05 bb       	out	0x15, r16	; 21
 6a0:	c1 e0       	ldi	r28, 0x01	; 1
 6a2:	cf cf       	rjmp	.-98     	; 0x642 <main+0x38>
    }else if (digit_sel==1) {
      PORTC = 0b00110000;//hundreds digit
 6a4:	f5 ba       	out	0x15, r15	; 21
 6a6:	c2 e0       	ldi	r28, 0x02	; 2
 6a8:	cc cf       	rjmp	.-104    	; 0x642 <main+0x38>
    }else if (digit_sel==2) {
      PORTC = 0b00100000;//colon digit
 6aa:	e5 ba       	out	0x15, r14	; 21
 6ac:	c3 e0       	ldi	r28, 0x03	; 3
 6ae:	c9 cf       	rjmp	.-110    	; 0x642 <main+0x38>
    }else if (digit_sel==3) {
      PORTC = 0b00010000;//tens digit
 6b0:	d5 ba       	out	0x15, r13	; 21
 6b2:	c4 e0       	ldi	r28, 0x04	; 4
 6b4:	c6 cf       	rjmp	.-116    	; 0x642 <main+0x38>

000006b6 <__umulhisi3>:
 6b6:	a2 9f       	mul	r26, r18
 6b8:	b0 01       	movw	r22, r0
 6ba:	b3 9f       	mul	r27, r19
 6bc:	c0 01       	movw	r24, r0
 6be:	a3 9f       	mul	r26, r19
 6c0:	70 0d       	add	r23, r0
 6c2:	81 1d       	adc	r24, r1
 6c4:	11 24       	eor	r1, r1
 6c6:	91 1d       	adc	r25, r1
 6c8:	b2 9f       	mul	r27, r18
 6ca:	70 0d       	add	r23, r0
 6cc:	81 1d       	adc	r24, r1
 6ce:	11 24       	eor	r1, r1
 6d0:	91 1d       	adc	r25, r1
 6d2:	08 95       	ret

000006d4 <_exit>:
 6d4:	f8 94       	cli

000006d6 <__stop_program>:
 6d6:	ff cf       	rjmp	.-2      	; 0x6d6 <__stop_program>
