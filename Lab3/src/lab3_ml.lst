
lab3_ml.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000078e  00000822  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000078e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800102  00800102  00000824  2**0
                  ALLOC
  3 .stab         000010ec  00000000  00000000  00000824  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f4b  00000000  00000000  00001910  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000285b  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000286c  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  000028a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00003028  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00003740  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  0000375a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 31 02 	jmp	0x462	; 0x462 <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e8       	ldi	r30, 0x8E	; 142
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 32       	cpi	r26, 0x23	; 35
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 60 03 	call	0x6c0	; 0x6c0 <main>
  c6:	0c 94 c5 03 	jmp	0x78a	; 0x78a <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <debounce_switch>:
//the button is pushed. Function returns a 1 only once per debounced button
//push so a debounce and toggle function can be implemented at the same time.
//Adapted to check all buttons from Ganssel's "Guide to Debouncing"
//Expects active low pushbuttons on PINA port.
//
uint8_t debounce_switch(uint8_t pin) {
  ce:	48 2f       	mov	r20, r24
  static uint16_t state[8] = {0};
  state[pin] = (state[pin]<<1)|(!bit_is_clear(PINA,pin))|0xE000;
  d0:	e8 2f       	mov	r30, r24
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	99 b3       	in	r25, 0x19	; 25
  d6:	ee 0f       	add	r30, r30
  d8:	ff 1f       	adc	r31, r31
  da:	e2 5f       	subi	r30, 0xF2	; 242
  dc:	fe 4f       	sbci	r31, 0xFE	; 254
  de:	20 81       	ld	r18, Z
  e0:	31 81       	ldd	r19, Z+1	; 0x01
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	30 6e       	ori	r19, 0xE0	; 224
  e8:	89 2f       	mov	r24, r25
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <debounce_switch+0x24>
  ee:	95 95       	asr	r25
  f0:	87 95       	ror	r24
  f2:	4a 95       	dec	r20
  f4:	e2 f7       	brpl	.-8      	; 0xee <debounce_switch+0x20>
  f6:	81 70       	andi	r24, 0x01	; 1
  f8:	99 27       	eor	r25, r25
  fa:	28 2b       	or	r18, r24
  fc:	39 2b       	or	r19, r25
  fe:	31 83       	std	Z+1, r19	; 0x01
 100:	20 83       	st	Z, r18
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	21 15       	cp	r18, r1
 106:	30 4f       	sbci	r19, 0xF0	; 240
 108:	09 f0       	breq	.+2      	; 0x10c <debounce_switch+0x3e>
 10a:	80 e0       	ldi	r24, 0x00	; 0
  if (state[pin]==0xF000) {
    return 1;
  }
  return 0;
}
 10c:	08 95       	ret

0000010e <spi_init>:
//***********************************************************************
//                            spi_init
//**********************************************************************
void spi_init(void){
  //DDRB should be 0x87, 0x97 is for testing
  DDRB   = 0x97; //output mode for SS, MOSI, SCLK, and output for OE_EN
 10e:	87 e9       	ldi	r24, 0x97	; 151
 110:	87 bb       	out	0x17, r24	; 23
  SPCR   = (1<<SPE) | (1<<MSTR) ; //master mode, clk low on idle, leading edge sample
 112:	80 e5       	ldi	r24, 0x50	; 80
 114:	8d b9       	out	0x0d, r24	; 13
  SPSR   = (1<<SPI2X); //choose double speed operation
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	8e b9       	out	0x0e, r24	; 14
 11a:	08 95       	ret

0000011c <spi_read>:
Return:
  uint8_t value that contains the value of SPDR register
***************************************************************/
 uint8_t spi_read(void)
{
  SPDR = 0x00;
 11c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)) {}
 11e:	77 9b       	sbis	0x0e, 7	; 14
 120:	fe cf       	rjmp	.-4      	; 0x11e <spi_read+0x2>
  return(SPDR);
 122:	8f b1       	in	r24, 0x0f	; 15
}
 124:	08 95       	ret

00000126 <init_tcnt0>:
//***********************************************************************
//                           init_tcnt0
//***********************************************************************
//initalize timer/counter zero to normal mode
void init_tcnt0(){
  TIMSK |= (1<<TOIE0);//set interrupt for overflow
 126:	87 b7       	in	r24, 0x37	; 55
 128:	81 60       	ori	r24, 0x01	; 1
 12a:	87 bf       	out	0x37, r24	; 55
  TCCR0 |=  (1<<CS02) | (1<<CS00);  //normal mode, 128 prescale
 12c:	83 b7       	in	r24, 0x33	; 51
 12e:	85 60       	ori	r24, 0x05	; 5
 130:	83 bf       	out	0x33, r24	; 51
 132:	08 95       	ret

00000134 <update_inc_dec>:
  This function will update the increase and decrese value
Parameters: NONE
Return:void
***************************************************************/
void update_inc_dec(){
  if (mode == 0) {// increas/decrease 1
 134:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <mode>
 138:	88 23       	and	r24, r24
 13a:	69 f0       	breq	.+26     	; 0x156 <update_inc_dec+0x22>
    inc_dec1 = 1;
  }else if (mode == 1) {//increase/dec 2
 13c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <mode>
 140:	81 30       	cpi	r24, 0x01	; 1
 142:	81 f0       	breq	.+32     	; 0x164 <update_inc_dec+0x30>
    inc_dec1 = 2;
  }else if (mode == 2) {//inc/dec 4
 144:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <mode>
 148:	82 30       	cpi	r24, 0x02	; 2
 14a:	81 f0       	breq	.+32     	; 0x16c <update_inc_dec+0x38>
    inc_dec1 = 4;
  }else if (mode == 3) {//inc/dec 0
 14c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <mode>
 150:	83 30       	cpi	r24, 0x03	; 3
 152:	29 f0       	breq	.+10     	; 0x15e <update_inc_dec+0x2a>
 154:	08 95       	ret
Parameters: NONE
Return:void
***************************************************************/
void update_inc_dec(){
  if (mode == 0) {// increas/decrease 1
    inc_dec1 = 1;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <inc_dec1>
 15c:	08 95       	ret
  }else if (mode == 1) {//increase/dec 2
    inc_dec1 = 2;
  }else if (mode == 2) {//inc/dec 4
    inc_dec1 = 4;
  }else if (mode == 3) {//inc/dec 0
    inc_dec1 = 0;
 15e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <inc_dec1>
 162:	08 95       	ret
***************************************************************/
void update_inc_dec(){
  if (mode == 0) {// increas/decrease 1
    inc_dec1 = 1;
  }else if (mode == 1) {//increase/dec 2
    inc_dec1 = 2;
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <inc_dec1>
 16a:	08 95       	ret
  }else if (mode == 2) {//inc/dec 4
    inc_dec1 = 4;
 16c:	84 e0       	ldi	r24, 0x04	; 4
 16e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <inc_dec1>
 172:	08 95       	ret

00000174 <update_mode>:
Parameters: NONE
Return:void
***************************************************************/
void update_mode() {
  //Reconfigure the PORTS to read from the pushbuttons:
  DDRA = 0x00;//set PORT A to all inputs
 174:	1a ba       	out	0x1a, r1	; 26
  PORTA = 0xFF;//set PORTA all pullups
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	8b bb       	out	0x1b, r24	; 27
  PORTC = 0xF0;//power off to Seven segment and ENABLE TRI buffer
 17a:	80 ef       	ldi	r24, 0xF0	; 240
 17c:	85 bb       	out	0x15, r24	; 21

  for(n = 0; n<2;n++){//only check button 0 and 1
 17e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <n>
 182:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <n>
 186:	82 30       	cpi	r24, 0x02	; 2
 188:	f0 f5       	brcc	.+124    	; 0x206 <update_mode+0x92>
    if (debounce_switch(n)) {
      if (n == 0) {//button 0
        mode ^= (1<<BIT0);//increment by two mode (toggle bit 0)
      }else if (n==1) {//button 1
        mode ^= (1<<BIT1);//increment by four mode (toggle bit 1)
 18a:	62 e0       	ldi	r22, 0x02	; 2
  PORTC = 0xF0;//power off to Seven segment and ENABLE TRI buffer

  for(n = 0; n<2;n++){//only check button 0 and 1
    if (debounce_switch(n)) {
      if (n == 0) {//button 0
        mode ^= (1<<BIT0);//increment by two mode (toggle bit 0)
 18c:	51 e0       	ldi	r21, 0x01	; 1
 18e:	09 c0       	rjmp	.+18     	; 0x1a2 <update_mode+0x2e>
  //Reconfigure the PORTS to read from the pushbuttons:
  DDRA = 0x00;//set PORT A to all inputs
  PORTA = 0xFF;//set PORTA all pullups
  PORTC = 0xF0;//power off to Seven segment and ENABLE TRI buffer

  for(n = 0; n<2;n++){//only check button 0 and 1
 190:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <n>
 194:	8f 5f       	subi	r24, 0xFF	; 255
 196:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <n>
 19a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <n>
 19e:	82 30       	cpi	r24, 0x02	; 2
 1a0:	90 f5       	brcc	.+100    	; 0x206 <update_mode+0x92>
    if (debounce_switch(n)) {
 1a2:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <n>
//Adapted to check all buttons from Ganssel's "Guide to Debouncing"
//Expects active low pushbuttons on PINA port.
//
uint8_t debounce_switch(uint8_t pin) {
  static uint16_t state[8] = {0};
  state[pin] = (state[pin]<<1)|(!bit_is_clear(PINA,pin))|0xE000;
 1a6:	e4 2f       	mov	r30, r20
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	99 b3       	in	r25, 0x19	; 25
 1ac:	ee 0f       	add	r30, r30
 1ae:	ff 1f       	adc	r31, r31
 1b0:	e2 5f       	subi	r30, 0xF2	; 242
 1b2:	fe 4f       	sbci	r31, 0xFE	; 254
 1b4:	20 81       	ld	r18, Z
 1b6:	31 81       	ldd	r19, Z+1	; 0x01
 1b8:	22 0f       	add	r18, r18
 1ba:	33 1f       	adc	r19, r19
 1bc:	30 6e       	ori	r19, 0xE0	; 224
 1be:	89 2f       	mov	r24, r25
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <update_mode+0x54>
 1c4:	95 95       	asr	r25
 1c6:	87 95       	ror	r24
 1c8:	4a 95       	dec	r20
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <update_mode+0x50>
 1cc:	81 70       	andi	r24, 0x01	; 1
 1ce:	99 27       	eor	r25, r25
 1d0:	82 2b       	or	r24, r18
 1d2:	93 2b       	or	r25, r19
 1d4:	91 83       	std	Z+1, r25	; 0x01
 1d6:	80 83       	st	Z, r24
  if (state[pin]==0xF000) {
 1d8:	81 15       	cp	r24, r1
 1da:	90 4f       	sbci	r25, 0xF0	; 240
 1dc:	c9 f6       	brne	.-78     	; 0x190 <update_mode+0x1c>
  PORTA = 0xFF;//set PORTA all pullups
  PORTC = 0xF0;//power off to Seven segment and ENABLE TRI buffer

  for(n = 0; n<2;n++){//only check button 0 and 1
    if (debounce_switch(n)) {
      if (n == 0) {//button 0
 1de:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <n>
 1e2:	81 11       	cpse	r24, r1
 1e4:	06 c0       	rjmp	.+12     	; 0x1f2 <update_mode+0x7e>
        mode ^= (1<<BIT0);//increment by two mode (toggle bit 0)
 1e6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <mode>
 1ea:	85 27       	eor	r24, r21
 1ec:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <mode>
 1f0:	cf cf       	rjmp	.-98     	; 0x190 <update_mode+0x1c>
      }else if (n==1) {//button 1
 1f2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <n>
 1f6:	81 30       	cpi	r24, 0x01	; 1
 1f8:	59 f6       	brne	.-106    	; 0x190 <update_mode+0x1c>
        mode ^= (1<<BIT1);//increment by four mode (toggle bit 1)
 1fa:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <mode>
 1fe:	86 27       	eor	r24, r22
 200:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <mode>
 204:	c5 cf       	rjmp	.-118    	; 0x190 <update_mode+0x1c>
      }
    }
  }
  update_inc_dec();
 206:	0e 94 9a 00 	call	0x134	; 0x134 <update_inc_dec>
  PORTC = 0xE0;//DISABLE Tri buffer (power still off to seven seg)
 20a:	80 ee       	ldi	r24, 0xE0	; 224
 20c:	85 bb       	out	0x15, r24	; 21
}
 20e:	08 95       	ret

00000210 <read_encoders>:
  or decrement the counta accordingly
Parameters: NONE
Return:void
***************************************************************/
void read_encoders(){
  PORTE ^= (1<<SH_LD);//toggle to low
 210:	93 b1       	in	r25, 0x03	; 3
 212:	80 e4       	ldi	r24, 0x40	; 64
 214:	98 27       	eor	r25, r24
 216:	93 b9       	out	0x03, r25	; 3
  PORTE ^= (1<<SH_LD);//toggle back to high
 218:	93 b1       	in	r25, 0x03	; 3
 21a:	89 27       	eor	r24, r25
 21c:	83 b9       	out	0x03, r24	; 3
  PORTE ^= (1<<CLK_INH);//toggle to low
 21e:	83 b1       	in	r24, 0x03	; 3
 220:	80 58       	subi	r24, 0x80	; 128
 222:	83 b9       	out	0x03, r24	; 3
Return:
  uint8_t value that contains the value of SPDR register
***************************************************************/
 uint8_t spi_read(void)
{
  SPDR = 0x00;
 224:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)) {}
 226:	77 9b       	sbis	0x0e, 7	; 14
 228:	fe cf       	rjmp	.-4      	; 0x226 <read_encoders+0x16>
  return(SPDR);
 22a:	8f b1       	in	r24, 0x0f	; 15
***************************************************************/
void read_encoders(){
  PORTE ^= (1<<SH_LD);//toggle to low
  PORTE ^= (1<<SH_LD);//toggle back to high
  PORTE ^= (1<<CLK_INH);//toggle to low
  encoder_val= spi_read();
 22c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
  PORTE ^= (1<<CLK_INH);//toggle to high
 230:	83 b1       	in	r24, 0x03	; 3
 232:	80 58       	subi	r24, 0x80	; 128
 234:	83 b9       	out	0x03, r24	; 3

  //"clean" encoder1 value
  encoder1_present = encoder_val;
 236:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 23a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <encoder1_present>
  for ( bitn = 7; bitn > 1; bitn--) {
 23e:	87 e0       	ldi	r24, 0x07	; 7
 240:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <bitn>
 244:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <bitn>
 248:	82 30       	cpi	r24, 0x02	; 2
 24a:	d8 f0       	brcs	.+54     	; 0x282 <read_encoders+0x72>
    encoder1_present &= ~(1<<bitn);
 24c:	41 e0       	ldi	r20, 0x01	; 1
 24e:	50 e0       	ldi	r21, 0x00	; 0
 250:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <bitn>
 254:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <encoder1_present>
 258:	ba 01       	movw	r22, r20
 25a:	02 c0       	rjmp	.+4      	; 0x260 <read_encoders+0x50>
 25c:	66 0f       	add	r22, r22
 25e:	77 1f       	adc	r23, r23
 260:	8a 95       	dec	r24
 262:	e2 f7       	brpl	.-8      	; 0x25c <read_encoders+0x4c>
 264:	cb 01       	movw	r24, r22
 266:	80 95       	com	r24
 268:	90 95       	com	r25
 26a:	82 23       	and	r24, r18
 26c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <encoder1_present>
  encoder_val= spi_read();
  PORTE ^= (1<<CLK_INH);//toggle to high

  //"clean" encoder1 value
  encoder1_present = encoder_val;
  for ( bitn = 7; bitn > 1; bitn--) {
 270:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <bitn>
 274:	81 50       	subi	r24, 0x01	; 1
 276:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <bitn>
 27a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <bitn>
 27e:	82 30       	cpi	r24, 0x02	; 2
 280:	38 f7       	brcc	.-50     	; 0x250 <read_encoders+0x40>
    encoder1_present &= ~(1<<bitn);
  }
  //"clean" encoder2 value
  encoder2_present = (encoder_val>>2);//RS so that we get rid bit 0:1
 282:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 286:	86 95       	lsr	r24
 288:	86 95       	lsr	r24
 28a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <encoder2_present>
  for ( bitn = 7; bitn > 1; bitn--) {
 28e:	87 e0       	ldi	r24, 0x07	; 7
 290:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <bitn>
 294:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <bitn>
 298:	82 30       	cpi	r24, 0x02	; 2
 29a:	d8 f0       	brcs	.+54     	; 0x2d2 <read_encoders+0xc2>
    encoder2_present &= ~(1<<bitn);
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	50 e0       	ldi	r21, 0x00	; 0
 2a0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <bitn>
 2a4:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <encoder2_present>
 2a8:	ba 01       	movw	r22, r20
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <read_encoders+0xa0>
 2ac:	66 0f       	add	r22, r22
 2ae:	77 1f       	adc	r23, r23
 2b0:	8a 95       	dec	r24
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <read_encoders+0x9c>
 2b4:	cb 01       	movw	r24, r22
 2b6:	80 95       	com	r24
 2b8:	90 95       	com	r25
 2ba:	82 23       	and	r24, r18
 2bc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <encoder2_present>
  for ( bitn = 7; bitn > 1; bitn--) {
    encoder1_present &= ~(1<<bitn);
  }
  //"clean" encoder2 value
  encoder2_present = (encoder_val>>2);//RS so that we get rid bit 0:1
  for ( bitn = 7; bitn > 1; bitn--) {
 2c0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <bitn>
 2c4:	81 50       	subi	r24, 0x01	; 1
 2c6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <bitn>
 2ca:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <bitn>
 2ce:	82 30       	cpi	r24, 0x02	; 2
 2d0:	38 f7       	brcc	.-50     	; 0x2a0 <read_encoders+0x90>
    encoder2_present &= ~(1<<bitn);
  }

  if (reset == 1) {
 2d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	09 f4       	brne	.+2      	; 0x2dc <read_encoders+0xcc>
 2da:	64 c0       	rjmp	.+200    	; 0x3a4 <read_encoders+0x194>
    encoder2_past = encoder2_present;//set them equal
    reset = 0;//set to zero after first time
  }

  //Update for encoder1
  switch (encoder1_present) {
 2dc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <encoder1_present>
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	b9 f1       	breq	.+110    	; 0x352 <read_encoders+0x142>
 2e4:	08 f4       	brcc	.+2      	; 0x2e8 <read_encoders+0xd8>
 2e6:	69 c0       	rjmp	.+210    	; 0x3ba <read_encoders+0x1aa>
 2e8:	82 30       	cpi	r24, 0x02	; 2
 2ea:	d1 f0       	breq	.+52     	; 0x320 <read_encoders+0x110>
 2ec:	83 30       	cpi	r24, 0x03	; 3
 2ee:	09 f0       	breq	.+2      	; 0x2f2 <read_encoders+0xe2>
 2f0:	6d c0       	rjmp	.+218    	; 0x3cc <read_encoders+0x1bc>
        ext_count -= inc_dec1;
        encoder1_past = encoder1_present;
      }
      break;
    case 3:
      if (encoder1_past == 1) {
 2f2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <encoder1_past>
 2f6:	81 30       	cpi	r24, 0x01	; 1
 2f8:	81 f1       	breq	.+96     	; 0x35a <read_encoders+0x14a>
        ext_count+= inc_dec1;
        encoder1_past = encoder1_present;
      }else if (encoder1_past == 2 ) {
 2fa:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <encoder1_past>
 2fe:	82 30       	cpi	r24, 0x02	; 2
 300:	b9 f0       	breq	.+46     	; 0x330 <read_encoders+0x120>
      ext_count +=0;//add nothing
      break;
  }

  //Update for encoder 2
  switch (encoder2_present) {
 302:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <encoder2_present>
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	e1 f5       	brne	.+120    	; 0x382 <read_encoders+0x172>
    case 1:
      if (encoder2_past == 0) {
 30a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <encoder2_past>
 30e:	88 23       	and	r24, r24
 310:	09 f4       	brne	.+2      	; 0x314 <read_encoders+0x104>
 312:	96 c0       	rjmp	.+300    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
        ext_count += inc_dec1;
        encoder2_past = encoder2_present;
      }else if (encoder2_past == 3 ) {
 314:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <encoder2_past>
 318:	83 30       	cpi	r24, 0x03	; 3
 31a:	09 f4       	brne	.+2      	; 0x31e <read_encoders+0x10e>
 31c:	71 c0       	rjmp	.+226    	; 0x400 <__LOCK_REGION_LENGTH__>
 31e:	08 95       	ret
        ext_count -=inc_dec1;
        encoder1_past = encoder1_present;
      }
      break;
    case 2:
      if (encoder1_past == 3) {
 320:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <encoder1_past>
 324:	83 30       	cpi	r24, 0x03	; 3
 326:	c9 f0       	breq	.+50     	; 0x35a <read_encoders+0x14a>
        ext_count += inc_dec1;
        encoder1_past = encoder1_present;
      }else if (encoder1_past == 0) {
 328:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <encoder1_past>
 32c:	81 11       	cpse	r24, r1
 32e:	25 c0       	rjmp	.+74     	; 0x37a <read_encoders+0x16a>
    case 0:
      if (encoder1_past == 2) {
        ext_count += inc_dec1;
        encoder1_past = encoder1_present;
      }else if (encoder1_past == 1) {
        ext_count -= inc_dec1;
 330:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <inc_dec1>
 334:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ext_count>
 338:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ext_count+0x1>
 33c:	82 1b       	sub	r24, r18
 33e:	91 09       	sbc	r25, r1
 340:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <ext_count+0x1>
 344:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ext_count>
        encoder1_past = encoder1_present;
 348:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <encoder1_present>
 34c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <encoder1_past>
 350:	14 c0       	rjmp	.+40     	; 0x37a <read_encoders+0x16a>
  }

  //Update for encoder1
  switch (encoder1_present) {
    case 1:
      if (encoder1_past == 0) {
 352:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <encoder1_past>
 356:	81 11       	cpse	r24, r1
 358:	6d c0       	rjmp	.+218    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
        encoder1_past = encoder1_present;
      }
      break;
    case 0:
      if (encoder1_past == 2) {
        ext_count += inc_dec1;
 35a:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <inc_dec1>
 35e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ext_count>
 362:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ext_count+0x1>
 366:	82 0f       	add	r24, r18
 368:	91 1d       	adc	r25, r1
 36a:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <ext_count+0x1>
 36e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ext_count>
        encoder1_past = encoder1_present;
 372:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <encoder1_present>
 376:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <encoder1_past>
      ext_count +=0;//add nothing
      break;
  }

  //Update for encoder 2
  switch (encoder2_present) {
 37a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <encoder2_present>
 37e:	81 30       	cpi	r24, 0x01	; 1
 380:	21 f2       	breq	.-120    	; 0x30a <read_encoders+0xfa>
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	08 f4       	brcc	.+2      	; 0x388 <read_encoders+0x178>
 386:	4d c0       	rjmp	.+154    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 388:	82 30       	cpi	r24, 0x02	; 2
 38a:	91 f1       	breq	.+100    	; 0x3f0 <read_encoders+0x1e0>
 38c:	83 30       	cpi	r24, 0x03	; 3
 38e:	39 f5       	brne	.+78     	; 0x3de <read_encoders+0x1ce>
        ext_count -= inc_dec1;
        encoder2_past = encoder2_present;
      }
      break;
    case 3:
      if (encoder2_past == 1) {
 390:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <encoder2_past>
 394:	81 30       	cpi	r24, 0x01	; 1
 396:	09 f4       	brne	.+2      	; 0x39a <read_encoders+0x18a>
 398:	53 c0       	rjmp	.+166    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
        ext_count+= inc_dec1;
        encoder2_past = encoder2_present;
      }else if (encoder2_past == 2 ) {
 39a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <encoder2_past>
 39e:	82 30       	cpi	r24, 0x02	; 2
 3a0:	79 f1       	breq	.+94     	; 0x400 <__LOCK_REGION_LENGTH__>
 3a2:	08 95       	ret
  for ( bitn = 7; bitn > 1; bitn--) {
    encoder2_present &= ~(1<<bitn);
  }

  if (reset == 1) {
    encoder1_past = encoder1_present;//set them equal
 3a4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <encoder1_present>
 3a8:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <encoder1_past>
    encoder2_past = encoder2_present;//set them equal
 3ac:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <encoder2_present>
 3b0:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <encoder2_past>
    reset = 0;//set to zero after first time
 3b4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 3b8:	91 cf       	rjmp	.-222    	; 0x2dc <read_encoders+0xcc>
        ext_count -= inc_dec1;
        encoder1_past = encoder1_present;
      }
      break;
    case 0:
      if (encoder1_past == 2) {
 3ba:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <encoder1_past>
 3be:	82 30       	cpi	r24, 0x02	; 2
 3c0:	61 f2       	breq	.-104    	; 0x35a <read_encoders+0x14a>
        ext_count += inc_dec1;
        encoder1_past = encoder1_present;
      }else if (encoder1_past == 1) {
 3c2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <encoder1_past>
 3c6:	81 30       	cpi	r24, 0x01	; 1
 3c8:	c1 f6       	brne	.-80     	; 0x37a <read_encoders+0x16a>
 3ca:	b2 cf       	rjmp	.-156    	; 0x330 <read_encoders+0x120>
        ext_count -= inc_dec1;
        encoder1_past = encoder1_present;
      }
      break;
    default:
      ext_count +=0;//add nothing
 3cc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ext_count>
 3d0:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ext_count+0x1>
 3d4:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <ext_count+0x1>
 3d8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ext_count>
      break;
 3dc:	ce cf       	rjmp	.-100    	; 0x37a <read_encoders+0x16a>
        ext_count -= inc_dec1;
        encoder2_past = encoder2_present;
      }
      break;
    default:
      ext_count +=0;//add nothing
 3de:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ext_count>
 3e2:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ext_count+0x1>
 3e6:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <ext_count+0x1>
 3ea:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ext_count>
 3ee:	08 95       	ret
        ext_count -=inc_dec1;
        encoder2_past = encoder2_present;
      }
      break;
    case 2:
      if (encoder2_past == 3) {
 3f0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <encoder2_past>
 3f4:	83 30       	cpi	r24, 0x03	; 3
 3f6:	21 f1       	breq	.+72     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
        ext_count += inc_dec1;
        encoder2_past = encoder2_present;
      }else if (encoder2_past == 0) {
 3f8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <encoder2_past>
 3fc:	81 11       	cpse	r24, r1
 3fe:	8f cf       	rjmp	.-226    	; 0x31e <read_encoders+0x10e>
    case 0:
      if (encoder2_past == 2) {
        ext_count += inc_dec1;
        encoder2_past = encoder2_present;
      }else if (encoder2_past == 1) {
        ext_count -= inc_dec1;
 400:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <inc_dec1>
 404:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ext_count>
 408:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ext_count+0x1>
 40c:	82 1b       	sub	r24, r18
 40e:	91 09       	sbc	r25, r1
 410:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <ext_count+0x1>
 414:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ext_count>
        encoder2_past = encoder2_present;
 418:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <encoder2_present>
 41c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <encoder2_past>
 420:	08 95       	ret
        ext_count -= inc_dec1;
        encoder2_past = encoder2_present;
      }
      break;
    case 0:
      if (encoder2_past == 2) {
 422:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <encoder2_past>
 426:	82 30       	cpi	r24, 0x02	; 2
 428:	59 f0       	breq	.+22     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
        ext_count += inc_dec1;
        encoder2_past = encoder2_present;
      }else if (encoder2_past == 1) {
 42a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <encoder2_past>
 42e:	81 30       	cpi	r24, 0x01	; 1
 430:	39 f3       	breq	.-50     	; 0x400 <__LOCK_REGION_LENGTH__>
 432:	08 95       	ret
  switch (encoder1_present) {
    case 1:
      if (encoder1_past == 0) {
        ext_count += inc_dec1;
        encoder1_past = encoder1_present;
      }else if (encoder1_past == 3 ) {
 434:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <encoder1_past>
 438:	83 30       	cpi	r24, 0x03	; 3
 43a:	09 f0       	breq	.+2      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43c:	9e cf       	rjmp	.-196    	; 0x37a <read_encoders+0x16a>
 43e:	78 cf       	rjmp	.-272    	; 0x330 <read_encoders+0x120>
        encoder2_past = encoder2_present;
      }
      break;
    case 0:
      if (encoder2_past == 2) {
        ext_count += inc_dec1;
 440:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <inc_dec1>
 444:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ext_count>
 448:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ext_count+0x1>
 44c:	82 0f       	add	r24, r18
 44e:	91 1d       	adc	r25, r1
 450:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <ext_count+0x1>
 454:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ext_count>
        encoder2_past = encoder2_present;
 458:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <encoder2_present>
 45c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <encoder2_past>
 460:	08 95       	ret

00000462 <__vector_16>:
  interrupt service routine
Parameters: NONE
Return:void
***************************************************************/
ISR(TIMER0_OVF_vect)
{
 462:	1f 92       	push	r1
 464:	0f 92       	push	r0
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	0f 92       	push	r0
 46a:	11 24       	eor	r1, r1
 46c:	0b b6       	in	r0, 0x3b	; 59
 46e:	0f 92       	push	r0
 470:	2f 93       	push	r18
 472:	3f 93       	push	r19
 474:	4f 93       	push	r20
 476:	5f 93       	push	r21
 478:	6f 93       	push	r22
 47a:	7f 93       	push	r23
 47c:	8f 93       	push	r24
 47e:	9f 93       	push	r25
 480:	af 93       	push	r26
 482:	bf 93       	push	r27
 484:	ef 93       	push	r30
 486:	ff 93       	push	r31
  //Store PORT values to be able to restore
  PORTA_previous =PINA;//save PORTA values
 488:	89 b3       	in	r24, 0x19	; 25
 48a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <PORTA_previous>
  PORTC_previous = PINC;//save PORTC values
 48e:	83 b3       	in	r24, 0x13	; 19
 490:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <PORTC_previous>

  update_mode();//update mode
 494:	0e 94 ba 00 	call	0x174	; 0x174 <update_mode>
  read_encoders();//read encoders
 498:	0e 94 08 01 	call	0x210	; 0x210 <read_encoders>

  //update the count value
  if (ext_count>1023) {//bound count to 0-1023
 49c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ext_count>
 4a0:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ext_count+0x1>
 4a4:	81 15       	cp	r24, r1
 4a6:	94 40       	sbci	r25, 0x04	; 4
 4a8:	48 f0       	brcs	.+18     	; 0x4bc <__vector_16+0x5a>
    ext_count = (ext_count -1023)-1;
 4aa:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ext_count>
 4ae:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ext_count+0x1>
 4b2:	94 50       	subi	r25, 0x04	; 4
 4b4:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <ext_count+0x1>
 4b8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ext_count>
  }
  if (ext_count<0) {
 4bc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ext_count>
 4c0:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ext_count+0x1>
    ext_count = (1023+ext_count)+1;
  }

  //restore PORT A and C values
  DDRA = 0xFF;//outside of ISR, always output
 4c4:	8f ef       	ldi	r24, 0xFF	; 255
 4c6:	8a bb       	out	0x1a, r24	; 26
  PORTA = PORTA_previous;//restore PORTA
 4c8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <PORTA_previous>
 4cc:	8b bb       	out	0x1b, r24	; 27
  PORTC = PORTC_previous;//restore PORTC
 4ce:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <PORTC_previous>
 4d2:	85 bb       	out	0x15, r24	; 21

}
 4d4:	ff 91       	pop	r31
 4d6:	ef 91       	pop	r30
 4d8:	bf 91       	pop	r27
 4da:	af 91       	pop	r26
 4dc:	9f 91       	pop	r25
 4de:	8f 91       	pop	r24
 4e0:	7f 91       	pop	r23
 4e2:	6f 91       	pop	r22
 4e4:	5f 91       	pop	r21
 4e6:	4f 91       	pop	r20
 4e8:	3f 91       	pop	r19
 4ea:	2f 91       	pop	r18
 4ec:	0f 90       	pop	r0
 4ee:	0b be       	out	0x3b, r0	; 59
 4f0:	0f 90       	pop	r0
 4f2:	0f be       	out	0x3f, r0	; 63
 4f4:	0f 90       	pop	r0
 4f6:	1f 90       	pop	r1
 4f8:	18 95       	reti

000004fa <display_mode>:
  This function will display the mode on the bargraph
Parameters: NONE
Return:void
***************************************************************/
void display_mode(){
  SPDR = mode;//send value to register
 4fa:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <mode>
 4fe:	8f b9       	out	0x0f, r24	; 15
  while(bit_is_clear(SPSR,SPIF)){}
 500:	77 9b       	sbis	0x0e, 7	; 14
 502:	fe cf       	rjmp	.-4      	; 0x500 <display_mode+0x6>
  PORTB ^=(1<<BIT0);//send rising edge to regclk on HC595
 504:	98 b3       	in	r25, 0x18	; 24
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	98 27       	eor	r25, r24
 50a:	98 bb       	out	0x18, r25	; 24
  PORTB ^=(1<<BIT0);//send falling edge to reglck on HC595
 50c:	98 b3       	in	r25, 0x18	; 24
 50e:	89 27       	eor	r24, r25
 510:	88 bb       	out	0x18, r24	; 24
 512:	08 95       	ret

00000514 <decoder>:
Precondition: NONE
Return: uint_t binary equivalent
************************************************************************/
uint8_t decoder(uint8_t decimal)
{
  if (decimal == 0) {//decimal: 0
 514:	88 23       	and	r24, r24
 516:	a1 f0       	breq	.+40     	; 0x540 <decoder+0x2c>
    return 0b11000000;
  }else if (decimal == 1) {//decimal: 1
 518:	81 30       	cpi	r24, 0x01	; 1
 51a:	a1 f0       	breq	.+40     	; 0x544 <decoder+0x30>
    return 0b11111001;
  }else if (decimal == 2) {//decimal: 2
 51c:	82 30       	cpi	r24, 0x02	; 2
 51e:	a1 f0       	breq	.+40     	; 0x548 <decoder+0x34>
    return 0b10100100;
  }else if (decimal == 3) {//decimal: 3
 520:	83 30       	cpi	r24, 0x03	; 3
 522:	a1 f0       	breq	.+40     	; 0x54c <decoder+0x38>
    return 0b10110000;
  }else if (decimal == 4) {//deciaml: 4
 524:	84 30       	cpi	r24, 0x04	; 4
 526:	a1 f0       	breq	.+40     	; 0x550 <decoder+0x3c>
    return 0b10011001;
  }else if (decimal == 5) {//decimal: 5
 528:	85 30       	cpi	r24, 0x05	; 5
 52a:	a1 f0       	breq	.+40     	; 0x554 <decoder+0x40>
    return 0b10010010;
  }else if (decimal == 6) {//deciaml: 6
 52c:	86 30       	cpi	r24, 0x06	; 6
 52e:	a1 f0       	breq	.+40     	; 0x558 <decoder+0x44>
    return 0b10000010;
  }else if (decimal == 7) {//decimal: 7
 530:	87 30       	cpi	r24, 0x07	; 7
 532:	a1 f0       	breq	.+40     	; 0x55c <decoder+0x48>
    return 0b11111000;
  }else if (decimal == 8) {//decimal: 8
 534:	88 30       	cpi	r24, 0x08	; 8
 536:	a1 f0       	breq	.+40     	; 0x560 <decoder+0x4c>
    return 0b10000000;
  }else if (decimal == 9) {//decimal: 9
 538:	89 30       	cpi	r24, 0x09	; 9
 53a:	a1 f0       	breq	.+40     	; 0x564 <decoder+0x50>
    return 0b10010000;
  }
  //should never reach this return
  return 0b11111111;// All segments OFF
 53c:	8f ef       	ldi	r24, 0xFF	; 255
 53e:	08 95       	ret
Return: uint_t binary equivalent
************************************************************************/
uint8_t decoder(uint8_t decimal)
{
  if (decimal == 0) {//decimal: 0
    return 0b11000000;
 540:	80 ec       	ldi	r24, 0xC0	; 192
 542:	08 95       	ret
  }else if (decimal == 1) {//decimal: 1
    return 0b11111001;
 544:	89 ef       	ldi	r24, 0xF9	; 249
 546:	08 95       	ret
  }else if (decimal == 2) {//decimal: 2
    return 0b10100100;
 548:	84 ea       	ldi	r24, 0xA4	; 164
 54a:	08 95       	ret
  }else if (decimal == 3) {//decimal: 3
    return 0b10110000;
 54c:	80 eb       	ldi	r24, 0xB0	; 176
 54e:	08 95       	ret
  }else if (decimal == 4) {//deciaml: 4
    return 0b10011001;
 550:	89 e9       	ldi	r24, 0x99	; 153
 552:	08 95       	ret
  }else if (decimal == 5) {//decimal: 5
    return 0b10010010;
 554:	82 e9       	ldi	r24, 0x92	; 146
 556:	08 95       	ret
  }else if (decimal == 6) {//deciaml: 6
    return 0b10000010;
 558:	82 e8       	ldi	r24, 0x82	; 130
 55a:	08 95       	ret
  }else if (decimal == 7) {//decimal: 7
    return 0b11111000;
 55c:	88 ef       	ldi	r24, 0xF8	; 248
 55e:	08 95       	ret
  }else if (decimal == 8) {//decimal: 8
    return 0b10000000;
 560:	80 e8       	ldi	r24, 0x80	; 128
 562:	08 95       	ret
  }else if (decimal == 9) {//decimal: 9
    return 0b10010000;
 564:	80 e9       	ldi	r24, 0x90	; 144
  }
  //should never reach this return
  return 0b11111111;// All segments OFF
}
 566:	08 95       	ret

00000568 <segsum>:
//***********************************************************************************
//                                   segment_sum
//takes a 16-bit binary input value and places the appropriate equivalent 4 digit
//BCD segment code in the array segment_data for display.
//array is loaded at exit as:  |digit0|digit1|colon(digit2)|digit3|digit4|
void segsum(uint16_t sum) {
 568:	af 92       	push	r10
 56a:	bf 92       	push	r11
 56c:	cf 92       	push	r12
 56e:	df 92       	push	r13
 570:	ff 92       	push	r15
 572:	0f 93       	push	r16
 574:	1f 93       	push	r17
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	ec 01       	movw	r28, r24
  uint8_t thousands = (sum/1000)%10;//parses the thousands places
 57c:	9c 01       	movw	r18, r24
 57e:	36 95       	lsr	r19
 580:	27 95       	ror	r18
 582:	36 95       	lsr	r19
 584:	27 95       	ror	r18
 586:	36 95       	lsr	r19
 588:	27 95       	ror	r18
 58a:	a5 ec       	ldi	r26, 0xC5	; 197
 58c:	b0 e2       	ldi	r27, 0x20	; 32
 58e:	0e 94 b6 03 	call	0x76c	; 0x76c <__umulhisi3>
 592:	ac 01       	movw	r20, r24
 594:	52 95       	swap	r21
 596:	42 95       	swap	r20
 598:	4f 70       	andi	r20, 0x0F	; 15
 59a:	45 27       	eor	r20, r21
 59c:	5f 70       	andi	r21, 0x0F	; 15
 59e:	45 27       	eor	r20, r21
 5a0:	9a 01       	movw	r18, r20
 5a2:	ad ec       	ldi	r26, 0xCD	; 205
 5a4:	bc ec       	ldi	r27, 0xCC	; 204
 5a6:	0e 94 b6 03 	call	0x76c	; 0x76c <__umulhisi3>
 5aa:	96 95       	lsr	r25
 5ac:	87 95       	ror	r24
 5ae:	96 95       	lsr	r25
 5b0:	87 95       	ror	r24
 5b2:	96 95       	lsr	r25
 5b4:	87 95       	ror	r24
 5b6:	9c 01       	movw	r18, r24
 5b8:	22 0f       	add	r18, r18
 5ba:	33 1f       	adc	r19, r19
 5bc:	88 0f       	add	r24, r24
 5be:	99 1f       	adc	r25, r25
 5c0:	88 0f       	add	r24, r24
 5c2:	99 1f       	adc	r25, r25
 5c4:	88 0f       	add	r24, r24
 5c6:	99 1f       	adc	r25, r25
 5c8:	82 0f       	add	r24, r18
 5ca:	93 1f       	adc	r25, r19
 5cc:	48 1b       	sub	r20, r24
 5ce:	59 0b       	sbc	r21, r25
 5d0:	f4 2e       	mov	r15, r20
  uint8_t hundreds  = (sum/100)%10;//parses the hundreds place
 5d2:	9e 01       	movw	r18, r28
 5d4:	36 95       	lsr	r19
 5d6:	27 95       	ror	r18
 5d8:	36 95       	lsr	r19
 5da:	27 95       	ror	r18
 5dc:	ab e7       	ldi	r26, 0x7B	; 123
 5de:	b4 e1       	ldi	r27, 0x14	; 20
 5e0:	0e 94 b6 03 	call	0x76c	; 0x76c <__umulhisi3>
 5e4:	8c 01       	movw	r16, r24
 5e6:	16 95       	lsr	r17
 5e8:	07 95       	ror	r16
 5ea:	98 01       	movw	r18, r16
 5ec:	ad ec       	ldi	r26, 0xCD	; 205
 5ee:	bc ec       	ldi	r27, 0xCC	; 204
 5f0:	0e 94 b6 03 	call	0x76c	; 0x76c <__umulhisi3>
 5f4:	96 95       	lsr	r25
 5f6:	87 95       	ror	r24
 5f8:	96 95       	lsr	r25
 5fa:	87 95       	ror	r24
 5fc:	96 95       	lsr	r25
 5fe:	87 95       	ror	r24
 600:	9c 01       	movw	r18, r24
 602:	22 0f       	add	r18, r18
 604:	33 1f       	adc	r19, r19
 606:	88 0f       	add	r24, r24
 608:	99 1f       	adc	r25, r25
 60a:	88 0f       	add	r24, r24
 60c:	99 1f       	adc	r25, r25
 60e:	88 0f       	add	r24, r24
 610:	99 1f       	adc	r25, r25
 612:	82 0f       	add	r24, r18
 614:	93 1f       	adc	r25, r19
 616:	08 1b       	sub	r16, r24
 618:	19 0b       	sbc	r17, r25
  uint8_t tens      = (sum/10)%10;//parses the tens places
 61a:	9e 01       	movw	r18, r28
 61c:	0e 94 b6 03 	call	0x76c	; 0x76c <__umulhisi3>
 620:	6c 01       	movw	r12, r24
 622:	d6 94       	lsr	r13
 624:	c7 94       	ror	r12
 626:	d6 94       	lsr	r13
 628:	c7 94       	ror	r12
 62a:	d6 94       	lsr	r13
 62c:	c7 94       	ror	r12
 62e:	96 01       	movw	r18, r12
 630:	0e 94 b6 03 	call	0x76c	; 0x76c <__umulhisi3>
 634:	96 95       	lsr	r25
 636:	87 95       	ror	r24
 638:	96 95       	lsr	r25
 63a:	87 95       	ror	r24
 63c:	96 95       	lsr	r25
 63e:	87 95       	ror	r24
 640:	9c 01       	movw	r18, r24
 642:	22 0f       	add	r18, r18
 644:	33 1f       	adc	r19, r19
 646:	88 0f       	add	r24, r24
 648:	99 1f       	adc	r25, r25
 64a:	88 0f       	add	r24, r24
 64c:	99 1f       	adc	r25, r25
 64e:	88 0f       	add	r24, r24
 650:	99 1f       	adc	r25, r25
 652:	82 0f       	add	r24, r18
 654:	93 1f       	adc	r25, r19
 656:	56 01       	movw	r10, r12
 658:	a8 1a       	sub	r10, r24
 65a:	b9 0a       	sbc	r11, r25
  uint8_t ones      = (sum%10);//parses the ones place

  //decoded numbers
  segment_data[0] = decoder(thousands);//thousands
 65c:	84 2f       	mov	r24, r20
 65e:	0e 94 8a 02 	call	0x514	; 0x514 <decoder>
 662:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <segment_data>
  segment_data[1] = decoder(hundreds);//hundreds
 666:	80 2f       	mov	r24, r16
 668:	0e 94 8a 02 	call	0x514	; 0x514 <decoder>
 66c:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <segment_data+0x1>
  segment_data[2] = 0b11111111;//everyting off for colon
 670:	df ef       	ldi	r29, 0xFF	; 255
 672:	d0 93 20 01 	sts	0x0120, r29	; 0x800120 <segment_data+0x2>
  segment_data[3] = decoder(tens);//tens
 676:	8a 2d       	mov	r24, r10
 678:	0e 94 8a 02 	call	0x514	; 0x514 <decoder>
 67c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <segment_data+0x3>
  segment_data[4] = decoder(ones);//ones
 680:	8c 2f       	mov	r24, r28
 682:	9a e0       	ldi	r25, 0x0A	; 10
 684:	c9 9e       	mul	r12, r25
 686:	80 19       	sub	r24, r0
 688:	11 24       	eor	r1, r1
 68a:	0e 94 8a 02 	call	0x514	; 0x514 <decoder>
 68e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <segment_data+0x4>

  //blank out leading zero digits
  // and move data to right place for misplaced colon position
  if ((thousands == 0) && (hundreds==0) && (tens ==0)) {// three leading zeros
 692:	f1 10       	cpse	r15, r1
 694:	08 c0       	rjmp	.+16     	; 0x6a6 <segsum+0x13e>
    segment_data[0] = 0b11111111;
 696:	d0 93 1e 01 	sts	0x011E, r29	; 0x80011e <segment_data>
  segment_data[3] = decoder(tens);//tens
  segment_data[4] = decoder(ones);//ones

  //blank out leading zero digits
  // and move data to right place for misplaced colon position
  if ((thousands == 0) && (hundreds==0) && (tens ==0)) {// three leading zeros
 69a:	01 11       	cpse	r16, r1
 69c:	04 c0       	rjmp	.+8      	; 0x6a6 <segsum+0x13e>
    segment_data[0] = 0b11111111;
    segment_data[1] = 0b11111111;
 69e:	d0 93 1f 01 	sts	0x011F, r29	; 0x80011f <segment_data+0x1>
  segment_data[3] = decoder(tens);//tens
  segment_data[4] = decoder(ones);//ones

  //blank out leading zero digits
  // and move data to right place for misplaced colon position
  if ((thousands == 0) && (hundreds==0) && (tens ==0)) {// three leading zeros
 6a2:	aa 20       	and	r10, r10
 6a4:	51 f0       	breq	.+20     	; 0x6ba <segsum+0x152>
    segment_data[0] = 0b11111111;
    segment_data[1] = 0b11111111;
  }else if (thousands==0){
    segment_data[0] = 0b11111111;//1 zero off
  }
}//segment_sum
 6a6:	df 91       	pop	r29
 6a8:	cf 91       	pop	r28
 6aa:	1f 91       	pop	r17
 6ac:	0f 91       	pop	r16
 6ae:	ff 90       	pop	r15
 6b0:	df 90       	pop	r13
 6b2:	cf 90       	pop	r12
 6b4:	bf 90       	pop	r11
 6b6:	af 90       	pop	r10
 6b8:	08 95       	ret
  //blank out leading zero digits
  // and move data to right place for misplaced colon position
  if ((thousands == 0) && (hundreds==0) && (tens ==0)) {// three leading zeros
    segment_data[0] = 0b11111111;
    segment_data[1] = 0b11111111;
    segment_data[3] = 0b11111111;
 6ba:	d0 93 21 01 	sts	0x0121, r29	; 0x800121 <segment_data+0x3>
 6be:	f3 cf       	rjmp	.-26     	; 0x6a6 <segsum+0x13e>

000006c0 <main>:
//***********************************************************************
//                           init_tcnt0
//***********************************************************************
//initalize timer/counter zero to normal mode
void init_tcnt0(){
  TIMSK |= (1<<TOIE0);//set interrupt for overflow
 6c0:	87 b7       	in	r24, 0x37	; 55
 6c2:	81 60       	ori	r24, 0x01	; 1
 6c4:	87 bf       	out	0x37, r24	; 55
  TCCR0 |=  (1<<CS02) | (1<<CS00);  //normal mode, 128 prescale
 6c6:	83 b7       	in	r24, 0x33	; 51
 6c8:	85 60       	ori	r24, 0x05	; 5
 6ca:	83 bf       	out	0x33, r24	; 51
//***********************************************************************
//                            spi_init
//**********************************************************************
void spi_init(void){
  //DDRB should be 0x87, 0x97 is for testing
  DDRB   = 0x97; //output mode for SS, MOSI, SCLK, and output for OE_EN
 6cc:	87 e9       	ldi	r24, 0x97	; 151
 6ce:	87 bb       	out	0x17, r24	; 23
  SPCR   = (1<<SPE) | (1<<MSTR) ; //master mode, clk low on idle, leading edge sample
 6d0:	80 e5       	ldi	r24, 0x50	; 80
 6d2:	8d b9       	out	0x0d, r24	; 13
  SPSR   = (1<<SPI2X); //choose double speed operation
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	8e b9       	out	0x0e, r24	; 14

int main()
{
  init_tcnt0();//initalize timer/counter 0
  spi_init();// initalize SPI protocol
  sei();//enable global interrupts
 6d8:	78 94       	sei
  DDRC = 0xF0;//set PORTC as output (never changes)
 6da:	80 ef       	ldi	r24, 0xF0	; 240
 6dc:	84 bb       	out	0x14, r24	; 20
  DDRE = 0xC0;//set PORTE PIN 6 and 7 as ouputs(never changes)
 6de:	80 ec       	ldi	r24, 0xC0	; 192
 6e0:	82 b9       	out	0x02, r24	; 2
  PORTE =0xC0;//set SH/LD and CLK_INH high (low enabled)
 6e2:	83 b9       	out	0x03, r24	; 3
  uint8_t digit_sel = 0;//digit select
 6e4:	c0 e0       	ldi	r28, 0x00	; 0
Return:void
***************************************************************/
void display_mode(){
  SPDR = mode;//send value to register
  while(bit_is_clear(SPSR,SPIF)){}
  PORTB ^=(1<<BIT0);//send rising edge to regclk on HC595
 6e6:	d1 e0       	ldi	r29, 0x01	; 1
    segsum(ext_count);//break up the disp_value to 4, BCD digits in the array

    if (digit_sel > 4) {//bound a counter (0-4)
      digit_sel = 0;
    }
    DDRA = 0xFF;//make PORTA output for Seven segment
 6e8:	1f ef       	ldi	r17, 0xFF	; 255
    PORTA = segment_data[digit_sel];//send 7 segment code to LED segments
    //send PORTB the digit to display & power ON to seven seg(bit7=0)
    if (digit_sel == 0) {
      PORTC = 0b01000000;//thousands digit
 6ea:	00 e4       	ldi	r16, 0x40	; 64
    }else if (digit_sel==1) {
      PORTC = 0b00110000;//hundreds digit
    }else if (digit_sel==2) {
      PORTC = 0b00100000;//colon digit
    }else if (digit_sel==3) {
      PORTC = 0b00010000;//tens digit
 6ec:	80 e1       	ldi	r24, 0x10	; 16
 6ee:	d8 2e       	mov	r13, r24
    if (digit_sel == 0) {
      PORTC = 0b01000000;//thousands digit
    }else if (digit_sel==1) {
      PORTC = 0b00110000;//hundreds digit
    }else if (digit_sel==2) {
      PORTC = 0b00100000;//colon digit
 6f0:	90 e2       	ldi	r25, 0x20	; 32
 6f2:	e9 2e       	mov	r14, r25
    PORTA = segment_data[digit_sel];//send 7 segment code to LED segments
    //send PORTB the digit to display & power ON to seven seg(bit7=0)
    if (digit_sel == 0) {
      PORTC = 0b01000000;//thousands digit
    }else if (digit_sel==1) {
      PORTC = 0b00110000;//hundreds digit
 6f4:	20 e3       	ldi	r18, 0x30	; 48
 6f6:	f2 2e       	mov	r15, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6f8:	8f e3       	ldi	r24, 0x3F	; 63
 6fa:	9f e1       	ldi	r25, 0x1F	; 31
 6fc:	01 97       	sbiw	r24, 0x01	; 1
 6fe:	f1 f7       	brne	.-4      	; 0x6fc <main+0x3c>
 700:	00 c0       	rjmp	.+0      	; 0x702 <main+0x42>
 702:	00 00       	nop
  This function will display the mode on the bargraph
Parameters: NONE
Return:void
***************************************************************/
void display_mode(){
  SPDR = mode;//send value to register
 704:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <mode>
 708:	8f b9       	out	0x0f, r24	; 15
  while(bit_is_clear(SPSR,SPIF)){}
 70a:	77 9b       	sbis	0x0e, 7	; 14
 70c:	fe cf       	rjmp	.-4      	; 0x70a <main+0x4a>
  PORTB ^=(1<<BIT0);//send rising edge to regclk on HC595
 70e:	88 b3       	in	r24, 0x18	; 24
 710:	8d 27       	eor	r24, r29
 712:	88 bb       	out	0x18, r24	; 24
  PORTB ^=(1<<BIT0);//send falling edge to reglck on HC595
 714:	88 b3       	in	r24, 0x18	; 24
 716:	8d 27       	eor	r24, r29
 718:	88 bb       	out	0x18, r24	; 24


  while (1) {
    _delay_ms(2);
    display_mode();//display mode on bar graph
    segsum(ext_count);//break up the disp_value to 4, BCD digits in the array
 71a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ext_count>
 71e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ext_count+0x1>
 722:	0e 94 b4 02 	call	0x568	; 0x568 <segsum>

    if (digit_sel > 4) {//bound a counter (0-4)
      digit_sel = 0;
    }
    DDRA = 0xFF;//make PORTA output for Seven segment
 726:	1a bb       	out	0x1a, r17	; 26
  while (1) {
    _delay_ms(2);
    display_mode();//display mode on bar graph
    segsum(ext_count);//break up the disp_value to 4, BCD digits in the array

    if (digit_sel > 4) {//bound a counter (0-4)
 728:	c5 30       	cpi	r28, 0x05	; 5
 72a:	88 f4       	brcc	.+34     	; 0x74e <main+0x8e>
      digit_sel = 0;
    }
    DDRA = 0xFF;//make PORTA output for Seven segment
    PORTA = segment_data[digit_sel];//send 7 segment code to LED segments
 72c:	ec 2f       	mov	r30, r28
 72e:	f0 e0       	ldi	r31, 0x00	; 0
 730:	e2 5e       	subi	r30, 0xE2	; 226
 732:	fe 4f       	sbci	r31, 0xFE	; 254
 734:	80 81       	ld	r24, Z
 736:	8b bb       	out	0x1b, r24	; 27
    //send PORTB the digit to display & power ON to seven seg(bit7=0)
    if (digit_sel == 0) {
 738:	cc 23       	and	r28, r28
 73a:	61 f0       	breq	.+24     	; 0x754 <main+0x94>
      PORTC = 0b01000000;//thousands digit
    }else if (digit_sel==1) {
 73c:	c1 30       	cpi	r28, 0x01	; 1
 73e:	69 f0       	breq	.+26     	; 0x75a <main+0x9a>
      PORTC = 0b00110000;//hundreds digit
    }else if (digit_sel==2) {
 740:	c2 30       	cpi	r28, 0x02	; 2
 742:	71 f0       	breq	.+28     	; 0x760 <main+0xa0>
      PORTC = 0b00100000;//colon digit
    }else if (digit_sel==3) {
 744:	c3 30       	cpi	r28, 0x03	; 3
 746:	79 f0       	breq	.+30     	; 0x766 <main+0xa6>
      PORTC = 0b00010000;//tens digit
    }else if (digit_sel==4) {
      PORTC =0b00000000;//one digit
 748:	15 ba       	out	0x15, r1	; 21
 74a:	c5 e0       	ldi	r28, 0x05	; 5
    }
    digit_sel++;//update digit to display(increment)
  }
 74c:	d5 cf       	rjmp	.-86     	; 0x6f8 <main+0x38>

    if (digit_sel > 4) {//bound a counter (0-4)
      digit_sel = 0;
    }
    DDRA = 0xFF;//make PORTA output for Seven segment
    PORTA = segment_data[digit_sel];//send 7 segment code to LED segments
 74e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <segment_data>
 752:	8b bb       	out	0x1b, r24	; 27
    //send PORTB the digit to display & power ON to seven seg(bit7=0)
    if (digit_sel == 0) {
      PORTC = 0b01000000;//thousands digit
 754:	05 bb       	out	0x15, r16	; 21
 756:	c1 e0       	ldi	r28, 0x01	; 1
 758:	cf cf       	rjmp	.-98     	; 0x6f8 <main+0x38>
    }else if (digit_sel==1) {
      PORTC = 0b00110000;//hundreds digit
 75a:	f5 ba       	out	0x15, r15	; 21
 75c:	c2 e0       	ldi	r28, 0x02	; 2
 75e:	cc cf       	rjmp	.-104    	; 0x6f8 <main+0x38>
    }else if (digit_sel==2) {
      PORTC = 0b00100000;//colon digit
 760:	e5 ba       	out	0x15, r14	; 21
 762:	c3 e0       	ldi	r28, 0x03	; 3
 764:	c9 cf       	rjmp	.-110    	; 0x6f8 <main+0x38>
    }else if (digit_sel==3) {
      PORTC = 0b00010000;//tens digit
 766:	d5 ba       	out	0x15, r13	; 21
 768:	c4 e0       	ldi	r28, 0x04	; 4
 76a:	c6 cf       	rjmp	.-116    	; 0x6f8 <main+0x38>

0000076c <__umulhisi3>:
 76c:	a2 9f       	mul	r26, r18
 76e:	b0 01       	movw	r22, r0
 770:	b3 9f       	mul	r27, r19
 772:	c0 01       	movw	r24, r0
 774:	a3 9f       	mul	r26, r19
 776:	70 0d       	add	r23, r0
 778:	81 1d       	adc	r24, r1
 77a:	11 24       	eor	r1, r1
 77c:	91 1d       	adc	r25, r1
 77e:	b2 9f       	mul	r27, r18
 780:	70 0d       	add	r23, r0
 782:	81 1d       	adc	r24, r1
 784:	11 24       	eor	r1, r1
 786:	91 1d       	adc	r25, r1
 788:	08 95       	ret

0000078a <_exit>:
 78a:	f8 94       	cli

0000078c <__stop_program>:
 78c:	ff cf       	rjmp	.-2      	; 0x78c <__stop_program>
