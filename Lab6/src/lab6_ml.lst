
lab6_ml.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000140  00800100  00002fce  00003062  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002fce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000188  00800240  00800240  000031a2  2**0
                  ALLOC
  3 .stab         00006720  00000000  00000000  000031a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002038  00000000  00000000  000098c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000b8fc  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000b910  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  0000b94c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  0000c0cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000c7e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  0000c7fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
       4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      10:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      14:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      18:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      1c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      20:	0c 94 b8 00 	jmp	0x170	; 0x170 <__vector_8>
      24:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      28:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__vector_10>
      2c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      30:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__vector_12>
      34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      38:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      3c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      40:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__vector_16>
      44:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      48:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__vector_18>
      4c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      50:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      54:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      58:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      5c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      60:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      68:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      6c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      70:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      74:	0c 94 6c 09 	jmp	0x12d8	; 0x12d8 <__vector_29>
      78:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      7c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      80:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      84:	0c 94 db 10 	jmp	0x21b6	; 0x21b6 <__vector_33>
      88:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      8c:	1c 11       	cpse	r17, r12
      8e:	f3 10       	cpse	r15, r3
      90:	f3 10       	cpse	r15, r3
      92:	f3 10       	cpse	r15, r3
      94:	f3 10       	cpse	r15, r3
      96:	f3 10       	cpse	r15, r3
      98:	f3 10       	cpse	r15, r3
      9a:	f3 10       	cpse	r15, r3
      9c:	1c 11       	cpse	r17, r12
      9e:	f3 10       	cpse	r15, r3
      a0:	f3 10       	cpse	r15, r3
      a2:	f3 10       	cpse	r15, r3
      a4:	f3 10       	cpse	r15, r3
      a6:	f3 10       	cpse	r15, r3
      a8:	f3 10       	cpse	r15, r3
      aa:	f3 10       	cpse	r15, r3
      ac:	26 11       	cpse	r18, r6
      ae:	f3 10       	cpse	r15, r3
      b0:	f3 10       	cpse	r15, r3
      b2:	f3 10       	cpse	r15, r3
      b4:	f3 10       	cpse	r15, r3
      b6:	f3 10       	cpse	r15, r3
      b8:	f3 10       	cpse	r15, r3
      ba:	f3 10       	cpse	r15, r3
      bc:	f3 10       	cpse	r15, r3
      be:	f3 10       	cpse	r15, r3
      c0:	f3 10       	cpse	r15, r3
      c2:	f3 10       	cpse	r15, r3
      c4:	f3 10       	cpse	r15, r3
      c6:	f3 10       	cpse	r15, r3
      c8:	f3 10       	cpse	r15, r3
      ca:	f3 10       	cpse	r15, r3
      cc:	26 11       	cpse	r18, r6
      ce:	f3 10       	cpse	r15, r3
      d0:	f3 10       	cpse	r15, r3
      d2:	f3 10       	cpse	r15, r3
      d4:	f3 10       	cpse	r15, r3
      d6:	f3 10       	cpse	r15, r3
      d8:	f3 10       	cpse	r15, r3
      da:	f3 10       	cpse	r15, r3
      dc:	f3 10       	cpse	r15, r3
      de:	f3 10       	cpse	r15, r3
      e0:	f3 10       	cpse	r15, r3
      e2:	f3 10       	cpse	r15, r3
      e4:	f3 10       	cpse	r15, r3
      e6:	f3 10       	cpse	r15, r3
      e8:	f3 10       	cpse	r15, r3
      ea:	f3 10       	cpse	r15, r3
      ec:	3d 11       	cpse	r19, r13
      ee:	f3 10       	cpse	r15, r3
      f0:	f3 10       	cpse	r15, r3
      f2:	f3 10       	cpse	r15, r3
      f4:	f3 10       	cpse	r15, r3
      f6:	f3 10       	cpse	r15, r3
      f8:	f3 10       	cpse	r15, r3
      fa:	f3 10       	cpse	r15, r3
      fc:	41 11       	cpse	r20, r1
      fe:	f3 10       	cpse	r15, r3
     100:	f3 10       	cpse	r15, r3
     102:	f3 10       	cpse	r15, r3
     104:	f3 10       	cpse	r15, r3
     106:	f3 10       	cpse	r15, r3
     108:	f3 10       	cpse	r15, r3
     10a:	f3 10       	cpse	r15, r3
     10c:	f3 10       	cpse	r15, r3
     10e:	f3 10       	cpse	r15, r3
     110:	f3 10       	cpse	r15, r3
     112:	f3 10       	cpse	r15, r3
     114:	f3 10       	cpse	r15, r3
     116:	f3 10       	cpse	r15, r3
     118:	f3 10       	cpse	r15, r3
     11a:	f3 10       	cpse	r15, r3
     11c:	4f 11       	cpse	r20, r15
     11e:	f3 10       	cpse	r15, r3
     120:	f3 10       	cpse	r15, r3
     122:	f3 10       	cpse	r15, r3
     124:	f3 10       	cpse	r15, r3
     126:	f3 10       	cpse	r15, r3
     128:	f3 10       	cpse	r15, r3
     12a:	f3 10       	cpse	r15, r3
     12c:	0d 11       	cpse	r16, r13

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d0 e1       	ldi	r29, 0x10	; 16
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
     13a:	12 e0       	ldi	r17, 0x02	; 2
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	ee ec       	ldi	r30, 0xCE	; 206
     142:	ff e2       	ldi	r31, 0x2F	; 47
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	a0 34       	cpi	r26, 0x40	; 64
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	23 e0       	ldi	r18, 0x03	; 3
     156:	a0 e4       	ldi	r26, 0x40	; 64
     158:	b2 e0       	ldi	r27, 0x02	; 2
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	a8 3c       	cpi	r26, 0xC8	; 200
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 3b 14 	call	0x2876	; 0x2876 <main>
     168:	0c 94 e5 17 	jmp	0x2fca	; 0x2fca <_exit>

0000016c <__bad_interrupt>:
     16c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000170 <__vector_8>:
Parameters:
  -INT7_vect:
    This the vector name of interrupt on PE7
Return: N/A
*******************************************************************************/
ISR(INT7_vect){
     170:	1f 92       	push	r1
     172:	0f 92       	push	r0
     174:	0f b6       	in	r0, 0x3f	; 63
     176:	0f 92       	push	r0
     178:	11 24       	eor	r1, r1
     17a:	8f 93       	push	r24
  STC_interrupt = TRUE;
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <STC_interrupt>
}
     182:	8f 91       	pop	r24
     184:	0f 90       	pop	r0
     186:	0f be       	out	0x3f, r0	; 63
     188:	0f 90       	pop	r0
     18a:	1f 90       	pop	r1
     18c:	18 95       	reti

0000018e <radio_init_m>:
  This function will initialize the radio board for I2C mode and reset the board
Parameters: NONE
Return: VOID
*******************************************************************************/
void radio_init_m(){
  PORTE &= ~(1<BIT7);//interupt 2 initially low to sense I2C mode
     18e:	18 98       	cbi	0x03, 0	; 3
  DDRE  |= 0x80;///turn on port E bit 7 to drive it low
     190:	17 9a       	sbi	0x02, 7	; 2
  PORTE |= (1<<BIT2);//hardware reset
     192:	1a 9a       	sbi	0x03, 2	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     194:	8f e1       	ldi	r24, 0x1F	; 31
     196:	93 e0       	ldi	r25, 0x03	; 3
     198:	01 97       	sbiw	r24, 0x01	; 1
     19a:	f1 f7       	brne	.-4      	; 0x198 <radio_init_m+0xa>
     19c:	00 c0       	rjmp	.+0      	; 0x19e <radio_init_m+0x10>
     19e:	00 00       	nop
  _delay_us(200);
  PORTE &= ~(1<<BIT2);//release Reset
     1a0:	1a 98       	cbi	0x03, 2	; 3
     1a2:	90 ea       	ldi	r25, 0xA0	; 160
     1a4:	9a 95       	dec	r25
     1a6:	f1 f7       	brne	.-4      	; 0x1a4 <radio_init_m+0x16>
  _delay_us(30);
  DDRE &= ~(0x80);
     1a8:	17 98       	cbi	0x02, 7	; 2
     1aa:	08 95       	ret

000001ac <debounce_switch>:
//the button is pushed. Function returns a 1 only once per debounced button
//push so a debounce and toggle function can be implemented at the same time.
//Adapted to check all buttons from Ganssel's "Guide to Debouncing"
//Expects active low pushbuttons on PINA port.
//
uint8_t debounce_switch(uint8_t pin) {
     1ac:	48 2f       	mov	r20, r24
  static uint16_t state[8] = {0};
  state[pin] = (state[pin]<<1)|(!bit_is_clear(PINA,pin))|0xE000;
     1ae:	e8 2f       	mov	r30, r24
     1b0:	f0 e0       	ldi	r31, 0x00	; 0
     1b2:	99 b3       	in	r25, 0x19	; 25
     1b4:	ee 0f       	add	r30, r30
     1b6:	ff 1f       	adc	r31, r31
     1b8:	ee 58       	subi	r30, 0x8E	; 142
     1ba:	fd 4f       	sbci	r31, 0xFD	; 253
     1bc:	20 81       	ld	r18, Z
     1be:	31 81       	ldd	r19, Z+1	; 0x01
     1c0:	22 0f       	add	r18, r18
     1c2:	33 1f       	adc	r19, r19
     1c4:	30 6e       	ori	r19, 0xE0	; 224
     1c6:	89 2f       	mov	r24, r25
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <debounce_switch+0x24>
     1cc:	95 95       	asr	r25
     1ce:	87 95       	ror	r24
     1d0:	4a 95       	dec	r20
     1d2:	e2 f7       	brpl	.-8      	; 0x1cc <debounce_switch+0x20>
     1d4:	81 70       	andi	r24, 0x01	; 1
     1d6:	99 27       	eor	r25, r25
     1d8:	28 2b       	or	r18, r24
     1da:	39 2b       	or	r19, r25
     1dc:	31 83       	std	Z+1, r19	; 0x01
     1de:	20 83       	st	Z, r18
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	21 15       	cp	r18, r1
     1e4:	30 4f       	sbci	r19, 0xF0	; 240
     1e6:	09 f0       	breq	.+2      	; 0x1ea <debounce_switch+0x3e>
     1e8:	80 e0       	ldi	r24, 0x00	; 0
  if (state[pin]==0xF000) {
    return 1;
  }
  return 0;
}
     1ea:	08 95       	ret

000001ec <update_lcd_alarm>:
  or not the alarm is armed. EXCLUSIVELY FOR ALARM
Parameters: NONE
Return:void
***************************************************************/
void update_lcd_alarm(){
  if (((mode>>BIT3)&1)==1) {//Check Alarm EN Bit
     1ec:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     1f0:	83 fd       	sbrc	r24, 3
     1f2:	0e c0       	rjmp	.+28     	; 0x210 <update_lcd_alarm+0x24>
    lcd_full_array[1]= 'L';
    lcd_full_array[2]= 'A';
    lcd_full_array[3]= 'R';
    lcd_full_array[4]= 'M';
  }else{//clear Alarm message
    lcd_full_array[0]= ' ';
     1f4:	80 e2       	ldi	r24, 0x20	; 32
     1f6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <lcd_full_array>
    lcd_full_array[1]= ' ';
     1fa:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <lcd_full_array+0x1>
    lcd_full_array[2]= ' ';
     1fe:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <lcd_full_array+0x2>
    lcd_full_array[3]= ' ';
     202:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <lcd_full_array+0x3>
    lcd_full_array[4]= ' ';
     206:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <lcd_full_array+0x4>
  }
  lcd_flag = 0;//reset flag for ALARM signaling
     20a:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <lcd_flag>
     20e:	08 95       	ret
Parameters: NONE
Return:void
***************************************************************/
void update_lcd_alarm(){
  if (((mode>>BIT3)&1)==1) {//Check Alarm EN Bit
    lcd_full_array[0]= 'A';
     210:	81 e4       	ldi	r24, 0x41	; 65
     212:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <lcd_full_array>
    lcd_full_array[1]= 'L';
     216:	9c e4       	ldi	r25, 0x4C	; 76
     218:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <lcd_full_array+0x1>
    lcd_full_array[2]= 'A';
     21c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <lcd_full_array+0x2>
    lcd_full_array[3]= 'R';
     220:	82 e5       	ldi	r24, 0x52	; 82
     222:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <lcd_full_array+0x3>
    lcd_full_array[4]= 'M';
     226:	8d e4       	ldi	r24, 0x4D	; 77
     228:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <lcd_full_array+0x4>
    lcd_full_array[1]= ' ';
    lcd_full_array[2]= ' ';
    lcd_full_array[3]= ' ';
    lcd_full_array[4]= ' ';
  }
  lcd_flag = 0;//reset flag for ALARM signaling
     22c:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <lcd_flag>
     230:	08 95       	ret

00000232 <init_tcnt0>:
//***********************************************************************
//                           init_tcnt0
//***********************************************************************
//initalize timer/counter zero to normal mode
void init_tcnt0(){
  ASSR  |= (1<<AS0);//run off external 32kHz osc
     232:	80 b7       	in	r24, 0x30	; 48
     234:	88 60       	ori	r24, 0x08	; 8
     236:	80 bf       	out	0x30, r24	; 48
  TIMSK |= (1<<TOIE0);//overflow interrup
     238:	87 b7       	in	r24, 0x37	; 55
     23a:	81 60       	ori	r24, 0x01	; 1
     23c:	87 bf       	out	0x37, r24	; 55
  TCCR0 |= (1<<CS00);//Normal mode, no prescale
     23e:	83 b7       	in	r24, 0x33	; 51
     240:	81 60       	ori	r24, 0x01	; 1
     242:	83 bf       	out	0x33, r24	; 51
     244:	08 95       	ret

00000246 <init_tcnt2>:
//***********************************************************************
//                           init_tcnt2
//***********************************************************************
void init_tcnt2(){
  //Fast PWM, Non-inverting mode on OC2(PB7),CLKio/1024 prescale, uC clock
  TCCR2 |= (1<<WGM21)|(1<<WGM20)|(1<<COM21)|(1<<COM20)|(0<<CS20)|(0<<CS21)|(1<<CS22);
     246:	85 b5       	in	r24, 0x25	; 37
     248:	8c 67       	ori	r24, 0x7C	; 124
     24a:	85 bd       	out	0x25, r24	; 37
  TIMSK |= (1<<TOIE2);//overflow interrupt
     24c:	87 b7       	in	r24, 0x37	; 55
     24e:	80 64       	ori	r24, 0x40	; 64
     250:	87 bf       	out	0x37, r24	; 55
  OCR2  |= 127;//initalize to half of the total scale (0-255)
     252:	83 b5       	in	r24, 0x23	; 35
     254:	8f 67       	ori	r24, 0x7F	; 127
     256:	83 bd       	out	0x23, r24	; 35
     258:	08 95       	ret

0000025a <init_tcnt3>:
//***********************************************************************
//                           init_tcnt3
//***********************************************************************
void init_tcnt3(){
  //Non-inverting mode //FAST PWM, 8-bit, no prescale
  TCCR3A |= (1<<COM3A1)|(0<<COM3A0)|(0<<WGM31)|(1<<WGM30);
     25a:	eb e8       	ldi	r30, 0x8B	; 139
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	81 68       	ori	r24, 0x81	; 129
     262:	80 83       	st	Z, r24
  TCCR3B |= (0<<WGM33)|(1<<WGM32)|(1<<CS30);
     264:	ea e8       	ldi	r30, 0x8A	; 138
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	80 81       	ld	r24, Z
     26a:	89 60       	ori	r24, 0x09	; 9
     26c:	80 83       	st	Z, r24
  ETIMSK |= (1<<TOIE3);//overflow interrup
     26e:	ed e7       	ldi	r30, 0x7D	; 125
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	80 81       	ld	r24, Z
     274:	84 60       	ori	r24, 0x04	; 4
     276:	80 83       	st	Z, r24
  OCR3A =  127;//Vout = OCR3A*(0.0198)+0.022
     278:	8f e7       	ldi	r24, 0x7F	; 127
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     280:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     284:	08 95       	ret

00000286 <init_tcnt1>:
//***********************************************************************
//                           init_tcnt1
//***********************************************************************
void init_tcnt1(){
  //CTC mode,no prescale, Normal port operation
  TCCR1B |= (1<<WGM12)|(1<<CS10);
     286:	8e b5       	in	r24, 0x2e	; 46
     288:	89 60       	ori	r24, 0x09	; 9
     28a:	8e bd       	out	0x2e, r24	; 46
  TIMSK  |= (1<<OCIE1A);// Output compare A match
     28c:	87 b7       	in	r24, 0x37	; 55
     28e:	80 61       	ori	r24, 0x10	; 16
     290:	87 bf       	out	0x37, r24	; 55
  OCR1A   = 0x1F3F;//7999 for 1Khz wave
     292:	8f e3       	ldi	r24, 0x3F	; 63
     294:	9f e1       	ldi	r25, 0x1F	; 31
     296:	9b bd       	out	0x2b, r25	; 43
     298:	8a bd       	out	0x2a, r24	; 42
     29a:	08 95       	ret

0000029c <read_LM73>:
Parameters: NONE
Return: VOID
***************************************************************************/
void read_LM73(){
  static uint8_t fc_toggle = 0;//1=Farenheit, 0=Celcius
  fc_toggle ^= (1<<BIT0);//Toggle the value
     29c:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <fc_toggle.2221>
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	89 27       	eor	r24, r25
     2a4:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <fc_toggle.2221>
  lm73_temp = read_temperature();
     2a8:	0e 94 cd 10 	call	0x219a	; 0x219a <read_temperature>
     2ac:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <lm73_temp+0x1>
     2b0:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <lm73_temp>
  lm73_temp_convert(lcd_str_temperature,lm73_temp,fc_toggle);
     2b4:	60 91 96 02 	lds	r22, 0x0296	; 0x800296 <lm73_temp>
     2b8:	70 91 97 02 	lds	r23, 0x0297	; 0x800297 <lm73_temp+0x1>
     2bc:	40 91 71 02 	lds	r20, 0x0271	; 0x800271 <fc_toggle.2221>
     2c0:	88 ea       	ldi	r24, 0xA8	; 168
     2c2:	92 e0       	ldi	r25, 0x02	; 2
     2c4:	0c 94 ba 0f 	jmp	0x1f74	; 0x1f74 <lm73_temp_convert>

000002c8 <__vector_12>:
}

// //***********************************************************************
// //                     ISR for timer counter one
// //***********************************************************************
ISR(TIMER1_COMPA_vect){
     2c8:	1f 92       	push	r1
     2ca:	0f 92       	push	r0
     2cc:	0f b6       	in	r0, 0x3f	; 63
     2ce:	0f 92       	push	r0
     2d0:	11 24       	eor	r1, r1
     2d2:	0b b6       	in	r0, 0x3b	; 59
     2d4:	0f 92       	push	r0
     2d6:	2f 93       	push	r18
     2d8:	3f 93       	push	r19
     2da:	4f 93       	push	r20
     2dc:	5f 93       	push	r21
     2de:	6f 93       	push	r22
     2e0:	7f 93       	push	r23
     2e2:	8f 93       	push	r24
     2e4:	9f 93       	push	r25
     2e6:	af 93       	push	r26
     2e8:	bf 93       	push	r27
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	ef 93       	push	r30
     2f0:	ff 93       	push	r31
  static uint16_t count_isr1 =0;
  static uint16_t count_isr12=0;
  count_isr12++;
     2f2:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <count_isr12.2228>
     2f6:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <count_isr12.2228+0x1>
     2fa:	01 96       	adiw	r24, 0x01	; 1
     2fc:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <count_isr12.2228+0x1>
     300:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <count_isr12.2228>
  count_isr1++;
     304:	c0 91 6d 02 	lds	r28, 0x026D	; 0x80026d <count_isr1.2227>
     308:	d0 91 6e 02 	lds	r29, 0x026E	; 0x80026e <count_isr1.2227+0x1>
     30c:	21 96       	adiw	r28, 0x01	; 1
     30e:	d0 93 6e 02 	sts	0x026E, r29	; 0x80026e <count_isr1.2227+0x1>
     312:	c0 93 6d 02 	sts	0x026D, r28	; 0x80026d <count_isr1.2227>

  if (lcd_flag ==1 ) {//only update when bit toggled
     316:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <lcd_flag>
     31a:	81 30       	cpi	r24, 0x01	; 1
     31c:	09 f4       	brne	.+2      	; 0x320 <__vector_12+0x58>
     31e:	b7 c0       	rjmp	.+366    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
    update_lcd_alarm();
  }

  if (((mode>>BIT3)&1) == 1) {// Check Alarm enabled bit
     320:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     324:	83 ff       	sbrs	r24, 3
     326:	52 c0       	rjmp	.+164    	; 0x3cc <__vector_12+0x104>
    if ((hrs_mil == a_hrs_mil)&&(min_count == a_min_count)&& (snoozing==0)) {//current time matches alarm time
     328:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <hrs_mil>
     32c:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <a_hrs_mil>
     330:	98 17       	cp	r25, r24
     332:	09 f4       	brne	.+2      	; 0x336 <__vector_12+0x6e>
     334:	74 c0       	rjmp	.+232    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
         ra_flag=1;
       }
       alarm_sound_prev = alarm_sound;
    }

    if ((((mode>>BIT4)&1)==1)&&(alarm_sound==1)) {//check Snooze enabled bit and alarm is on
     336:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     33a:	84 ff       	sbrs	r24, 4
     33c:	05 c0       	rjmp	.+10     	; 0x348 <__vector_12+0x80>
     33e:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <alarm_sound>
     342:	81 30       	cpi	r24, 0x01	; 1
     344:	09 f4       	brne	.+2      	; 0x348 <__vector_12+0x80>
     346:	8b c0       	rjmp	.+278    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
      snoozing =1;//activate snoozing
      mode &= ~(1<<BIT4);//clear snooze bit
      count_isr1 = 0;//reset count ready for snoozing
    }

    if (snoozing == 1) {//system is snoozing
     348:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <snoozing>
     34c:	81 30       	cpi	r24, 0x01	; 1
     34e:	09 f0       	breq	.+2      	; 0x352 <__vector_12+0x8a>
     350:	51 c0       	rjmp	.+162    	; 0x3f4 <__vector_12+0x12c>
      alarm_sound = 0;//Alarm sound off
     352:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <alarm_sound>
      if (alarm_sound != alarm_sound_prev) {
     356:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <alarm_sound>
     35a:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <alarm_sound_prev>
     35e:	98 17       	cp	r25, r24
     360:	19 f0       	breq	.+6      	; 0x368 <__vector_12+0xa0>
        ra_flag=1;
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
      }
      alarm_sound_prev=alarm_sound;
     368:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <alarm_sound>
     36c:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <alarm_sound_prev>

      if (count_isr1 == 2000) {//1 second tick
     370:	c0 3d       	cpi	r28, 0xD0	; 208
     372:	d7 40       	sbci	r29, 0x07	; 7
     374:	09 f0       	breq	.+2      	; 0x378 <__vector_12+0xb0>
     376:	3e c0       	rjmp	.+124    	; 0x3f4 <__vector_12+0x12c>
        snooze_time--;//decrement snooze time
     378:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <snooze_time>
     37c:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <snooze_time+0x1>
     380:	01 97       	sbiw	r24, 0x01	; 1
     382:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <snooze_time+0x1>
     386:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <snooze_time>
        count_isr1 =0;//reset count
     38a:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <count_isr1.2227+0x1>
     38e:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <count_isr1.2227>
        if (snooze_time==0) {
     392:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <snooze_time>
     396:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <snooze_time+0x1>
     39a:	89 2b       	or	r24, r25
     39c:	59 f5       	brne	.+86     	; 0x3f4 <__vector_12+0x12c>
          alarm_sound = 1;//Alarm sound ON
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <alarm_sound>
          if (alarm_sound != alarm_sound_prev) {
     3a4:	20 91 4f 02 	lds	r18, 0x024F	; 0x80024f <alarm_sound>
     3a8:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <alarm_sound_prev>
     3ac:	29 13       	cpse	r18, r25
            ra_flag=1;
     3ae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
          }
          alarm_sound_prev=alarm_sound;
     3b2:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <alarm_sound>
     3b6:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <alarm_sound_prev>
          snooze_time = 10;//reset snooze time
     3ba:	8a e0       	ldi	r24, 0x0A	; 10
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <snooze_time+0x1>
     3c2:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <snooze_time>
          snoozing    = 0;//reset snoozing
     3c6:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <snoozing>
     3ca:	14 c0       	rjmp	.+40     	; 0x3f4 <__vector_12+0x12c>

    // if (alarm_sound==1) {
    //   PORTD ^= (1<<BIT2);//toggle Pin 0 on Port d for alarm sound
    // }
  }else{
    mode &= ~(1<<BIT4);// clear snooze if Alarm DISABLED
     3cc:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     3d0:	8f 7e       	andi	r24, 0xEF	; 239
     3d2:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <mode>
    alarm_sound=0;//alarm sound off
     3d6:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <alarm_sound>
    if (alarm_sound != alarm_sound_prev) {
     3da:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <alarm_sound>
     3de:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <alarm_sound_prev>
     3e2:	98 17       	cp	r25, r24
     3e4:	19 f0       	breq	.+6      	; 0x3ec <__vector_12+0x124>
      ra_flag=1;
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    if (snoozing == 1) {//system is snoozing
      alarm_sound = 0;//Alarm sound off
      if (alarm_sound != alarm_sound_prev) {
        ra_flag=1;
      }
      alarm_sound_prev=alarm_sound;
     3ec:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <alarm_sound>
     3f0:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <alarm_sound_prev>
    if (alarm_sound != alarm_sound_prev) {
      ra_flag=1;
    }
    alarm_sound_prev=alarm_sound;
  }
}
     3f4:	ff 91       	pop	r31
     3f6:	ef 91       	pop	r30
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	bf 91       	pop	r27
     3fe:	af 91       	pop	r26
     400:	9f 91       	pop	r25
     402:	8f 91       	pop	r24
     404:	7f 91       	pop	r23
     406:	6f 91       	pop	r22
     408:	5f 91       	pop	r21
     40a:	4f 91       	pop	r20
     40c:	3f 91       	pop	r19
     40e:	2f 91       	pop	r18
     410:	0f 90       	pop	r0
     412:	0b be       	out	0x3b, r0	; 59
     414:	0f 90       	pop	r0
     416:	0f be       	out	0x3f, r0	; 63
     418:	0f 90       	pop	r0
     41a:	1f 90       	pop	r1
     41c:	18 95       	reti
  if (lcd_flag ==1 ) {//only update when bit toggled
    update_lcd_alarm();
  }

  if (((mode>>BIT3)&1) == 1) {// Check Alarm enabled bit
    if ((hrs_mil == a_hrs_mil)&&(min_count == a_min_count)&& (snoozing==0)) {//current time matches alarm time
     41e:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <min_count>
     422:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <a_min_count>
     426:	98 13       	cpse	r25, r24
     428:	86 cf       	rjmp	.-244    	; 0x336 <__vector_12+0x6e>
     42a:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <snoozing>
     42e:	81 11       	cpse	r24, r1
     430:	82 cf       	rjmp	.-252    	; 0x336 <__vector_12+0x6e>
       alarm_sound = 1;//Alarm sound on
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <alarm_sound>
       if (alarm_sound != alarm_sound_prev) {
     438:	20 91 4f 02 	lds	r18, 0x024F	; 0x80024f <alarm_sound>
     43c:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <alarm_sound_prev>
     440:	29 13       	cpse	r18, r25
         ra_flag=1;
     442:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
       }
       alarm_sound_prev = alarm_sound;
     446:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <alarm_sound>
     44a:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <alarm_sound_prev>
    }

    if ((((mode>>BIT4)&1)==1)&&(alarm_sound==1)) {//check Snooze enabled bit and alarm is on
     44e:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     452:	84 ff       	sbrs	r24, 4
     454:	cf cf       	rjmp	.-98     	; 0x3f4 <__vector_12+0x12c>
     456:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <alarm_sound>
     45a:	81 30       	cpi	r24, 0x01	; 1
     45c:	59 f6       	brne	.-106    	; 0x3f4 <__vector_12+0x12c>
      snoozing =1;//activate snoozing
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <snoozing>
      mode &= ~(1<<BIT4);//clear snooze bit
     464:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     468:	8f 7e       	andi	r24, 0xEF	; 239
     46a:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <mode>
      count_isr1 = 0;//reset count ready for snoozing
     46e:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <count_isr1.2227+0x1>
     472:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <count_isr1.2227>
    }

    if (snoozing == 1) {//system is snoozing
      alarm_sound = 0;//Alarm sound off
     476:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <alarm_sound>
      if (alarm_sound != alarm_sound_prev) {
     47a:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <alarm_sound>
     47e:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <alarm_sound_prev>
     482:	98 17       	cp	r25, r24
     484:	09 f4       	brne	.+2      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     486:	b2 cf       	rjmp	.-156    	; 0x3ec <__vector_12+0x124>
     488:	c0 e0       	ldi	r28, 0x00	; 0
     48a:	d0 e0       	ldi	r29, 0x00	; 0
     48c:	6a cf       	rjmp	.-300    	; 0x362 <__vector_12+0x9a>
  static uint16_t count_isr12=0;
  count_isr12++;
  count_isr1++;

  if (lcd_flag ==1 ) {//only update when bit toggled
    update_lcd_alarm();
     48e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <update_lcd_alarm>
     492:	46 cf       	rjmp	.-372    	; 0x320 <__vector_12+0x58>

00000494 <update_time>:
  count
Parameters: NONE
Return: void
***************************************************************/
void update_time() {
  if (sec_count == 59) {
     494:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <sec_count>
     498:	8b 33       	cpi	r24, 0x3B	; 59
     49a:	31 f0       	breq	.+12     	; 0x4a8 <update_time+0x14>
      }
    }else{
      min_count++;//increment min count
    }
  }else{
    sec_count++;//increment seconds
     49c:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <sec_count>
     4a0:	8f 5f       	subi	r24, 0xFF	; 255
     4a2:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <sec_count>
     4a6:	08 95       	ret
Parameters: NONE
Return: void
***************************************************************/
void update_time() {
  if (sec_count == 59) {
    sec_count =0;//reset seconds
     4a8:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <sec_count>
    if (min_count==59) {
     4ac:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <min_count>
     4b0:	8b 33       	cpi	r24, 0x3B	; 59
     4b2:	31 f0       	breq	.+12     	; 0x4c0 <update_time+0x2c>
        hrs_std =1;//reset standard time
      }else{
        hrs_std++;//increment standard time
      }
    }else{
      min_count++;//increment min count
     4b4:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <min_count>
     4b8:	8f 5f       	subi	r24, 0xFF	; 255
     4ba:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <min_count>
     4be:	08 95       	ret
***************************************************************/
void update_time() {
  if (sec_count == 59) {
    sec_count =0;//reset seconds
    if (min_count==59) {
      min_count=0;//reset mins
     4c0:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <min_count>
      if (hrs_mil==23) {
     4c4:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <hrs_mil>
     4c8:	87 31       	cpi	r24, 0x17	; 23
     4ca:	79 f0       	breq	.+30     	; 0x4ea <update_time+0x56>
        hrs_mil =0;//reset military time
      }else{
        hrs_mil++;//increment military time
     4cc:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <hrs_mil>
     4d0:	8f 5f       	subi	r24, 0xFF	; 255
     4d2:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <hrs_mil>
      }
      if (hrs_std == 13) {
     4d6:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <hrs_std>
     4da:	8d 30       	cpi	r24, 0x0D	; 13
     4dc:	49 f0       	breq	.+18     	; 0x4f0 <update_time+0x5c>
        hrs_std =1;//reset standard time
      }else{
        hrs_std++;//increment standard time
     4de:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <hrs_std>
     4e2:	8f 5f       	subi	r24, 0xFF	; 255
     4e4:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <hrs_std>
     4e8:	08 95       	ret
  if (sec_count == 59) {
    sec_count =0;//reset seconds
    if (min_count==59) {
      min_count=0;//reset mins
      if (hrs_mil==23) {
        hrs_mil =0;//reset military time
     4ea:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <hrs_mil>
     4ee:	f3 cf       	rjmp	.-26     	; 0x4d6 <update_time+0x42>
      }else{
        hrs_mil++;//increment military time
      }
      if (hrs_std == 13) {
        hrs_std =1;//reset standard time
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <hrs_std>
     4f6:	08 95       	ret

000004f8 <decoder>:
Precondition: NONE
Return: uint_t binary equivalent
************************************************************************/
uint8_t decoder(uint8_t decimal)
{
  if (decimal == 0) {//decimal: 0
     4f8:	88 23       	and	r24, r24
     4fa:	a1 f0       	breq	.+40     	; 0x524 <decoder+0x2c>
    return 0b11000000;
  }else if (decimal == 1) {//decimal: 1
     4fc:	81 30       	cpi	r24, 0x01	; 1
     4fe:	a1 f0       	breq	.+40     	; 0x528 <decoder+0x30>
    return 0b11111001;
  }else if (decimal == 2) {//decimal: 2
     500:	82 30       	cpi	r24, 0x02	; 2
     502:	a1 f0       	breq	.+40     	; 0x52c <decoder+0x34>
    return 0b10100100;
  }else if (decimal == 3) {//decimal: 3
     504:	83 30       	cpi	r24, 0x03	; 3
     506:	a1 f0       	breq	.+40     	; 0x530 <decoder+0x38>
    return 0b10110000;
  }else if (decimal == 4) {//deciaml: 4
     508:	84 30       	cpi	r24, 0x04	; 4
     50a:	a1 f0       	breq	.+40     	; 0x534 <decoder+0x3c>
    return 0b10011001;
  }else if (decimal == 5) {//decimal: 5
     50c:	85 30       	cpi	r24, 0x05	; 5
     50e:	a1 f0       	breq	.+40     	; 0x538 <decoder+0x40>
    return 0b10010010;
  }else if (decimal == 6) {//deciaml: 6
     510:	86 30       	cpi	r24, 0x06	; 6
     512:	a1 f0       	breq	.+40     	; 0x53c <decoder+0x44>
    return 0b10000010;
  }else if (decimal == 7) {//decimal: 7
     514:	87 30       	cpi	r24, 0x07	; 7
     516:	a1 f0       	breq	.+40     	; 0x540 <decoder+0x48>
    return 0b11111000;
  }else if (decimal == 8) {//decimal: 8
     518:	88 30       	cpi	r24, 0x08	; 8
     51a:	a1 f0       	breq	.+40     	; 0x544 <decoder+0x4c>
    return 0b10000000;
  }else if (decimal == 9) {//decimal: 9
     51c:	89 30       	cpi	r24, 0x09	; 9
     51e:	a1 f0       	breq	.+40     	; 0x548 <decoder+0x50>
    return 0b10010000;
  }
  //should never reach this return
  return 0b11111111;// All segments OFF
     520:	8f ef       	ldi	r24, 0xFF	; 255
     522:	08 95       	ret
Return: uint_t binary equivalent
************************************************************************/
uint8_t decoder(uint8_t decimal)
{
  if (decimal == 0) {//decimal: 0
    return 0b11000000;
     524:	80 ec       	ldi	r24, 0xC0	; 192
     526:	08 95       	ret
  }else if (decimal == 1) {//decimal: 1
    return 0b11111001;
     528:	89 ef       	ldi	r24, 0xF9	; 249
     52a:	08 95       	ret
  }else if (decimal == 2) {//decimal: 2
    return 0b10100100;
     52c:	84 ea       	ldi	r24, 0xA4	; 164
     52e:	08 95       	ret
  }else if (decimal == 3) {//decimal: 3
    return 0b10110000;
     530:	80 eb       	ldi	r24, 0xB0	; 176
     532:	08 95       	ret
  }else if (decimal == 4) {//deciaml: 4
    return 0b10011001;
     534:	89 e9       	ldi	r24, 0x99	; 153
     536:	08 95       	ret
  }else if (decimal == 5) {//decimal: 5
    return 0b10010010;
     538:	82 e9       	ldi	r24, 0x92	; 146
     53a:	08 95       	ret
  }else if (decimal == 6) {//deciaml: 6
    return 0b10000010;
     53c:	82 e8       	ldi	r24, 0x82	; 130
     53e:	08 95       	ret
  }else if (decimal == 7) {//decimal: 7
    return 0b11111000;
     540:	88 ef       	ldi	r24, 0xF8	; 248
     542:	08 95       	ret
  }else if (decimal == 8) {//decimal: 8
    return 0b10000000;
     544:	80 e8       	ldi	r24, 0x80	; 128
     546:	08 95       	ret
  }else if (decimal == 9) {//decimal: 9
    return 0b10010000;
     548:	80 e9       	ldi	r24, 0x90	; 144
  }
  //should never reach this return
  return 0b11111111;// All segments OFF
}
     54a:	08 95       	ret

0000054c <adc_init>:
  This function will setup the Analog-to-digital conveter
Parameters: NONE
Return: void
***************************************************************/
void adc_init(){
  DDRF  &= ~(_BV(DDF7));//make port F bit 7 is ADC input
     54c:	e1 e6       	ldi	r30, 0x61	; 97
     54e:	f0 e0       	ldi	r31, 0x00	; 0
     550:	80 81       	ld	r24, Z
     552:	8f 77       	andi	r24, 0x7F	; 127
     554:	80 83       	st	Z, r24
  PORTF &= ~(_BV(PF7));// port F bit 7 pullups must be off
     556:	e2 e6       	ldi	r30, 0x62	; 98
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	80 81       	ld	r24, Z
     55c:	8f 77       	andi	r24, 0x7F	; 127
     55e:	80 83       	st	Z, r24
  ADMUX |= (1<<REFS0)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0) ;//single-ended, input PORTF bit 7, right adjusted, 10 bits
     560:	87 b1       	in	r24, 0x07	; 7
     562:	87 64       	ori	r24, 0x47	; 71
     564:	87 b9       	out	0x07, r24	; 7
  ADCSRA|= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);//ADC enabled, division factor 128
     566:	86 b1       	in	r24, 0x06	; 6
     568:	87 68       	ori	r24, 0x87	; 135
     56a:	86 b9       	out	0x06, r24	; 6
     56c:	08 95       	ret

0000056e <adc_read>:
Parameters: NONE
Return:
  * 16 bit unsigned  adc result
***************************************************************/
uint16_t adc_read(){
  ADCSRA |= (1<<ADSC);//Start ADC
     56e:	36 9a       	sbi	0x06, 6	; 6
  while (bit_is_clear(ADCSRA,ADIF)){}//wait for ADC to finish
     570:	34 9b       	sbis	0x06, 4	; 6
     572:	fe cf       	rjmp	.-4      	; 0x570 <adc_read+0x2>
  ADCSRA |= (1<<ADIF);//clear flag by writing one
     574:	34 9a       	sbi	0x06, 4	; 6
  return ADC;
     576:	84 b1       	in	r24, 0x04	; 4
     578:	95 b1       	in	r25, 0x05	; 5
}
     57a:	08 95       	ret

0000057c <decode_time>:
  "ALARM" enable on the DP of mins one segment
Parameters: NONE
Return: void
***************************************************************/
void decode_time()
{
     57c:	ef 92       	push	r14
     57e:	ff 92       	push	r15
     580:	0f 93       	push	r16
     582:	1f 93       	push	r17
     584:	cf 93       	push	r28
     586:	df 93       	push	r29

  // Parse Clock time to segment array
  if ((((mode>>BIT1)&1)==0) && (((mode>>BIT6)&1)==0)) {
     588:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     58c:	81 fd       	sbrc	r24, 1
     58e:	86 c0       	rjmp	.+268    	; 0x69c <decode_time+0x120>
     590:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     594:	86 fd       	sbrc	r24, 6
     596:	82 c0       	rjmp	.+260    	; 0x69c <decode_time+0x120>
    min_ones = (min_count%10);//parsed ones place of minutes
     598:	20 91 64 02 	lds	r18, 0x0264	; 0x800264 <min_count>
     59c:	87 e6       	ldi	r24, 0x67	; 103
     59e:	28 02       	muls	r18, r24
     5a0:	91 2d       	mov	r25, r1
     5a2:	11 24       	eor	r1, r1
     5a4:	95 95       	asr	r25
     5a6:	95 95       	asr	r25
     5a8:	27 fd       	sbrc	r18, 7
     5aa:	93 95       	inc	r25
     5ac:	3a e0       	ldi	r19, 0x0A	; 10
     5ae:	93 9f       	mul	r25, r19
     5b0:	20 19       	sub	r18, r0
     5b2:	11 24       	eor	r1, r1
     5b4:	20 93 61 02 	sts	0x0261, r18	; 0x800261 <min_ones>
    min_tens = (min_count/10)%10;//parsed tens place of minutes
     5b8:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <min_count>
     5bc:	98 02       	muls	r25, r24
     5be:	21 2d       	mov	r18, r1
     5c0:	11 24       	eor	r1, r1
     5c2:	25 95       	asr	r18
     5c4:	25 95       	asr	r18
     5c6:	97 fd       	sbrc	r25, 7
     5c8:	23 95       	inc	r18
     5ca:	28 02       	muls	r18, r24
     5cc:	91 2d       	mov	r25, r1
     5ce:	11 24       	eor	r1, r1
     5d0:	95 95       	asr	r25
     5d2:	95 95       	asr	r25
     5d4:	27 fd       	sbrc	r18, 7
     5d6:	93 95       	inc	r25
     5d8:	3a e0       	ldi	r19, 0x0A	; 10
     5da:	93 9f       	mul	r25, r19
     5dc:	20 19       	sub	r18, r0
     5de:	11 24       	eor	r1, r1
     5e0:	20 93 60 02 	sts	0x0260, r18	; 0x800260 <min_tens>

    if (mil_std == 0) {//military time
     5e4:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <mil_std>
     5e8:	99 23       	and	r25, r25
     5ea:	09 f4       	brne	.+2      	; 0x5ee <decode_time+0x72>
     5ec:	a8 c1       	rjmp	.+848    	; 0x93e <decode_time+0x3c2>
      hrs_ones = (hrs_mil%10);//parse ones
      hrs_tens = (hrs_mil/10)%10;//parse tens
      segment_data[2] |= (1<<BIT2);//AM indicator
    }else{//standard time
      hrs_ones = (hrs_std%10);//parse ones
     5ee:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <hrs_std>
     5f2:	28 02       	muls	r18, r24
     5f4:	91 2d       	mov	r25, r1
     5f6:	11 24       	eor	r1, r1
     5f8:	95 95       	asr	r25
     5fa:	95 95       	asr	r25
     5fc:	27 fd       	sbrc	r18, 7
     5fe:	93 95       	inc	r25
     600:	3a e0       	ldi	r19, 0x0A	; 10
     602:	93 9f       	mul	r25, r19
     604:	20 19       	sub	r18, r0
     606:	11 24       	eor	r1, r1
     608:	20 93 5f 02 	sts	0x025F, r18	; 0x80025f <hrs_ones>
      hrs_tens = (hrs_std/10)%10;//parse tens
     60c:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <hrs_std>
     610:	28 02       	muls	r18, r24
     612:	91 2d       	mov	r25, r1
     614:	11 24       	eor	r1, r1
     616:	95 95       	asr	r25
     618:	95 95       	asr	r25
     61a:	27 fd       	sbrc	r18, 7
     61c:	93 95       	inc	r25
     61e:	98 02       	muls	r25, r24
     620:	81 2d       	mov	r24, r1
     622:	11 24       	eor	r1, r1
     624:	85 95       	asr	r24
     626:	85 95       	asr	r24
     628:	97 fd       	sbrc	r25, 7
     62a:	83 95       	inc	r24
     62c:	2a e0       	ldi	r18, 0x0A	; 10
     62e:	82 9f       	mul	r24, r18
     630:	90 19       	sub	r25, r0
     632:	11 24       	eor	r1, r1
     634:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <hrs_tens>
      if (hrs_mil>=12) {
     638:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <hrs_mil>
     63c:	8c 30       	cpi	r24, 0x0C	; 12
     63e:	0c f4       	brge	.+2      	; 0x642 <decode_time+0xc6>
     640:	a9 c1       	rjmp	.+850    	; 0x994 <decode_time+0x418>
        segment_data[2] &= ~(1<<BIT2);//PM indicator
     642:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <segment_data+0x2>
     646:	8b 7f       	andi	r24, 0xFB	; 251
     648:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <segment_data+0x2>
        segment_data[2] |= (1<<BIT2);//AM indicator
      }
    }

    //decoded numbers to array
    segment_data[0] = decoder(hrs_tens);//hours tens
     64c:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <hrs_tens>
     650:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <decoder>
     654:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <segment_data>
    segment_data[1] = decoder(hrs_ones);//hours ones
     658:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <hrs_ones>
     65c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <decoder>
     660:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <segment_data+0x1>
    segment_data[3] = decoder(min_tens);//minutes tens
     664:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <min_tens>
     668:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <decoder>
     66c:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <segment_data+0x3>
    segment_data[4] = decoder(min_ones);//minutes ones
     670:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <min_ones>
     674:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <decoder>
     678:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <segment_data+0x4>
      segment_data[0] = 0b11111111;//1 zero off
    }


  }
  if (((mode>>BIT3)&1)==1) {
     67c:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     680:	83 fd       	sbrc	r24, 3
     682:	51 c1       	rjmp	.+674    	; 0x926 <decode_time+0x3aa>
    segment_data[4] &= ~(1<<BIT7);//ALARM EN indicator
  }else{
    segment_data[4] |= (1<<BIT7);//ALARM DISABLE
     684:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <segment_data+0x4>
     688:	80 68       	ori	r24, 0x80	; 128
     68a:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <segment_data+0x4>
  }

}
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	1f 91       	pop	r17
     694:	0f 91       	pop	r16
     696:	ff 90       	pop	r15
     698:	ef 90       	pop	r14
     69a:	08 95       	ret
    //decoded numbers to array
    segment_data[0] = decoder(hrs_tens);//hours tens
    segment_data[1] = decoder(hrs_ones);//hours ones
    segment_data[3] = decoder(min_tens);//minutes tens
    segment_data[4] = decoder(min_ones);//minutes ones
  }else if (((mode&1)==0) && (((mode>>BIT1)&1)==1) && (((mode>>BIT6)&1)==0)) {//parse Alarm time to segemt array
     69c:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     6a0:	80 fd       	sbrc	r24, 0
     6a2:	7b c0       	rjmp	.+246    	; 0x79a <decode_time+0x21e>
     6a4:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     6a8:	81 ff       	sbrs	r24, 1
     6aa:	77 c0       	rjmp	.+238    	; 0x79a <decode_time+0x21e>
     6ac:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     6b0:	86 fd       	sbrc	r24, 6
     6b2:	73 c0       	rjmp	.+230    	; 0x79a <decode_time+0x21e>
    a_min_ones = (a_min_count%10);//parsed ones place of minutes
     6b4:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <a_min_count>
     6b8:	87 e6       	ldi	r24, 0x67	; 103
     6ba:	28 02       	muls	r18, r24
     6bc:	91 2d       	mov	r25, r1
     6be:	11 24       	eor	r1, r1
     6c0:	95 95       	asr	r25
     6c2:	95 95       	asr	r25
     6c4:	27 fd       	sbrc	r18, 7
     6c6:	93 95       	inc	r25
     6c8:	3a e0       	ldi	r19, 0x0A	; 10
     6ca:	93 9f       	mul	r25, r19
     6cc:	20 19       	sub	r18, r0
     6ce:	11 24       	eor	r1, r1
     6d0:	20 93 55 02 	sts	0x0255, r18	; 0x800255 <a_min_ones>
    a_min_tens = (a_min_count/10)%10;//parsed tens place of minutes
     6d4:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <a_min_count>
     6d8:	98 02       	muls	r25, r24
     6da:	21 2d       	mov	r18, r1
     6dc:	11 24       	eor	r1, r1
     6de:	25 95       	asr	r18
     6e0:	25 95       	asr	r18
     6e2:	97 fd       	sbrc	r25, 7
     6e4:	23 95       	inc	r18
     6e6:	28 02       	muls	r18, r24
     6e8:	91 2d       	mov	r25, r1
     6ea:	11 24       	eor	r1, r1
     6ec:	95 95       	asr	r25
     6ee:	95 95       	asr	r25
     6f0:	27 fd       	sbrc	r18, 7
     6f2:	93 95       	inc	r25
     6f4:	3a e0       	ldi	r19, 0x0A	; 10
     6f6:	93 9f       	mul	r25, r19
     6f8:	20 19       	sub	r18, r0
     6fa:	11 24       	eor	r1, r1
     6fc:	20 93 54 02 	sts	0x0254, r18	; 0x800254 <a_min_tens>

    if (mil_std == 0) {//military time
     700:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <mil_std>
     704:	99 23       	and	r25, r25
     706:	09 f4       	brne	.+2      	; 0x70a <decode_time+0x18e>
     708:	4b c1       	rjmp	.+662    	; 0x9a0 <decode_time+0x424>
      a_hrs_ones = (a_hrs_mil%10);//parse ones
      a_hrs_tens = (a_hrs_mil/10)%10;//parse tens
      segment_data[2] |= (1<<BIT2);//AM indicator
    }else{//standard time
      a_hrs_ones = (a_hrs_std%10);//parse ones
     70a:	20 91 56 02 	lds	r18, 0x0256	; 0x800256 <a_hrs_std>
     70e:	28 02       	muls	r18, r24
     710:	91 2d       	mov	r25, r1
     712:	11 24       	eor	r1, r1
     714:	95 95       	asr	r25
     716:	95 95       	asr	r25
     718:	27 fd       	sbrc	r18, 7
     71a:	93 95       	inc	r25
     71c:	3a e0       	ldi	r19, 0x0A	; 10
     71e:	93 9f       	mul	r25, r19
     720:	20 19       	sub	r18, r0
     722:	11 24       	eor	r1, r1
     724:	20 93 53 02 	sts	0x0253, r18	; 0x800253 <a_hrs_ones>
      a_hrs_tens = (a_hrs_std/10)%10;//parse tens
     728:	20 91 56 02 	lds	r18, 0x0256	; 0x800256 <a_hrs_std>
     72c:	28 02       	muls	r18, r24
     72e:	91 2d       	mov	r25, r1
     730:	11 24       	eor	r1, r1
     732:	95 95       	asr	r25
     734:	95 95       	asr	r25
     736:	27 fd       	sbrc	r18, 7
     738:	93 95       	inc	r25
     73a:	98 02       	muls	r25, r24
     73c:	81 2d       	mov	r24, r1
     73e:	11 24       	eor	r1, r1
     740:	85 95       	asr	r24
     742:	85 95       	asr	r24
     744:	97 fd       	sbrc	r25, 7
     746:	83 95       	inc	r24
     748:	2a e0       	ldi	r18, 0x0A	; 10
     74a:	82 9f       	mul	r24, r18
     74c:	90 19       	sub	r25, r0
     74e:	11 24       	eor	r1, r1
     750:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <a_hrs_tens>
      if (a_hrs_mil>=12) {
     754:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <a_hrs_mil>
     758:	8c 30       	cpi	r24, 0x0C	; 12
     75a:	0c f4       	brge	.+2      	; 0x75e <decode_time+0x1e2>
     75c:	4c c1       	rjmp	.+664    	; 0x9f6 <decode_time+0x47a>
        segment_data[2] &= ~(1<<BIT2);//PM indicator
     75e:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <segment_data+0x2>
     762:	8b 7f       	andi	r24, 0xFB	; 251
     764:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <segment_data+0x2>
      }else{
        segment_data[2] |= (1<<BIT2);//AM indicator
      }
    }
    //decoded numbers to array
    segment_data[0] = decoder(a_hrs_tens);//hours tens
     768:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <a_hrs_tens>
     76c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <decoder>
     770:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <segment_data>
    segment_data[1] = decoder(a_hrs_ones);//hours ones
     774:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <a_hrs_ones>
     778:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <decoder>
     77c:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <segment_data+0x1>
    segment_data[3] = decoder(a_min_tens);//minutes tens
     780:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <a_min_tens>
     784:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <decoder>
     788:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <segment_data+0x3>
    segment_data[4] = decoder(a_min_ones);//minutes ones
     78c:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <a_min_ones>
     790:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <decoder>
     794:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <segment_data+0x4>
     798:	71 cf       	rjmp	.-286    	; 0x67c <decode_time+0x100>
  }else if ((((mode>>BIT0)&1)==0)&&(((mode>>BIT1)&1)==0)&&(((mode>>BIT6)&1)==1)) {//parse Frequency to segment array
     79a:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     79e:	80 fd       	sbrc	r24, 0
     7a0:	6d cf       	rjmp	.-294    	; 0x67c <decode_time+0x100>
     7a2:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     7a6:	81 fd       	sbrc	r24, 1
     7a8:	69 cf       	rjmp	.-302    	; 0x67c <decode_time+0x100>
     7aa:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     7ae:	86 ff       	sbrs	r24, 6
     7b0:	65 cf       	rjmp	.-310    	; 0x67c <decode_time+0x100>
    freq_tenths   = (current_fm_freq/10)%10;
     7b2:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <current_fm_freq>
     7b6:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <current_fm_freq+0x1>
     7ba:	ad ec       	ldi	r26, 0xCD	; 205
     7bc:	bc ec       	ldi	r27, 0xCC	; 204
     7be:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <__umulhisi3>
     7c2:	ec 01       	movw	r28, r24
     7c4:	d6 95       	lsr	r29
     7c6:	c7 95       	ror	r28
     7c8:	d6 95       	lsr	r29
     7ca:	c7 95       	ror	r28
     7cc:	d6 95       	lsr	r29
     7ce:	c7 95       	ror	r28
     7d0:	9e 01       	movw	r18, r28
     7d2:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <__umulhisi3>
     7d6:	96 95       	lsr	r25
     7d8:	87 95       	ror	r24
     7da:	96 95       	lsr	r25
     7dc:	87 95       	ror	r24
     7de:	96 95       	lsr	r25
     7e0:	87 95       	ror	r24
     7e2:	9c 01       	movw	r18, r24
     7e4:	22 0f       	add	r18, r18
     7e6:	33 1f       	adc	r19, r19
     7e8:	88 0f       	add	r24, r24
     7ea:	99 1f       	adc	r25, r25
     7ec:	88 0f       	add	r24, r24
     7ee:	99 1f       	adc	r25, r25
     7f0:	88 0f       	add	r24, r24
     7f2:	99 1f       	adc	r25, r25
     7f4:	82 0f       	add	r24, r18
     7f6:	93 1f       	adc	r25, r19
     7f8:	c8 1b       	sub	r28, r24
     7fa:	d9 0b       	sbc	r29, r25
     7fc:	c0 93 44 02 	sts	0x0244, r28	; 0x800244 <freq_tenths>
    freq_ones     = (current_fm_freq/100)%10;
     800:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <current_fm_freq>
     804:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <current_fm_freq+0x1>
     808:	36 95       	lsr	r19
     80a:	27 95       	ror	r18
     80c:	36 95       	lsr	r19
     80e:	27 95       	ror	r18
     810:	ab e7       	ldi	r26, 0x7B	; 123
     812:	b4 e1       	ldi	r27, 0x14	; 20
     814:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <__umulhisi3>
     818:	8c 01       	movw	r16, r24
     81a:	16 95       	lsr	r17
     81c:	07 95       	ror	r16
     81e:	98 01       	movw	r18, r16
     820:	ad ec       	ldi	r26, 0xCD	; 205
     822:	bc ec       	ldi	r27, 0xCC	; 204
     824:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <__umulhisi3>
     828:	96 95       	lsr	r25
     82a:	87 95       	ror	r24
     82c:	96 95       	lsr	r25
     82e:	87 95       	ror	r24
     830:	96 95       	lsr	r25
     832:	87 95       	ror	r24
     834:	9c 01       	movw	r18, r24
     836:	22 0f       	add	r18, r18
     838:	33 1f       	adc	r19, r19
     83a:	88 0f       	add	r24, r24
     83c:	99 1f       	adc	r25, r25
     83e:	88 0f       	add	r24, r24
     840:	99 1f       	adc	r25, r25
     842:	88 0f       	add	r24, r24
     844:	99 1f       	adc	r25, r25
     846:	82 0f       	add	r24, r18
     848:	93 1f       	adc	r25, r19
     84a:	08 1b       	sub	r16, r24
     84c:	19 0b       	sbc	r17, r25
     84e:	00 93 47 02 	sts	0x0247, r16	; 0x800247 <freq_ones>
    freq_tens     = (current_fm_freq/1000)%10;
     852:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <current_fm_freq>
     856:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <current_fm_freq+0x1>
     85a:	36 95       	lsr	r19
     85c:	27 95       	ror	r18
     85e:	36 95       	lsr	r19
     860:	27 95       	ror	r18
     862:	36 95       	lsr	r19
     864:	27 95       	ror	r18
     866:	a5 ec       	ldi	r26, 0xC5	; 197
     868:	b0 e2       	ldi	r27, 0x20	; 32
     86a:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <__umulhisi3>
     86e:	7c 01       	movw	r14, r24
     870:	f2 94       	swap	r15
     872:	e2 94       	swap	r14
     874:	df e0       	ldi	r29, 0x0F	; 15
     876:	ed 22       	and	r14, r29
     878:	ef 24       	eor	r14, r15
     87a:	fd 22       	and	r15, r29
     87c:	ef 24       	eor	r14, r15
     87e:	97 01       	movw	r18, r14
     880:	ad ec       	ldi	r26, 0xCD	; 205
     882:	bc ec       	ldi	r27, 0xCC	; 204
     884:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <__umulhisi3>
     888:	96 95       	lsr	r25
     88a:	87 95       	ror	r24
     88c:	96 95       	lsr	r25
     88e:	87 95       	ror	r24
     890:	96 95       	lsr	r25
     892:	87 95       	ror	r24
     894:	9c 01       	movw	r18, r24
     896:	22 0f       	add	r18, r18
     898:	33 1f       	adc	r19, r19
     89a:	88 0f       	add	r24, r24
     89c:	99 1f       	adc	r25, r25
     89e:	88 0f       	add	r24, r24
     8a0:	99 1f       	adc	r25, r25
     8a2:	88 0f       	add	r24, r24
     8a4:	99 1f       	adc	r25, r25
     8a6:	82 0f       	add	r24, r18
     8a8:	93 1f       	adc	r25, r19
     8aa:	e8 1a       	sub	r14, r24
     8ac:	f9 0a       	sbc	r15, r25
     8ae:	e0 92 46 02 	sts	0x0246, r14	; 0x800246 <freq_tens>
    freq_hundreds = (current_fm_freq/10000)%10;
     8b2:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <current_fm_freq>
     8b6:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <current_fm_freq+0x1>
     8ba:	32 95       	swap	r19
     8bc:	22 95       	swap	r18
     8be:	2f 70       	andi	r18, 0x0F	; 15
     8c0:	23 27       	eor	r18, r19
     8c2:	3f 70       	andi	r19, 0x0F	; 15
     8c4:	23 27       	eor	r18, r19
     8c6:	a7 e4       	ldi	r26, 0x47	; 71
     8c8:	b3 e0       	ldi	r27, 0x03	; 3
     8ca:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <__umulhisi3>
     8ce:	96 95       	lsr	r25
     8d0:	87 95       	ror	r24
     8d2:	96 95       	lsr	r25
     8d4:	87 95       	ror	r24
     8d6:	96 95       	lsr	r25
     8d8:	87 95       	ror	r24
     8da:	d8 2f       	mov	r29, r24
     8dc:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <freq_hundreds>
    //decoded frequency to array
    segment_data[0] = decoder(freq_hundreds);
     8e0:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <decoder>
     8e4:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <segment_data>
    segment_data[1] = decoder(freq_tens);
     8e8:	8e 2d       	mov	r24, r14
     8ea:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <decoder>
     8ee:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <segment_data+0x1>
    segment_data[2] |= (1<<BIT2);//turn off PM indicator
     8f2:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <segment_data+0x2>
     8f6:	84 60       	ori	r24, 0x04	; 4
     8f8:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <segment_data+0x2>
    segment_data[3] = decoder(freq_ones);
     8fc:	80 2f       	mov	r24, r16
     8fe:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <decoder>
     902:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <segment_data+0x3>
    segment_data[3] &= ~(1<<BIT7);//activate decimal point
     906:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <segment_data+0x3>
     90a:	8f 77       	andi	r24, 0x7F	; 127
     90c:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <segment_data+0x3>
    segment_data[4] = decoder(freq_tenths);
     910:	8c 2f       	mov	r24, r28
     912:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <decoder>
     916:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <segment_data+0x4>
    if (freq_hundreds==0) {//Leding zero turn off
     91a:	d1 11       	cpse	r29, r1
     91c:	af ce       	rjmp	.-674    	; 0x67c <decode_time+0x100>
      segment_data[0] = 0b11111111;//1 zero off
     91e:	8f ef       	ldi	r24, 0xFF	; 255
     920:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <segment_data>
     924:	ab ce       	rjmp	.-682    	; 0x67c <decode_time+0x100>
    }


  }
  if (((mode>>BIT3)&1)==1) {
    segment_data[4] &= ~(1<<BIT7);//ALARM EN indicator
     926:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <segment_data+0x4>
     92a:	8f 77       	andi	r24, 0x7F	; 127
     92c:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <segment_data+0x4>
  }else{
    segment_data[4] |= (1<<BIT7);//ALARM DISABLE
  }

}
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	1f 91       	pop	r17
     936:	0f 91       	pop	r16
     938:	ff 90       	pop	r15
     93a:	ef 90       	pop	r14
     93c:	08 95       	ret
  if ((((mode>>BIT1)&1)==0) && (((mode>>BIT6)&1)==0)) {
    min_ones = (min_count%10);//parsed ones place of minutes
    min_tens = (min_count/10)%10;//parsed tens place of minutes

    if (mil_std == 0) {//military time
      hrs_ones = (hrs_mil%10);//parse ones
     93e:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <hrs_mil>
     942:	28 02       	muls	r18, r24
     944:	91 2d       	mov	r25, r1
     946:	11 24       	eor	r1, r1
     948:	95 95       	asr	r25
     94a:	95 95       	asr	r25
     94c:	27 fd       	sbrc	r18, 7
     94e:	93 95       	inc	r25
     950:	3a e0       	ldi	r19, 0x0A	; 10
     952:	93 9f       	mul	r25, r19
     954:	20 19       	sub	r18, r0
     956:	11 24       	eor	r1, r1
     958:	20 93 5f 02 	sts	0x025F, r18	; 0x80025f <hrs_ones>
      hrs_tens = (hrs_mil/10)%10;//parse tens
     95c:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <hrs_mil>
     960:	28 02       	muls	r18, r24
     962:	91 2d       	mov	r25, r1
     964:	11 24       	eor	r1, r1
     966:	95 95       	asr	r25
     968:	95 95       	asr	r25
     96a:	27 fd       	sbrc	r18, 7
     96c:	93 95       	inc	r25
     96e:	98 02       	muls	r25, r24
     970:	81 2d       	mov	r24, r1
     972:	11 24       	eor	r1, r1
     974:	85 95       	asr	r24
     976:	85 95       	asr	r24
     978:	97 fd       	sbrc	r25, 7
     97a:	83 95       	inc	r24
     97c:	2a e0       	ldi	r18, 0x0A	; 10
     97e:	82 9f       	mul	r24, r18
     980:	90 19       	sub	r25, r0
     982:	11 24       	eor	r1, r1
     984:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <hrs_tens>
      segment_data[2] |= (1<<BIT2);//AM indicator
     988:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <segment_data+0x2>
     98c:	84 60       	ori	r24, 0x04	; 4
     98e:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <segment_data+0x2>
     992:	5c ce       	rjmp	.-840    	; 0x64c <decode_time+0xd0>
      hrs_ones = (hrs_std%10);//parse ones
      hrs_tens = (hrs_std/10)%10;//parse tens
      if (hrs_mil>=12) {
        segment_data[2] &= ~(1<<BIT2);//PM indicator
      }else{
        segment_data[2] |= (1<<BIT2);//AM indicator
     994:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <segment_data+0x2>
     998:	84 60       	ori	r24, 0x04	; 4
     99a:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <segment_data+0x2>
     99e:	56 ce       	rjmp	.-852    	; 0x64c <decode_time+0xd0>
  }else if (((mode&1)==0) && (((mode>>BIT1)&1)==1) && (((mode>>BIT6)&1)==0)) {//parse Alarm time to segemt array
    a_min_ones = (a_min_count%10);//parsed ones place of minutes
    a_min_tens = (a_min_count/10)%10;//parsed tens place of minutes

    if (mil_std == 0) {//military time
      a_hrs_ones = (a_hrs_mil%10);//parse ones
     9a0:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <a_hrs_mil>
     9a4:	28 02       	muls	r18, r24
     9a6:	91 2d       	mov	r25, r1
     9a8:	11 24       	eor	r1, r1
     9aa:	95 95       	asr	r25
     9ac:	95 95       	asr	r25
     9ae:	27 fd       	sbrc	r18, 7
     9b0:	93 95       	inc	r25
     9b2:	3a e0       	ldi	r19, 0x0A	; 10
     9b4:	93 9f       	mul	r25, r19
     9b6:	20 19       	sub	r18, r0
     9b8:	11 24       	eor	r1, r1
     9ba:	20 93 53 02 	sts	0x0253, r18	; 0x800253 <a_hrs_ones>
      a_hrs_tens = (a_hrs_mil/10)%10;//parse tens
     9be:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <a_hrs_mil>
     9c2:	28 02       	muls	r18, r24
     9c4:	91 2d       	mov	r25, r1
     9c6:	11 24       	eor	r1, r1
     9c8:	95 95       	asr	r25
     9ca:	95 95       	asr	r25
     9cc:	27 fd       	sbrc	r18, 7
     9ce:	93 95       	inc	r25
     9d0:	98 02       	muls	r25, r24
     9d2:	81 2d       	mov	r24, r1
     9d4:	11 24       	eor	r1, r1
     9d6:	85 95       	asr	r24
     9d8:	85 95       	asr	r24
     9da:	97 fd       	sbrc	r25, 7
     9dc:	83 95       	inc	r24
     9de:	2a e0       	ldi	r18, 0x0A	; 10
     9e0:	82 9f       	mul	r24, r18
     9e2:	90 19       	sub	r25, r0
     9e4:	11 24       	eor	r1, r1
     9e6:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <a_hrs_tens>
      segment_data[2] |= (1<<BIT2);//AM indicator
     9ea:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <segment_data+0x2>
     9ee:	84 60       	ori	r24, 0x04	; 4
     9f0:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <segment_data+0x2>
     9f4:	b9 ce       	rjmp	.-654    	; 0x768 <decode_time+0x1ec>
      a_hrs_ones = (a_hrs_std%10);//parse ones
      a_hrs_tens = (a_hrs_std/10)%10;//parse tens
      if (a_hrs_mil>=12) {
        segment_data[2] &= ~(1<<BIT2);//PM indicator
      }else{
        segment_data[2] |= (1<<BIT2);//AM indicator
     9f6:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <segment_data+0x2>
     9fa:	84 60       	ori	r24, 0x04	; 4
     9fc:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <segment_data+0x2>
     a00:	b3 ce       	rjmp	.-666    	; 0x768 <decode_time+0x1ec>

00000a02 <update_lcd_temp>:
Return:VOID
***************************************************************/
void update_lcd_temp(){
  //Remote Temperature Reading************************
  //USART ISR will put data in rx_array
  if (rcv_rdy==1) {
     a02:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <rcv_rdy>
     a06:	21 30       	cpi	r18, 0x01	; 1
     a08:	a9 f1       	breq	.+106    	; 0xa74 <update_lcd_temp+0x72>
      lcd_full_array[t_counter+24]=rx_array[t_counter];
    }
    lcd_full_array[length+24]=' ';//blank after number
  }
  //request data
  uart_putc('s');
     a0a:	83 e7       	ldi	r24, 0x73	; 115
     a0c:	0e 94 99 11 	call	0x2332	; 0x2332 <uart_putc>
  uart_putc('\0');
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	0e 94 99 11 	call	0x2332	; 0x2332 <uart_putc>

  //Local Temperature Reading*************************
  read_LM73();
     a16:	0e 94 4e 01 	call	0x29c	; 0x29c <read_LM73>
  length = strlen(lcd_str_temperature);
     a1a:	e8 ea       	ldi	r30, 0xA8	; 168
     a1c:	f2 e0       	ldi	r31, 0x02	; 2
     a1e:	01 90       	ld	r0, Z+
     a20:	00 20       	and	r0, r0
     a22:	e9 f7       	brne	.-6      	; 0xa1e <update_lcd_temp+0x1c>
     a24:	31 97       	sbiw	r30, 0x01	; 1
     a26:	af 01       	movw	r20, r30
     a28:	48 5a       	subi	r20, 0xA8	; 168
     a2a:	52 40       	sbci	r21, 0x02	; 2
     a2c:	40 93 49 02 	sts	0x0249, r20	; 0x800249 <length>
  for (t_counter = 0; t_counter <= (length-1); t_counter++) {
     a30:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <t_counter>
     a34:	55 27       	eor	r21, r21
     a36:	41 15       	cp	r20, r1
     a38:	51 05       	cpc	r21, r1
     a3a:	b1 f0       	breq	.+44     	; 0xa68 <update_lcd_temp+0x66>
     a3c:	21 e0       	ldi	r18, 0x01	; 1
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	01 c0       	rjmp	.+2      	; 0xa46 <update_lcd_temp+0x44>
     a44:	23 2f       	mov	r18, r19
    lcd_full_array[t_counter+16]=lcd_str_temperature[t_counter];
     a46:	fc 01       	movw	r30, r24
     a48:	e8 55       	subi	r30, 0x58	; 88
     a4a:	fd 4f       	sbci	r31, 0xFD	; 253
     a4c:	30 81       	ld	r19, Z
     a4e:	fc 01       	movw	r30, r24
     a50:	e5 5f       	subi	r30, 0xF5	; 245
     a52:	fe 4f       	sbci	r31, 0xFE	; 254
     a54:	30 8b       	std	Z+16, r19	; 0x10
  uart_putc('\0');

  //Local Temperature Reading*************************
  read_LM73();
  length = strlen(lcd_str_temperature);
  for (t_counter = 0; t_counter <= (length-1); t_counter++) {
     a56:	82 2f       	mov	r24, r18
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	31 e0       	ldi	r19, 0x01	; 1
     a5c:	32 0f       	add	r19, r18
     a5e:	84 17       	cp	r24, r20
     a60:	95 07       	cpc	r25, r21
     a62:	84 f3       	brlt	.-32     	; 0xa44 <update_lcd_temp+0x42>
     a64:	20 93 4a 02 	sts	0x024A, r18	; 0x80024a <t_counter>
    lcd_full_array[t_counter+16]=lcd_str_temperature[t_counter];
  }
  lcd_full_array[length+16] = ' ';//makes a space afer writing numbers
     a68:	fa 01       	movw	r30, r20
     a6a:	e5 5f       	subi	r30, 0xF5	; 245
     a6c:	fe 4f       	sbci	r31, 0xFE	; 254
     a6e:	80 e2       	ldi	r24, 0x20	; 32
     a70:	80 8b       	std	Z+16, r24	; 0x10

}
     a72:	08 95       	ret
***************************************************************/
void update_lcd_temp(){
  //Remote Temperature Reading************************
  //USART ISR will put data in rx_array
  if (rcv_rdy==1) {
    rcv_rdy=0;//reset flag
     a74:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <rcv_rdy>
    length = strlen(rx_array);//length of usart incoming buffer
     a78:	e8 e9       	ldi	r30, 0x98	; 152
     a7a:	f2 e0       	ldi	r31, 0x02	; 2
     a7c:	01 90       	ld	r0, Z+
     a7e:	00 20       	and	r0, r0
     a80:	e9 f7       	brne	.-6      	; 0xa7c <update_lcd_temp+0x7a>
     a82:	31 97       	sbiw	r30, 0x01	; 1
     a84:	af 01       	movw	r20, r30
     a86:	48 59       	subi	r20, 0x98	; 152
     a88:	52 40       	sbci	r21, 0x02	; 2
     a8a:	40 93 49 02 	sts	0x0249, r20	; 0x800249 <length>
    for (t_counter = 0; t_counter <= (length-1); t_counter++) {
     a8e:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <t_counter>
     a92:	55 27       	eor	r21, r21
     a94:	41 15       	cp	r20, r1
     a96:	51 05       	cpc	r21, r1
     a98:	a9 f0       	breq	.+42     	; 0xac4 <update_lcd_temp+0xc2>
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	01 c0       	rjmp	.+2      	; 0xaa2 <update_lcd_temp+0xa0>
     aa0:	23 2f       	mov	r18, r19
      // clear_display();//for testing
      // cursor_home();//for testing
      // char2lcd(rx_array[t_counter]);// for testing
      // _delay_ms(1000);//for testing
      lcd_full_array[t_counter+24]=rx_array[t_counter];
     aa2:	fc 01       	movw	r30, r24
     aa4:	e5 5f       	subi	r30, 0xF5	; 245
     aa6:	fe 4f       	sbci	r31, 0xFE	; 254
     aa8:	dc 01       	movw	r26, r24
     aaa:	a8 56       	subi	r26, 0x68	; 104
     aac:	bd 4f       	sbci	r27, 0xFD	; 253
     aae:	8c 91       	ld	r24, X
     ab0:	80 8f       	std	Z+24, r24	; 0x18
  //Remote Temperature Reading************************
  //USART ISR will put data in rx_array
  if (rcv_rdy==1) {
    rcv_rdy=0;//reset flag
    length = strlen(rx_array);//length of usart incoming buffer
    for (t_counter = 0; t_counter <= (length-1); t_counter++) {
     ab2:	82 2f       	mov	r24, r18
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	31 e0       	ldi	r19, 0x01	; 1
     ab8:	32 0f       	add	r19, r18
     aba:	84 17       	cp	r24, r20
     abc:	95 07       	cpc	r25, r21
     abe:	84 f3       	brlt	.-32     	; 0xaa0 <update_lcd_temp+0x9e>
     ac0:	20 93 4a 02 	sts	0x024A, r18	; 0x80024a <t_counter>
      // cursor_home();//for testing
      // char2lcd(rx_array[t_counter]);// for testing
      // _delay_ms(1000);//for testing
      lcd_full_array[t_counter+24]=rx_array[t_counter];
    }
    lcd_full_array[length+24]=' ';//blank after number
     ac4:	fa 01       	movw	r30, r20
     ac6:	e5 5f       	subi	r30, 0xF5	; 245
     ac8:	fe 4f       	sbci	r31, 0xFE	; 254
     aca:	80 e2       	ldi	r24, 0x20	; 32
     acc:	80 8f       	std	Z+24, r24	; 0x18
     ace:	9d cf       	rjmp	.-198    	; 0xa0a <update_lcd_temp+0x8>

00000ad0 <__vector_18>:
}

// //***********************************************************************
// //                     ISR fo USART0
// //***********************************************************************
ISR(USART0_RX_vect){
     ad0:	1f 92       	push	r1
     ad2:	0f 92       	push	r0
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	0f 92       	push	r0
     ad8:	11 24       	eor	r1, r1
     ada:	0b b6       	in	r0, 0x3b	; 59
     adc:	0f 92       	push	r0
     ade:	8f 93       	push	r24
     ae0:	9f 93       	push	r25
     ae2:	ef 93       	push	r30
     ae4:	ff 93       	push	r31
static  uint8_t  i;
  rx_char = UDR0;              //get character
     ae6:	8c b1       	in	r24, 0x0c	; 12
     ae8:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <rx_char>
  rx_array[i++]=rx_char;  //store in array
     aec:	e0 91 6c 02 	lds	r30, 0x026C	; 0x80026c <i.2256>
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	9e 0f       	add	r25, r30
     af4:	90 93 6c 02 	sts	0x026C, r25	; 0x80026c <i.2256>
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	e8 56       	subi	r30, 0x68	; 104
     afc:	fd 4f       	sbci	r31, 0xFD	; 253
     afe:	80 83       	st	Z, r24
 //if entire string has arrived, set flag, reset index
  if(rx_char == '\0'){
     b00:	81 11       	cpse	r24, r1
     b02:	05 c0       	rjmp	.+10     	; 0xb0e <__vector_18+0x3e>
    rcv_rdy=1;
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <rcv_rdy>
    i=0;
     b0a:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <i.2256>
  }
}
     b0e:	ff 91       	pop	r31
     b10:	ef 91       	pop	r30
     b12:	9f 91       	pop	r25
     b14:	8f 91       	pop	r24
     b16:	0f 90       	pop	r0
     b18:	0b be       	out	0x3b, r0	; 59
     b1a:	0f 90       	pop	r0
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	0f 90       	pop	r0
     b20:	1f 90       	pop	r1
     b22:	18 95       	reti

00000b24 <__vector_16>:

//***********************************************************************
//                     ISR for timer counter zero
//***********************************************************************
ISR(TIMER0_OVF_vect)
{
     b24:	1f 92       	push	r1
     b26:	0f 92       	push	r0
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	0f 92       	push	r0
     b2c:	11 24       	eor	r1, r1
     b2e:	0b b6       	in	r0, 0x3b	; 59
     b30:	0f 92       	push	r0
     b32:	2f 93       	push	r18
     b34:	3f 93       	push	r19
     b36:	4f 93       	push	r20
     b38:	5f 93       	push	r21
     b3a:	6f 93       	push	r22
     b3c:	7f 93       	push	r23
     b3e:	8f 93       	push	r24
     b40:	9f 93       	push	r25
     b42:	af 93       	push	r26
     b44:	bf 93       	push	r27
     b46:	ef 93       	push	r30
     b48:	ff 93       	push	r31
  static uint8_t count_isr = 0;
  count_isr++;
     b4a:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <count_isr.2262>
     b4e:	8f 5f       	subi	r24, 0xFF	; 255
     b50:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <count_isr.2262>

  if (count_isr==250) {
     b54:	8a 3f       	cpi	r24, 0xFA	; 250
     b56:	99 f1       	breq	.+102    	; 0xbbe <__vector_16+0x9a>
    update_lcd_temp();//get reading from temp sensors
  }

  if ((count_isr%1)==0) {
    refresh_lcd(lcd_full_array);//update lcd
     b58:	8b e0       	ldi	r24, 0x0B	; 11
     b5a:	91 e0       	ldi	r25, 0x01	; 1
     b5c:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <refresh_lcd>
  }

  if ((count_isr % 128) == 0) {
     b60:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <count_isr.2262>
     b64:	8f 77       	andi	r24, 0x7F	; 127
     b66:	99 f0       	breq	.+38     	; 0xb8e <__vector_16+0x6a>
    }
    second_tick = 1;//set flag

  }

}
     b68:	ff 91       	pop	r31
     b6a:	ef 91       	pop	r30
     b6c:	bf 91       	pop	r27
     b6e:	af 91       	pop	r26
     b70:	9f 91       	pop	r25
     b72:	8f 91       	pop	r24
     b74:	7f 91       	pop	r23
     b76:	6f 91       	pop	r22
     b78:	5f 91       	pop	r21
     b7a:	4f 91       	pop	r20
     b7c:	3f 91       	pop	r19
     b7e:	2f 91       	pop	r18
     b80:	0f 90       	pop	r0
     b82:	0b be       	out	0x3b, r0	; 59
     b84:	0f 90       	pop	r0
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	0f 90       	pop	r0
     b8a:	1f 90       	pop	r1
     b8c:	18 95       	reti
  if ((count_isr%1)==0) {
    refresh_lcd(lcd_full_array);//update lcd
  }

  if ((count_isr % 128) == 0) {
    update_time();//update seconds, minutes and hours
     b8e:	0e 94 4a 02 	call	0x494	; 0x494 <update_time>
    if ((((mode>>BIT6)&1)==1) && (((mode>>BIT0)&1)==0) && ((((mode>>BIT1)&1)==0))) {//Freq tuning mode
     b92:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     b96:	86 ff       	sbrs	r24, 6
     b98:	08 c0       	rjmp	.+16     	; 0xbaa <__vector_16+0x86>
     b9a:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     b9e:	80 fd       	sbrc	r24, 0
     ba0:	04 c0       	rjmp	.+8      	; 0xbaa <__vector_16+0x86>
     ba2:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     ba6:	81 ff       	sbrs	r24, 1
     ba8:	0d c0       	rjmp	.+26     	; 0xbc4 <__vector_16+0xa0>
      segment_data[2] |= (1<<BIT0)|(1<<BIT1);// colon off
    }else{// Time mode
      segment_data[2] ^= (1<<BIT0)|(1<<BIT1);//Toggle colon
     baa:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <segment_data+0x2>
     bae:	83 e0       	ldi	r24, 0x03	; 3
     bb0:	89 27       	eor	r24, r25
     bb2:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <segment_data+0x2>
    }
    second_tick = 1;//set flag
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <second_tick>

  }

}
     bbc:	d5 cf       	rjmp	.-86     	; 0xb68 <__vector_16+0x44>
{
  static uint8_t count_isr = 0;
  count_isr++;

  if (count_isr==250) {
    update_lcd_temp();//get reading from temp sensors
     bbe:	0e 94 01 05 	call	0xa02	; 0xa02 <update_lcd_temp>
     bc2:	ca cf       	rjmp	.-108    	; 0xb58 <__vector_16+0x34>
  }

  if ((count_isr % 128) == 0) {
    update_time();//update seconds, minutes and hours
    if ((((mode>>BIT6)&1)==1) && (((mode>>BIT0)&1)==0) && ((((mode>>BIT1)&1)==0))) {//Freq tuning mode
      segment_data[2] |= (1<<BIT0)|(1<<BIT1);// colon off
     bc4:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <segment_data+0x2>
     bc8:	83 60       	ori	r24, 0x03	; 3
     bca:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <segment_data+0x2>
     bce:	f3 cf       	rjmp	.-26     	; 0xbb6 <__vector_16+0x92>

00000bd0 <update_inc_dec>:
  to the mode that has been selected by the user.
Parameters: NONE
Return:void
***************************************************************/
void update_inc_dec(){
  if (mode == 0) {// increas/decrease 0(default)
     bd0:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     bd4:	88 23       	and	r24, r24
     bd6:	a1 f0       	breq	.+40     	; 0xc00 <update_inc_dec+0x30>
    inc_dec1 = 0;
    inc_dec2 = 0;
  }else if ( ((mode&1)==1) && (((mode>>1)&1)==0) ) {//set clock time
     bd8:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     bdc:	80 fd       	sbrc	r24, 0
     bde:	15 c0       	rjmp	.+42     	; 0xc0a <update_inc_dec+0x3a>
    inc_dec1 = 1;
    inc_dec2 = 1;
  }else if ( ((mode&1)==0) && (((mode>>1)&1)==1) ) {//set alarm time
     be0:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     be4:	80 fd       	sbrc	r24, 0
     be6:	04 c0       	rjmp	.+8      	; 0xbf0 <update_inc_dec+0x20>
     be8:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     bec:	81 fd       	sbrc	r24, 1
     bee:	11 c0       	rjmp	.+34     	; 0xc12 <update_inc_dec+0x42>
    inc_dec1 = 1;
    inc_dec2 = 1;
  }else if ( ((mode&1)==1) && (((mode>>1)&1)==1) ) {//both modes are set
     bf0:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     bf4:	80 ff       	sbrs	r24, 0
     bf6:	08 c0       	rjmp	.+16     	; 0xc08 <update_inc_dec+0x38>
     bf8:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     bfc:	81 ff       	sbrs	r24, 1
     bfe:	04 c0       	rjmp	.+8      	; 0xc08 <update_inc_dec+0x38>
    inc_dec1 = 0;//do nothing
     c00:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <inc_dec1>
    inc_dec2 = 0;//do nothing
     c04:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <inc_dec2>
     c08:	08 95       	ret
***************************************************************/
void update_inc_dec(){
  if (mode == 0) {// increas/decrease 0(default)
    inc_dec1 = 0;
    inc_dec2 = 0;
  }else if ( ((mode&1)==1) && (((mode>>1)&1)==0) ) {//set clock time
     c0a:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     c0e:	81 fd       	sbrc	r24, 1
     c10:	e7 cf       	rjmp	.-50     	; 0xbe0 <update_inc_dec+0x10>
    inc_dec1 = 1;
    inc_dec2 = 1;
  }else if ( ((mode&1)==0) && (((mode>>1)&1)==1) ) {//set alarm time
    inc_dec1 = 1;
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <inc_dec1>
    inc_dec2 = 1;
     c18:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <inc_dec2>
     c1c:	08 95       	ret

00000c1e <update_mode>:
  Register arrangment:
  BIT7(0)|BIT6(0)|BIT5(0)|BIT4(0)|BIT3(Alarm 0/1)|BIT2(Mil/STD)|BIT1(Alarm Time)|BIT0(Clk Time)
Parameters: NONE
Return:void
***************************************************************/
void update_mode() {
     c1e:	cf 93       	push	r28
  //Reconfigure the PORTS to read from the pushbuttons:
  DDRA = 0x00;//set PORT A to all inputs
     c20:	1a ba       	out	0x1a, r1	; 26
  PORTA = 0xFF;//set PORTA all pullups
     c22:	8f ef       	ldi	r24, 0xFF	; 255
     c24:	8b bb       	out	0x1b, r24	; 27
  PORTC = 0x70;// ENABLE TRI buffer
     c26:	80 e7       	ldi	r24, 0x70	; 112
     c28:	85 bb       	out	0x15, r24	; 21

  for(n = 0; n<=6;n++){//only check button 0,1,2,3,4,5,6
     c2a:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <n>
     c2e:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <n>
     c32:	87 30       	cpi	r24, 0x07	; 7
     c34:	08 f0       	brcs	.+2      	; 0xc38 <update_mode+0x1a>
     c36:	58 c0       	rjmp	.+176    	; 0xce8 <update_mode+0xca>
        mode |= (1<<BIT4);//Set snooze EN (DON'T Toggle)
      }else if (n==5) {//button 5
        mode ^= (1<<BIT5);//Radio EN
        radio_pwr_flag |= (1<<BIT0);//set flag
      }else if (n==6) {//button 6
        mode ^= (1<<BIT6);//Set frequency
     c38:	c0 e4       	ldi	r28, 0x40	; 64
        mode ^= (1<<BIT3);//Alarm EN
        lcd_flag =1;//set flag to update lcd
      }else if (n==4) {//button 4
        mode |= (1<<BIT4);//Set snooze EN (DON'T Toggle)
      }else if (n==5) {//button 5
        mode ^= (1<<BIT5);//Radio EN
     c3a:	b0 e2       	ldi	r27, 0x20	; 32
      }else if (n==1) {//button 1
        mode ^= (1<<BIT1);//Set Alarm time (toggle bit 1)
      }else if (n==2) {//button 2
        mode ^= (1<<BIT2);//Toggle Military/Standard
      }else if (n==3) {//buton 3
        mode ^= (1<<BIT3);//Alarm EN
     c3c:	a8 e0       	ldi	r26, 0x08	; 8
        lcd_flag =1;//set flag to update lcd
     c3e:	51 e0       	ldi	r21, 0x01	; 1
      if (n == 0) {//button 0
        mode ^= (1<<BIT0);//Set time (toggle bit 0)
      }else if (n==1) {//button 1
        mode ^= (1<<BIT1);//Set Alarm time (toggle bit 1)
      }else if (n==2) {//button 2
        mode ^= (1<<BIT2);//Toggle Military/Standard
     c40:	74 e0       	ldi	r23, 0x04	; 4
  for(n = 0; n<=6;n++){//only check button 0,1,2,3,4,5,6
    if (debounce_switch(n)) {
      if (n == 0) {//button 0
        mode ^= (1<<BIT0);//Set time (toggle bit 0)
      }else if (n==1) {//button 1
        mode ^= (1<<BIT1);//Set Alarm time (toggle bit 1)
     c42:	62 e0       	ldi	r22, 0x02	; 2
     c44:	0a c0       	rjmp	.+20     	; 0xc5a <update_mode+0x3c>
  //Reconfigure the PORTS to read from the pushbuttons:
  DDRA = 0x00;//set PORT A to all inputs
  PORTA = 0xFF;//set PORTA all pullups
  PORTC = 0x70;// ENABLE TRI buffer

  for(n = 0; n<=6;n++){//only check button 0,1,2,3,4,5,6
     c46:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <n>
     c4a:	8f 5f       	subi	r24, 0xFF	; 255
     c4c:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <n>
     c50:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <n>
     c54:	87 30       	cpi	r24, 0x07	; 7
     c56:	08 f0       	brcs	.+2      	; 0xc5a <update_mode+0x3c>
     c58:	47 c0       	rjmp	.+142    	; 0xce8 <update_mode+0xca>
    if (debounce_switch(n)) {
     c5a:	40 91 5c 02 	lds	r20, 0x025C	; 0x80025c <n>
//Adapted to check all buttons from Ganssel's "Guide to Debouncing"
//Expects active low pushbuttons on PINA port.
//
uint8_t debounce_switch(uint8_t pin) {
  static uint16_t state[8] = {0};
  state[pin] = (state[pin]<<1)|(!bit_is_clear(PINA,pin))|0xE000;
     c5e:	e4 2f       	mov	r30, r20
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	99 b3       	in	r25, 0x19	; 25
     c64:	ee 0f       	add	r30, r30
     c66:	ff 1f       	adc	r31, r31
     c68:	ee 58       	subi	r30, 0x8E	; 142
     c6a:	fd 4f       	sbci	r31, 0xFD	; 253
     c6c:	20 81       	ld	r18, Z
     c6e:	31 81       	ldd	r19, Z+1	; 0x01
     c70:	22 0f       	add	r18, r18
     c72:	33 1f       	adc	r19, r19
     c74:	30 6e       	ori	r19, 0xE0	; 224
     c76:	89 2f       	mov	r24, r25
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <update_mode+0x62>
     c7c:	95 95       	asr	r25
     c7e:	87 95       	ror	r24
     c80:	4a 95       	dec	r20
     c82:	e2 f7       	brpl	.-8      	; 0xc7c <update_mode+0x5e>
     c84:	81 70       	andi	r24, 0x01	; 1
     c86:	99 27       	eor	r25, r25
     c88:	82 2b       	or	r24, r18
     c8a:	93 2b       	or	r25, r19
     c8c:	91 83       	std	Z+1, r25	; 0x01
     c8e:	80 83       	st	Z, r24
  if (state[pin]==0xF000) {
     c90:	81 15       	cp	r24, r1
     c92:	90 4f       	sbci	r25, 0xF0	; 240
     c94:	c1 f6       	brne	.-80     	; 0xc46 <update_mode+0x28>
  PORTA = 0xFF;//set PORTA all pullups
  PORTC = 0x70;// ENABLE TRI buffer

  for(n = 0; n<=6;n++){//only check button 0,1,2,3,4,5,6
    if (debounce_switch(n)) {
      if (n == 0) {//button 0
     c96:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <n>
     c9a:	81 11       	cpse	r24, r1
     c9c:	06 c0       	rjmp	.+12     	; 0xcaa <update_mode+0x8c>
        mode ^= (1<<BIT0);//Set time (toggle bit 0)
     c9e:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     ca2:	85 27       	eor	r24, r21
     ca4:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <mode>
     ca8:	ce cf       	rjmp	.-100    	; 0xc46 <update_mode+0x28>
      }else if (n==1) {//button 1
     caa:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <n>
     cae:	81 30       	cpi	r24, 0x01	; 1
     cb0:	09 f1       	breq	.+66     	; 0xcf4 <update_mode+0xd6>
        mode ^= (1<<BIT1);//Set Alarm time (toggle bit 1)
      }else if (n==2) {//button 2
     cb2:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <n>
     cb6:	82 30       	cpi	r24, 0x02	; 2
     cb8:	19 f1       	breq	.+70     	; 0xd00 <update_mode+0xe2>
        mode ^= (1<<BIT2);//Toggle Military/Standard
      }else if (n==3) {//buton 3
     cba:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <n>
     cbe:	83 30       	cpi	r24, 0x03	; 3
     cc0:	29 f1       	breq	.+74     	; 0xd0c <update_mode+0xee>
        mode ^= (1<<BIT3);//Alarm EN
        lcd_flag =1;//set flag to update lcd
      }else if (n==4) {//button 4
     cc2:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <n>
     cc6:	84 30       	cpi	r24, 0x04	; 4
     cc8:	49 f1       	breq	.+82     	; 0xd1c <update_mode+0xfe>
        mode |= (1<<BIT4);//Set snooze EN (DON'T Toggle)
      }else if (n==5) {//button 5
     cca:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <n>
     cce:	85 30       	cpi	r24, 0x05	; 5
     cd0:	59 f1       	breq	.+86     	; 0xd28 <update_mode+0x10a>
        mode ^= (1<<BIT5);//Radio EN
        radio_pwr_flag |= (1<<BIT0);//set flag
      }else if (n==6) {//button 6
     cd2:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <n>
     cd6:	86 30       	cpi	r24, 0x06	; 6
     cd8:	09 f0       	breq	.+2      	; 0xcdc <update_mode+0xbe>
     cda:	b5 cf       	rjmp	.-150    	; 0xc46 <update_mode+0x28>
        mode ^= (1<<BIT6);//Set frequency
     cdc:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     ce0:	8c 27       	eor	r24, r28
     ce2:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <mode>
     ce6:	af cf       	rjmp	.-162    	; 0xc46 <update_mode+0x28>
      }
    }
  }
  update_inc_dec();//update the inc/dec varible
     ce8:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <update_inc_dec>
  PORTC = 0x60;//DISABLE Tri buffer
     cec:	80 e6       	ldi	r24, 0x60	; 96
     cee:	85 bb       	out	0x15, r24	; 21
}
     cf0:	cf 91       	pop	r28
     cf2:	08 95       	ret
  for(n = 0; n<=6;n++){//only check button 0,1,2,3,4,5,6
    if (debounce_switch(n)) {
      if (n == 0) {//button 0
        mode ^= (1<<BIT0);//Set time (toggle bit 0)
      }else if (n==1) {//button 1
        mode ^= (1<<BIT1);//Set Alarm time (toggle bit 1)
     cf4:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     cf8:	86 27       	eor	r24, r22
     cfa:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <mode>
     cfe:	a3 cf       	rjmp	.-186    	; 0xc46 <update_mode+0x28>
      }else if (n==2) {//button 2
        mode ^= (1<<BIT2);//Toggle Military/Standard
     d00:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     d04:	87 27       	eor	r24, r23
     d06:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <mode>
     d0a:	9d cf       	rjmp	.-198    	; 0xc46 <update_mode+0x28>
      }else if (n==3) {//buton 3
        mode ^= (1<<BIT3);//Alarm EN
     d0c:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     d10:	8a 27       	eor	r24, r26
     d12:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <mode>
        lcd_flag =1;//set flag to update lcd
     d16:	50 93 4e 02 	sts	0x024E, r21	; 0x80024e <lcd_flag>
     d1a:	95 cf       	rjmp	.-214    	; 0xc46 <update_mode+0x28>
      }else if (n==4) {//button 4
        mode |= (1<<BIT4);//Set snooze EN (DON'T Toggle)
     d1c:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     d20:	80 61       	ori	r24, 0x10	; 16
     d22:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <mode>
     d26:	8f cf       	rjmp	.-226    	; 0xc46 <update_mode+0x28>
      }else if (n==5) {//button 5
        mode ^= (1<<BIT5);//Radio EN
     d28:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     d2c:	8b 27       	eor	r24, r27
     d2e:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <mode>
        radio_pwr_flag |= (1<<BIT0);//set flag
     d32:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <radio_pwr_flag>
     d36:	81 60       	ori	r24, 0x01	; 1
     d38:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <radio_pwr_flag>
     d3c:	84 cf       	rjmp	.-248    	; 0xc46 <update_mode+0x28>

00000d3e <spi_read>:
Return:
  uint8_t value that contains the value of SPDR register
***************************************************************/
 uint8_t spi_read(void)
{
  SPDR = 0x00;//Send dummy data  to be able read register
     d3e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)) {}//wait until it is done.
     d40:	77 9b       	sbis	0x0e, 7	; 14
     d42:	fe cf       	rjmp	.-4      	; 0xd40 <spi_read+0x2>
  return(SPDR);//return the value of the read data the came in
     d44:	8f b1       	in	r24, 0x0f	; 15
}
     d46:	08 95       	ret

00000d48 <read_encoders>:
  or decrement the count  accordingly
Parameters: NONE
Return:void
***************************************************************/
void read_encoders(){
  PORTE ^= (1<<SH_LD);//toggle to low
     d48:	93 b1       	in	r25, 0x03	; 3
     d4a:	80 e4       	ldi	r24, 0x40	; 64
     d4c:	98 27       	eor	r25, r24
     d4e:	93 b9       	out	0x03, r25	; 3
  PORTE ^= (1<<SH_LD);//toggle back to high
     d50:	93 b1       	in	r25, 0x03	; 3
     d52:	89 27       	eor	r24, r25
     d54:	83 b9       	out	0x03, r24	; 3
  PORTE ^= (1<<CLK_INH);//toggle to low
     d56:	93 b1       	in	r25, 0x03	; 3
     d58:	80 e2       	ldi	r24, 0x20	; 32
     d5a:	89 27       	eor	r24, r25
     d5c:	83 b9       	out	0x03, r24	; 3
Return:
  uint8_t value that contains the value of SPDR register
***************************************************************/
 uint8_t spi_read(void)
{
  SPDR = 0x00;//Send dummy data  to be able read register
     d5e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)) {}//wait until it is done.
     d60:	77 9b       	sbis	0x0e, 7	; 14
     d62:	fe cf       	rjmp	.-4      	; 0xd60 <read_encoders+0x18>
  return(SPDR);//return the value of the read data the came in
     d64:	8f b1       	in	r24, 0x0f	; 15
***************************************************************/
void read_encoders(){
  PORTE ^= (1<<SH_LD);//toggle to low
  PORTE ^= (1<<SH_LD);//toggle back to high
  PORTE ^= (1<<CLK_INH);//toggle to low
  encoder_val= spi_read();
     d66:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <encoder_val>
  PORTE ^= (1<<CLK_INH);//toggle to high
     d6a:	93 b1       	in	r25, 0x03	; 3
     d6c:	80 e2       	ldi	r24, 0x20	; 32
     d6e:	89 27       	eor	r24, r25
     d70:	83 b9       	out	0x03, r24	; 3

  //"clean" encoder1 value
  encoder1_present = encoder_val;
     d72:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <encoder_val>
     d76:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <encoder1_present>
  for ( bitn = 7; bitn > 1; bitn--) {
     d7a:	87 e0       	ldi	r24, 0x07	; 7
     d7c:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <bitn>
     d80:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <bitn>
     d84:	82 30       	cpi	r24, 0x02	; 2
     d86:	d8 f0       	brcs	.+54     	; 0xdbe <read_encoders+0x76>
    encoder1_present &= ~(1<<bitn);
     d88:	41 e0       	ldi	r20, 0x01	; 1
     d8a:	50 e0       	ldi	r21, 0x00	; 0
     d8c:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <bitn>
     d90:	20 91 68 02 	lds	r18, 0x0268	; 0x800268 <encoder1_present>
     d94:	ba 01       	movw	r22, r20
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <read_encoders+0x54>
     d98:	66 0f       	add	r22, r22
     d9a:	77 1f       	adc	r23, r23
     d9c:	8a 95       	dec	r24
     d9e:	e2 f7       	brpl	.-8      	; 0xd98 <read_encoders+0x50>
     da0:	cb 01       	movw	r24, r22
     da2:	80 95       	com	r24
     da4:	90 95       	com	r25
     da6:	82 23       	and	r24, r18
     da8:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <encoder1_present>
  encoder_val= spi_read();
  PORTE ^= (1<<CLK_INH);//toggle to high

  //"clean" encoder1 value
  encoder1_present = encoder_val;
  for ( bitn = 7; bitn > 1; bitn--) {
     dac:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <bitn>
     db0:	81 50       	subi	r24, 0x01	; 1
     db2:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <bitn>
     db6:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <bitn>
     dba:	82 30       	cpi	r24, 0x02	; 2
     dbc:	38 f7       	brcc	.-50     	; 0xd8c <read_encoders+0x44>
    encoder1_present &= ~(1<<bitn);
  }
  //"clean" encoder2 value
  encoder2_present = (encoder_val>>2);//RS so that we get rid bit 0:1
     dbe:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <encoder_val>
     dc2:	86 95       	lsr	r24
     dc4:	86 95       	lsr	r24
     dc6:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <encoder2_present>
  for ( bitn = 7; bitn > 1; bitn--) {
     dca:	87 e0       	ldi	r24, 0x07	; 7
     dcc:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <bitn>
     dd0:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <bitn>
     dd4:	82 30       	cpi	r24, 0x02	; 2
     dd6:	d8 f0       	brcs	.+54     	; 0xe0e <read_encoders+0xc6>
    encoder2_present &= ~(1<<bitn);
     dd8:	41 e0       	ldi	r20, 0x01	; 1
     dda:	50 e0       	ldi	r21, 0x00	; 0
     ddc:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <bitn>
     de0:	20 91 66 02 	lds	r18, 0x0266	; 0x800266 <encoder2_present>
     de4:	ba 01       	movw	r22, r20
     de6:	02 c0       	rjmp	.+4      	; 0xdec <read_encoders+0xa4>
     de8:	66 0f       	add	r22, r22
     dea:	77 1f       	adc	r23, r23
     dec:	8a 95       	dec	r24
     dee:	e2 f7       	brpl	.-8      	; 0xde8 <read_encoders+0xa0>
     df0:	cb 01       	movw	r24, r22
     df2:	80 95       	com	r24
     df4:	90 95       	com	r25
     df6:	82 23       	and	r24, r18
     df8:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <encoder2_present>
  for ( bitn = 7; bitn > 1; bitn--) {
    encoder1_present &= ~(1<<bitn);
  }
  //"clean" encoder2 value
  encoder2_present = (encoder_val>>2);//RS so that we get rid bit 0:1
  for ( bitn = 7; bitn > 1; bitn--) {
     dfc:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <bitn>
     e00:	81 50       	subi	r24, 0x01	; 1
     e02:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <bitn>
     e06:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <bitn>
     e0a:	82 30       	cpi	r24, 0x02	; 2
     e0c:	38 f7       	brcc	.-50     	; 0xddc <read_encoders+0x94>
    encoder2_present &= ~(1<<bitn);
  }

  if (reset == 1) {
     e0e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <reset>
     e12:	81 30       	cpi	r24, 0x01	; 1
     e14:	09 f4       	brne	.+2      	; 0xe18 <read_encoders+0xd0>
     e16:	7c c0       	rjmp	.+248    	; 0xf10 <read_encoders+0x1c8>
    reset = 0;//set to zero after first time
  }

  //Update for encoder1 (corse/ every locking position)
  //This updates HOURS
  switch (encoder1_present) {
     e18:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <encoder1_present>
     e1c:	81 30       	cpi	r24, 0x01	; 1
     e1e:	09 f4       	brne	.+2      	; 0xe22 <read_encoders+0xda>
     e20:	86 c0       	rjmp	.+268    	; 0xf2e <read_encoders+0x1e6>
     e22:	81 30       	cpi	r24, 0x01	; 1
     e24:	08 f4       	brcc	.+2      	; 0xe28 <read_encoders+0xe0>
     e26:	8e c0       	rjmp	.+284    	; 0xf44 <read_encoders+0x1fc>
     e28:	82 30       	cpi	r24, 0x02	; 2
     e2a:	09 f4       	brne	.+2      	; 0xe2e <read_encoders+0xe6>
     e2c:	68 c0       	rjmp	.+208    	; 0xefe <read_encoders+0x1b6>
     e2e:	83 30       	cpi	r24, 0x03	; 3
     e30:	09 f0       	breq	.+2      	; 0xe34 <read_encoders+0xec>
     e32:	a0 c0       	rjmp	.+320    	; 0xf74 <read_encoders+0x22c>
      }else if (encoder1_past == 3 ) {//past state 11
        encoder1_past = encoder1_present;//set current state as past state
      }
      break;
    case 3://encoder value is 11
      if (encoder1_past == 1) {//past state 01
     e34:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <encoder1_past>
     e38:	81 30       	cpi	r24, 0x01	; 1
     e3a:	09 f4       	brne	.+2      	; 0xe3e <read_encoders+0xf6>
     e3c:	be c0       	rjmp	.+380    	; 0xfba <read_encoders+0x272>
            current_fm_freq+=20;
            station_change_flag=1;
          }
        }
        encoder1_past = encoder1_present;
      }else if (encoder1_past == 2 ) {//past state 10
     e3e:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <encoder1_past>
     e42:	82 30       	cpi	r24, 0x02	; 2
     e44:	29 f5       	brne	.+74     	; 0xe90 <read_encoders+0x148>
        if (((mode&1)==1) && (((mode>>1)&1)==0) ) {//clock time
     e46:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     e4a:	80 ff       	sbrs	r24, 0
     e4c:	8e c1       	rjmp	.+796    	; 0x116a <__stack+0x6b>
     e4e:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     e52:	81 fd       	sbrc	r24, 1
     e54:	8a c1       	rjmp	.+788    	; 0x116a <__stack+0x6b>
          hrs_mil -= inc_dec2;//decrement hours military
     e56:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <inc_dec2>
     e5a:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <hrs_mil>
     e5e:	89 1b       	sub	r24, r25
     e60:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <hrs_mil>
          hrs_std -= inc_dec2;//decrement hours standard
     e64:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <inc_dec2>
     e68:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <hrs_std>
     e6c:	89 1b       	sub	r24, r25
     e6e:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <hrs_std>
          if (hrs_mil < 0) {
     e72:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <hrs_mil>
     e76:	87 fd       	sbrc	r24, 7
     e78:	cc c1       	rjmp	.+920    	; 0x1212 <__stack+0x113>
            hrs_mil = 23;//reset military time hours
          }
          if (hrs_std <1) {
     e7a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <hrs_std>
     e7e:	18 16       	cp	r1, r24
     e80:	1c f0       	brlt	.+6      	; 0xe88 <read_encoders+0x140>
            hrs_std = 12;//reset standard time hours
     e82:	8c e0       	ldi	r24, 0x0C	; 12
     e84:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <hrs_std>
      break;
    case 0://encoder value 00
      if (encoder1_past == 2) {//past value 10
        encoder1_past = encoder1_present;
      }else if (encoder1_past == 1) {//past value 01
        encoder1_past = encoder1_present;
     e88:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <encoder1_present>
     e8c:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <encoder1_past>
      break;
  }

//Update for encoder2 (corse/ every locking position)
//This updates MINUTES
switch (encoder2_present) {
     e90:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <encoder2_present>
     e94:	81 30       	cpi	r24, 0x01	; 1
     e96:	09 f4       	brne	.+2      	; 0xe9a <read_encoders+0x152>
     e98:	64 c0       	rjmp	.+200    	; 0xf62 <read_encoders+0x21a>
     e9a:	81 30       	cpi	r24, 0x01	; 1
     e9c:	08 f4       	brcc	.+2      	; 0xea0 <read_encoders+0x158>
     e9e:	82 c0       	rjmp	.+260    	; 0xfa4 <read_encoders+0x25c>
     ea0:	82 30       	cpi	r24, 0x02	; 2
     ea2:	09 f4       	brne	.+2      	; 0xea6 <read_encoders+0x15e>
     ea4:	75 c0       	rjmp	.+234    	; 0xf90 <read_encoders+0x248>
     ea6:	83 30       	cpi	r24, 0x03	; 3
     ea8:	09 f0       	breq	.+2      	; 0xeac <read_encoders+0x164>
     eaa:	6d c0       	rjmp	.+218    	; 0xf86 <read_encoders+0x23e>
    }else if (encoder2_past == 3 ) {//curent state 11
      encoder2_past = encoder2_present;
    }
    break;
  case 3://curent state 11
    if (encoder2_past == 1) {//past state 01(increse)
     eac:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <encoder2_past>
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <read_encoders+0x16e>
     eb4:	ab c0       	rjmp	.+342    	; 0x100c <read_encoders+0x2c4>
        }
      }else if(((mode&1)==0)&& (((mode>>BIT1)&1)==0)){//volume control +
        OCR3A+=6;//increase volume
      }
      encoder2_past = encoder2_present;
    }else if (encoder2_past == 2 ) {//past state 10(decrese)
     eb6:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <encoder2_past>
     eba:	82 30       	cpi	r24, 0x02	; 2
     ebc:	09 f0       	breq	.+2      	; 0xec0 <read_encoders+0x178>
     ebe:	59 c0       	rjmp	.+178    	; 0xf72 <read_encoders+0x22a>
      if (((mode&1)==1) && (((mode>>1)&1)==0)) {//clock time
     ec0:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     ec4:	80 fd       	sbrc	r24, 0
     ec6:	bd c0       	rjmp	.+378    	; 0x1042 <read_encoders+0x2fa>
        min_count -= inc_dec1;//decrement minutes
        if (min_count < 0) {
          min_count = 59;//Zero to 59 mins
        }
      }else if (((mode&1)==0) && (((mode>>1)&1)==1)) {// Alarm time -
     ec8:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     ecc:	80 fd       	sbrc	r24, 0
     ece:	11 c1       	rjmp	.+546    	; 0x10f2 <read_encoders+0x3aa>
     ed0:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     ed4:	81 ff       	sbrs	r24, 1
     ed6:	0d c1       	rjmp	.+538    	; 0x10f2 <read_encoders+0x3aa>
        a_min_count -= inc_dec1;//decrement minutes
     ed8:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <inc_dec1>
     edc:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <a_min_count>
     ee0:	89 1b       	sub	r24, r25
     ee2:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <a_min_count>
        if (a_min_count < 0) {
     ee6:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <a_min_count>
     eea:	87 ff       	sbrs	r24, 7
     eec:	03 c0       	rjmp	.+6      	; 0xef4 <read_encoders+0x1ac>
          a_min_count = 59;//Zero to 59 mins
     eee:	8b e3       	ldi	r24, 0x3B	; 59
     ef0:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <a_min_count>
    break;
  case 0://curent state 00
    if (encoder2_past == 2) {//past state 10
      encoder2_past = encoder2_present;
    }else if (encoder2_past == 1) {//past state 01
      encoder2_past = encoder2_present;
     ef4:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <encoder2_present>
     ef8:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <encoder2_past>
     efc:	08 95       	ret
        }
        encoder1_past = encoder1_present;
      }
      break;
    case 2://encoder value 10
      if (encoder1_past == 3) {//past value 11
     efe:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <encoder1_past>
     f02:	83 30       	cpi	r24, 0x03	; 3
     f04:	09 f2       	breq	.-126    	; 0xe88 <read_encoders+0x140>
        encoder1_past = encoder1_present;
      }else if (encoder1_past == 0) {//past value 00
     f06:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <encoder1_past>
     f0a:	81 11       	cpse	r24, r1
     f0c:	c1 cf       	rjmp	.-126    	; 0xe90 <read_encoders+0x148>
     f0e:	bc cf       	rjmp	.-136    	; 0xe88 <read_encoders+0x140>
  for ( bitn = 7; bitn > 1; bitn--) {
    encoder2_present &= ~(1<<bitn);
  }

  if (reset == 1) {
    encoder1_past = encoder1_present;//set them equal
     f10:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <encoder1_present>
     f14:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <encoder1_past>
    encoder2_past = encoder2_present;//set them equal
     f18:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <encoder2_present>
     f1c:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <encoder2_past>
    reset = 0;//set to zero after first time
     f20:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <reset>
  }

  //Update for encoder1 (corse/ every locking position)
  //This updates HOURS
  switch (encoder1_present) {
     f24:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <encoder1_present>
     f28:	81 30       	cpi	r24, 0x01	; 1
     f2a:	09 f0       	breq	.+2      	; 0xf2e <read_encoders+0x1e6>
     f2c:	7a cf       	rjmp	.-268    	; 0xe22 <read_encoders+0xda>
    case 1://encoder value is 01
      if (encoder1_past == 0) {//past state 00
     f2e:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <encoder1_past>
     f32:	88 23       	and	r24, r24
     f34:	09 f4       	brne	.+2      	; 0xf38 <read_encoders+0x1f0>
     f36:	a8 cf       	rjmp	.-176    	; 0xe88 <read_encoders+0x140>
        encoder1_past = encoder1_present;//set current state as past state
      }else if (encoder1_past == 3 ) {//past state 11
     f38:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <encoder1_past>
     f3c:	83 30       	cpi	r24, 0x03	; 3
     f3e:	09 f0       	breq	.+2      	; 0xf42 <read_encoders+0x1fa>
     f40:	a7 cf       	rjmp	.-178    	; 0xe90 <read_encoders+0x148>
     f42:	a2 cf       	rjmp	.-188    	; 0xe88 <read_encoders+0x140>
      }else if (encoder1_past == 0) {//past value 00
        encoder1_past = encoder1_present;
      }
      break;
    case 0://encoder value 00
      if (encoder1_past == 2) {//past value 10
     f44:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <encoder1_past>
     f48:	82 30       	cpi	r24, 0x02	; 2
     f4a:	09 f4       	brne	.+2      	; 0xf4e <read_encoders+0x206>
     f4c:	9d cf       	rjmp	.-198    	; 0xe88 <read_encoders+0x140>
        encoder1_past = encoder1_present;
      }else if (encoder1_past == 1) {//past value 01
     f4e:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <encoder1_past>
     f52:	81 30       	cpi	r24, 0x01	; 1
     f54:	09 f4       	brne	.+2      	; 0xf58 <read_encoders+0x210>
     f56:	98 cf       	rjmp	.-208    	; 0xe88 <read_encoders+0x140>
      break;
  }

//Update for encoder2 (corse/ every locking position)
//This updates MINUTES
switch (encoder2_present) {
     f58:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <encoder2_present>
     f5c:	81 30       	cpi	r24, 0x01	; 1
     f5e:	09 f0       	breq	.+2      	; 0xf62 <read_encoders+0x21a>
     f60:	9c cf       	rjmp	.-200    	; 0xe9a <read_encoders+0x152>
  case 1://current state is 01
    if (encoder2_past == 0) {//past state 00
     f62:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <encoder2_past>
     f66:	88 23       	and	r24, r24
     f68:	29 f2       	breq	.-118    	; 0xef4 <read_encoders+0x1ac>
      encoder2_past = encoder2_present;
    }else if (encoder2_past == 3 ) {//curent state 11
     f6a:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <encoder2_past>
     f6e:	83 30       	cpi	r24, 0x03	; 3
     f70:	09 f2       	breq	.-126    	; 0xef4 <read_encoders+0x1ac>
     f72:	08 95       	ret
      }else if (encoder1_past == 1) {//past value 01
        encoder1_past = encoder1_present;
      }
      break;
    default://nothing has changed
      hrs_mil +=0;//add nothing
     f74:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <hrs_mil>
     f78:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <hrs_mil>
      hrs_std +=0;//add nothing
     f7c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <hrs_std>
     f80:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <hrs_std>
      break;
     f84:	85 cf       	rjmp	.-246    	; 0xe90 <read_encoders+0x148>
    }else if (encoder2_past == 1) {//past state 01
      encoder2_past = encoder2_present;
    }
    break;
  default://nothing has changed
    min_count +=0;//add nothing
     f86:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <min_count>
     f8a:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <min_count>
     f8e:	08 95       	ret
      }
      encoder2_past = encoder2_present;
    }
    break;
  case 2://current state 10
    if (encoder2_past == 3) {//past state 11
     f90:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <encoder2_past>
     f94:	83 30       	cpi	r24, 0x03	; 3
     f96:	09 f4       	brne	.+2      	; 0xf9a <read_encoders+0x252>
     f98:	ad cf       	rjmp	.-166    	; 0xef4 <read_encoders+0x1ac>
      encoder2_past = encoder2_present;
    }else if (encoder2_past == 0) {//past state 00
     f9a:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <encoder2_past>
     f9e:	81 11       	cpse	r24, r1
     fa0:	e8 cf       	rjmp	.-48     	; 0xf72 <read_encoders+0x22a>
     fa2:	a8 cf       	rjmp	.-176    	; 0xef4 <read_encoders+0x1ac>
      encoder2_past = encoder2_present;
    }
    break;
  case 0://curent state 00
    if (encoder2_past == 2) {//past state 10
     fa4:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <encoder2_past>
     fa8:	82 30       	cpi	r24, 0x02	; 2
     faa:	09 f4       	brne	.+2      	; 0xfae <read_encoders+0x266>
     fac:	a3 cf       	rjmp	.-186    	; 0xef4 <read_encoders+0x1ac>
      encoder2_past = encoder2_present;
    }else if (encoder2_past == 1) {//past state 01
     fae:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <encoder2_past>
     fb2:	81 30       	cpi	r24, 0x01	; 1
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <read_encoders+0x270>
     fb6:	9e cf       	rjmp	.-196    	; 0xef4 <read_encoders+0x1ac>
     fb8:	08 95       	ret
        encoder1_past = encoder1_present;//set current state as past state
      }
      break;
    case 3://encoder value is 11
      if (encoder1_past == 1) {//past state 01
        if ( ((mode&1)==1) && (((mode>>1)&1)==0) ) {//Clock time
     fba:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     fbe:	80 fd       	sbrc	r24, 0
     fc0:	66 c0       	rjmp	.+204    	; 0x108e <read_encoders+0x346>
            hrs_mil = 0;//reset military time hours
          }
          if (hrs_std == 13) {
            hrs_std = 1;//reset standard time hours
          }
        }else if (((mode&1)==0) && (((mode>>1)&1)==1) ) {//Alarm time
     fc2:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     fc6:	80 fd       	sbrc	r24, 0
     fc8:	a6 c0       	rjmp	.+332    	; 0x1116 <__stack+0x17>
     fca:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
     fce:	81 ff       	sbrs	r24, 1
     fd0:	a2 c0       	rjmp	.+324    	; 0x1116 <__stack+0x17>
          a_hrs_mil += inc_dec2;//incremetn hours military
     fd2:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <inc_dec2>
     fd6:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <a_hrs_mil>
     fda:	89 0f       	add	r24, r25
     fdc:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <a_hrs_mil>
          a_hrs_std += inc_dec2;//increment hours standard
     fe0:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <inc_dec2>
     fe4:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <a_hrs_std>
     fe8:	89 0f       	add	r24, r25
     fea:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <a_hrs_std>
          if (a_hrs_mil == 24) {
     fee:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <a_hrs_mil>
     ff2:	88 31       	cpi	r24, 0x18	; 24
     ff4:	11 f4       	brne	.+4      	; 0xffa <read_encoders+0x2b2>
            a_hrs_mil = 0;//reset military time hours
     ff6:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <a_hrs_mil>
          }
          if (a_hrs_std == 13) {
     ffa:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <a_hrs_std>
     ffe:	8d 30       	cpi	r24, 0x0D	; 13
    1000:	09 f0       	breq	.+2      	; 0x1004 <read_encoders+0x2bc>
    1002:	42 cf       	rjmp	.-380    	; 0xe88 <read_encoders+0x140>
            a_hrs_std = 1;//reset standard time hours
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <a_hrs_std>
    100a:	3e cf       	rjmp	.-388    	; 0xe88 <read_encoders+0x140>
      encoder2_past = encoder2_present;
    }
    break;
  case 3://curent state 11
    if (encoder2_past == 1) {//past state 01(increse)
      if (((mode&1)==1) && (((mode>>1)&1)==0)) {//clock time +
    100c:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
    1010:	80 fd       	sbrc	r24, 0
    1012:	2a c0       	rjmp	.+84     	; 0x1068 <read_encoders+0x320>
        min_count += inc_dec1;//increment minutes
        if (min_count == 60) {
          min_count = 0;//reset mins if over 59
        }
      }else if (((mode&1)==0) && (((mode>>1)&1)==1)) {//Alarm time +
    1014:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
    1018:	80 fd       	sbrc	r24, 0
    101a:	59 c0       	rjmp	.+178    	; 0x10ce <read_encoders+0x386>
    101c:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
    1020:	81 ff       	sbrs	r24, 1
    1022:	55 c0       	rjmp	.+170    	; 0x10ce <read_encoders+0x386>
        a_min_count += inc_dec1;//increment minutes
    1024:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <inc_dec1>
    1028:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <a_min_count>
    102c:	89 0f       	add	r24, r25
    102e:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <a_min_count>
        if (a_min_count == 60) {
    1032:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <a_min_count>
    1036:	8c 33       	cpi	r24, 0x3C	; 60
    1038:	09 f0       	breq	.+2      	; 0x103c <read_encoders+0x2f4>
    103a:	5c cf       	rjmp	.-328    	; 0xef4 <read_encoders+0x1ac>
          a_min_count = 0;//reset mins if over 59
    103c:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <a_min_count>
    1040:	59 cf       	rjmp	.-334    	; 0xef4 <read_encoders+0x1ac>
      }else if(((mode&1)==0)&& (((mode>>BIT1)&1)==0)){//volume control +
        OCR3A+=6;//increase volume
      }
      encoder2_past = encoder2_present;
    }else if (encoder2_past == 2 ) {//past state 10(decrese)
      if (((mode&1)==1) && (((mode>>1)&1)==0)) {//clock time
    1042:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
    1046:	81 fd       	sbrc	r24, 1
    1048:	3f cf       	rjmp	.-386    	; 0xec8 <read_encoders+0x180>
        min_count -= inc_dec1;//decrement minutes
    104a:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <inc_dec1>
    104e:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <min_count>
    1052:	89 1b       	sub	r24, r25
    1054:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <min_count>
        if (min_count < 0) {
    1058:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <min_count>
    105c:	87 ff       	sbrs	r24, 7
    105e:	4a cf       	rjmp	.-364    	; 0xef4 <read_encoders+0x1ac>
          min_count = 59;//Zero to 59 mins
    1060:	8b e3       	ldi	r24, 0x3B	; 59
    1062:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <min_count>
    1066:	46 cf       	rjmp	.-372    	; 0xef4 <read_encoders+0x1ac>
      encoder2_past = encoder2_present;
    }
    break;
  case 3://curent state 11
    if (encoder2_past == 1) {//past state 01(increse)
      if (((mode&1)==1) && (((mode>>1)&1)==0)) {//clock time +
    1068:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
    106c:	81 fd       	sbrc	r24, 1
    106e:	d2 cf       	rjmp	.-92     	; 0x1014 <read_encoders+0x2cc>
        min_count += inc_dec1;//increment minutes
    1070:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <inc_dec1>
    1074:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <min_count>
    1078:	89 0f       	add	r24, r25
    107a:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <min_count>
        if (min_count == 60) {
    107e:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <min_count>
    1082:	8c 33       	cpi	r24, 0x3C	; 60
    1084:	09 f0       	breq	.+2      	; 0x1088 <read_encoders+0x340>
    1086:	36 cf       	rjmp	.-404    	; 0xef4 <read_encoders+0x1ac>
          min_count = 0;//reset mins if over 59
    1088:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <min_count>
    108c:	33 cf       	rjmp	.-410    	; 0xef4 <read_encoders+0x1ac>
        encoder1_past = encoder1_present;//set current state as past state
      }
      break;
    case 3://encoder value is 11
      if (encoder1_past == 1) {//past state 01
        if ( ((mode&1)==1) && (((mode>>1)&1)==0) ) {//Clock time
    108e:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
    1092:	81 fd       	sbrc	r24, 1
    1094:	96 cf       	rjmp	.-212    	; 0xfc2 <read_encoders+0x27a>
          hrs_mil += inc_dec2;//incremetn hours military
    1096:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <inc_dec2>
    109a:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <hrs_mil>
    109e:	89 0f       	add	r24, r25
    10a0:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <hrs_mil>
          hrs_std += inc_dec2;//increment hours standard
    10a4:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <inc_dec2>
    10a8:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <hrs_std>
    10ac:	89 0f       	add	r24, r25
    10ae:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <hrs_std>
          if (hrs_mil == 24) {
    10b2:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <hrs_mil>
    10b6:	88 31       	cpi	r24, 0x18	; 24
    10b8:	09 f4       	brne	.+2      	; 0x10bc <read_encoders+0x374>
    10ba:	a4 c0       	rjmp	.+328    	; 0x1204 <__stack+0x105>
            hrs_mil = 0;//reset military time hours
          }
          if (hrs_std == 13) {
    10bc:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <hrs_std>
    10c0:	8d 30       	cpi	r24, 0x0D	; 13
    10c2:	09 f0       	breq	.+2      	; 0x10c6 <read_encoders+0x37e>
    10c4:	e1 ce       	rjmp	.-574    	; 0xe88 <read_encoders+0x140>
            hrs_std = 1;//reset standard time hours
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <hrs_std>
    10cc:	dd ce       	rjmp	.-582    	; 0xe88 <read_encoders+0x140>
      }else if (((mode&1)==0) && (((mode>>1)&1)==1)) {//Alarm time +
        a_min_count += inc_dec1;//increment minutes
        if (a_min_count == 60) {
          a_min_count = 0;//reset mins if over 59
        }
      }else if(((mode&1)==0)&& (((mode>>BIT1)&1)==0)){//volume control +
    10ce:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
    10d2:	80 fd       	sbrc	r24, 0
    10d4:	0f cf       	rjmp	.-482    	; 0xef4 <read_encoders+0x1ac>
    10d6:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
    10da:	81 fd       	sbrc	r24, 1
    10dc:	0b cf       	rjmp	.-490    	; 0xef4 <read_encoders+0x1ac>
        OCR3A+=6;//increase volume
    10de:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    10e2:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    10e6:	06 96       	adiw	r24, 0x06	; 6
    10e8:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    10ec:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    10f0:	01 cf       	rjmp	.-510    	; 0xef4 <read_encoders+0x1ac>
      }else if (((mode&1)==0) && (((mode>>1)&1)==1)) {// Alarm time -
        a_min_count -= inc_dec1;//decrement minutes
        if (a_min_count < 0) {
          a_min_count = 59;//Zero to 59 mins
        }
      }else if(((mode&1)==0)&& (((mode>>BIT1)&1)==0)){//volume control -
    10f2:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
    10f6:	80 fd       	sbrc	r24, 0
    10f8:	fd ce       	rjmp	.-518    	; 0xef4 <read_encoders+0x1ac>
    10fa:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
    10fe:	81 fd       	sbrc	r24, 1
    1100:	f9 ce       	rjmp	.-526    	; 0xef4 <read_encoders+0x1ac>
        OCR3A-=6;//decrease volume
    1102:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    1106:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    110a:	06 97       	sbiw	r24, 0x06	; 6
    110c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    1110:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    1114:	ef ce       	rjmp	.-546    	; 0xef4 <read_encoders+0x1ac>
          }
          if (a_hrs_std == 13) {
            a_hrs_std = 1;//reset standard time hours
          }
        }
        else if (((mode&1)==0)&& ((mode>>BIT1)&1)==0 && ((mode>>BIT6)==1)) {//Frequency +
    1116:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
    111a:	80 fd       	sbrc	r24, 0
    111c:	b5 ce       	rjmp	.-662    	; 0xe88 <read_encoders+0x140>
    111e:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
    1122:	81 fd       	sbrc	r24, 1
    1124:	b1 ce       	rjmp	.-670    	; 0xe88 <read_encoders+0x140>
    1126:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
    112a:	82 95       	swap	r24
    112c:	86 95       	lsr	r24
    112e:	86 95       	lsr	r24
    1130:	83 70       	andi	r24, 0x03	; 3
    1132:	81 30       	cpi	r24, 0x01	; 1
    1134:	09 f0       	breq	.+2      	; 0x1138 <__stack+0x39>
    1136:	a8 ce       	rjmp	.-688    	; 0xe88 <read_encoders+0x140>
          if (current_fm_freq==top_fm_freq) {
    1138:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <current_fm_freq>
    113c:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <current_fm_freq+0x1>
    1140:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <top_fm_freq>
    1144:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <top_fm_freq+0x1>
    1148:	42 17       	cp	r20, r18
    114a:	53 07       	cpc	r21, r19
    114c:	09 f4       	brne	.+2      	; 0x1150 <__stack+0x51>
    114e:	9c ce       	rjmp	.-712    	; 0xe88 <read_encoders+0x140>
            //don't incrase anymore
            //this is the limit
          }else{
            current_fm_freq+=20;
    1150:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <current_fm_freq>
    1154:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <current_fm_freq+0x1>
    1158:	2c 5e       	subi	r18, 0xEC	; 236
    115a:	3f 4f       	sbci	r19, 0xFF	; 255
    115c:	30 93 0a 01 	sts	0x010A, r19	; 0x80010a <current_fm_freq+0x1>
    1160:	20 93 09 01 	sts	0x0109, r18	; 0x800109 <current_fm_freq>
            station_change_flag=1;
    1164:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <station_change_flag>
    1168:	8f ce       	rjmp	.-738    	; 0xe88 <read_encoders+0x140>
            hrs_mil = 23;//reset military time hours
          }
          if (hrs_std <1) {
            hrs_std = 12;//reset standard time hours
          }
        }else if (((mode&1)==0) && (((mode>>1)&1)==1)) {//Alarm time
    116a:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
    116e:	80 fd       	sbrc	r24, 0
    1170:	1f c0       	rjmp	.+62     	; 0x11b0 <__stack+0xb1>
    1172:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
    1176:	81 ff       	sbrs	r24, 1
    1178:	1b c0       	rjmp	.+54     	; 0x11b0 <__stack+0xb1>
          a_hrs_mil -= inc_dec2;//decrement hours military
    117a:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <inc_dec2>
    117e:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <a_hrs_mil>
    1182:	89 1b       	sub	r24, r25
    1184:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <a_hrs_mil>
          a_hrs_std -= inc_dec2;//decrement hours standard
    1188:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <inc_dec2>
    118c:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <a_hrs_std>
    1190:	89 1b       	sub	r24, r25
    1192:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <a_hrs_std>
          if (a_hrs_mil < 0) {
    1196:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <a_hrs_mil>
    119a:	87 fd       	sbrc	r24, 7
    119c:	36 c0       	rjmp	.+108    	; 0x120a <__stack+0x10b>
            a_hrs_mil = 23;//reset military time hours
          }
          if (a_hrs_std <1) {
    119e:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <a_hrs_std>
    11a2:	18 16       	cp	r1, r24
    11a4:	0c f4       	brge	.+2      	; 0x11a8 <__stack+0xa9>
    11a6:	70 ce       	rjmp	.-800    	; 0xe88 <read_encoders+0x140>
            a_hrs_std = 12;//reset standard time hours
    11a8:	8c e0       	ldi	r24, 0x0C	; 12
    11aa:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <a_hrs_std>
    11ae:	6c ce       	rjmp	.-808    	; 0xe88 <read_encoders+0x140>
          }
        }else if (((mode&1)==0)&& ((mode>>BIT1)&1)==0 && ((mode>>BIT6)==1)) {//frequency -
    11b0:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
    11b4:	80 fd       	sbrc	r24, 0
    11b6:	68 ce       	rjmp	.-816    	; 0xe88 <read_encoders+0x140>
    11b8:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
    11bc:	81 fd       	sbrc	r24, 1
    11be:	64 ce       	rjmp	.-824    	; 0xe88 <read_encoders+0x140>
    11c0:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
    11c4:	82 95       	swap	r24
    11c6:	86 95       	lsr	r24
    11c8:	86 95       	lsr	r24
    11ca:	83 70       	andi	r24, 0x03	; 3
    11cc:	81 30       	cpi	r24, 0x01	; 1
    11ce:	09 f0       	breq	.+2      	; 0x11d2 <__stack+0xd3>
    11d0:	5b ce       	rjmp	.-842    	; 0xe88 <read_encoders+0x140>
          if (current_fm_freq == bottom_fm_freq) {
    11d2:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <current_fm_freq>
    11d6:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <current_fm_freq+0x1>
    11da:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <bottom_fm_freq>
    11de:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <bottom_fm_freq+0x1>
    11e2:	42 17       	cp	r20, r18
    11e4:	53 07       	cpc	r21, r19
    11e6:	09 f4       	brne	.+2      	; 0x11ea <__stack+0xeb>
    11e8:	4f ce       	rjmp	.-866    	; 0xe88 <read_encoders+0x140>
            //don't decrease anymore
            //this is the limit
          }else{
            current_fm_freq -=20;
    11ea:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <current_fm_freq>
    11ee:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <current_fm_freq+0x1>
    11f2:	24 51       	subi	r18, 0x14	; 20
    11f4:	31 09       	sbc	r19, r1
    11f6:	30 93 0a 01 	sts	0x010A, r19	; 0x80010a <current_fm_freq+0x1>
    11fa:	20 93 09 01 	sts	0x0109, r18	; 0x800109 <current_fm_freq>
            station_change_flag = 1;//set flag
    11fe:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <station_change_flag>
    1202:	42 ce       	rjmp	.-892    	; 0xe88 <read_encoders+0x140>
      if (encoder1_past == 1) {//past state 01
        if ( ((mode&1)==1) && (((mode>>1)&1)==0) ) {//Clock time
          hrs_mil += inc_dec2;//incremetn hours military
          hrs_std += inc_dec2;//increment hours standard
          if (hrs_mil == 24) {
            hrs_mil = 0;//reset military time hours
    1204:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <hrs_mil>
    1208:	59 cf       	rjmp	.-334    	; 0x10bc <read_encoders+0x374>
          }
        }else if (((mode&1)==0) && (((mode>>1)&1)==1)) {//Alarm time
          a_hrs_mil -= inc_dec2;//decrement hours military
          a_hrs_std -= inc_dec2;//decrement hours standard
          if (a_hrs_mil < 0) {
            a_hrs_mil = 23;//reset military time hours
    120a:	87 e1       	ldi	r24, 0x17	; 23
    120c:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <a_hrs_mil>
    1210:	c6 cf       	rjmp	.-116    	; 0x119e <__stack+0x9f>
      }else if (encoder1_past == 2 ) {//past state 10
        if (((mode&1)==1) && (((mode>>1)&1)==0) ) {//clock time
          hrs_mil -= inc_dec2;//decrement hours military
          hrs_std -= inc_dec2;//decrement hours standard
          if (hrs_mil < 0) {
            hrs_mil = 23;//reset military time hours
    1212:	87 e1       	ldi	r24, 0x17	; 23
    1214:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <hrs_mil>
    1218:	30 ce       	rjmp	.-928    	; 0xe7a <read_encoders+0x132>

0000121a <__vector_10>:


//***********************************************************************
//                     ISR for timer counter TWO
//***********************************************************************
ISR(TIMER2_OVF_vect){
    121a:	1f 92       	push	r1
    121c:	0f 92       	push	r0
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	0f 92       	push	r0
    1222:	11 24       	eor	r1, r1
    1224:	0b b6       	in	r0, 0x3b	; 59
    1226:	0f 92       	push	r0
    1228:	2f 93       	push	r18
    122a:	3f 93       	push	r19
    122c:	4f 93       	push	r20
    122e:	5f 93       	push	r21
    1230:	6f 93       	push	r22
    1232:	7f 93       	push	r23
    1234:	8f 93       	push	r24
    1236:	9f 93       	push	r25
    1238:	af 93       	push	r26
    123a:	bf 93       	push	r27
    123c:	ef 93       	push	r30
    123e:	ff 93       	push	r31
  //Store PORT values to be able to restore
  PORTA_previous =PINA;//save PORTA values
    1240:	89 b3       	in	r24, 0x19	; 25
    1242:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <PORTA_previous>
  PORTC_previous = PINC;//save PORTC values
    1246:	83 b3       	in	r24, 0x13	; 19
    1248:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <PORTC_previous>

  update_mode();//update Bar graph
    124c:	0e 94 0f 06 	call	0xc1e	; 0xc1e <update_mode>
  mil_std = (mode>>2) & 0x01;//Set to military or standard
    1250:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
    1254:	82 fb       	bst	r24, 2
    1256:	88 27       	eor	r24, r24
    1258:	80 f9       	bld	r24, 0
    125a:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <mil_std>
  read_encoders();//read encoders
    125e:	0e 94 a4 06 	call	0xd48	; 0xd48 <read_encoders>

  //restore PORT A and C values
  DDRA = 0xFF;//outside of ISR, always output
    1262:	8f ef       	ldi	r24, 0xFF	; 255
    1264:	8a bb       	out	0x1a, r24	; 26
  PORTA = PORTA_previous;//restore PORTA
    1266:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <PORTA_previous>
    126a:	8b bb       	out	0x1b, r24	; 27
  PORTC = PORTC_previous;//restore PORTC
    126c:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <PORTC_previous>
    1270:	85 bb       	out	0x15, r24	; 21

}
    1272:	ff 91       	pop	r31
    1274:	ef 91       	pop	r30
    1276:	bf 91       	pop	r27
    1278:	af 91       	pop	r26
    127a:	9f 91       	pop	r25
    127c:	8f 91       	pop	r24
    127e:	7f 91       	pop	r23
    1280:	6f 91       	pop	r22
    1282:	5f 91       	pop	r21
    1284:	4f 91       	pop	r20
    1286:	3f 91       	pop	r19
    1288:	2f 91       	pop	r18
    128a:	0f 90       	pop	r0
    128c:	0b be       	out	0x3b, r0	; 59
    128e:	0f 90       	pop	r0
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	0f 90       	pop	r0
    1294:	1f 90       	pop	r1
    1296:	18 95       	reti

00001298 <spi_init>:
//***********************************************************************
//                            spi_init
//**********************************************************************
void spi_init(void){
  //PORTB ouput: ss(pb0), MOSI(pb2), sclk(pb1)
  DDRB  |= (1<<BIT0)|(1<<BIT1)|(1<<BIT2);
    1298:	87 b3       	in	r24, 0x17	; 23
    129a:	87 60       	ori	r24, 0x07	; 7
    129c:	87 bb       	out	0x17, r24	; 23
  SPCR   = (1<<SPE) | (1<<MSTR) ; //master mode, clk low on idle, leading edge sample
    129e:	80 e5       	ldi	r24, 0x50	; 80
    12a0:	8d b9       	out	0x0d, r24	; 13
  SPSR   = (1<<SPI2X); //choose double speed operation
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	8e b9       	out	0x0e, r24	; 14
    12a6:	08 95       	ret

000012a8 <display_mode>:
  SPI protocol
Parameters: NONE
Return:void
***************************************************************/
void display_mode(){
  SPDR = rssi;//write value to register
    12a8:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <rssi>
    12ac:	8f b9       	out	0x0f, r24	; 15
  while(bit_is_clear(SPSR,SPIF)){}//wait until data is sent
    12ae:	77 9b       	sbis	0x0e, 7	; 14
    12b0:	fe cf       	rjmp	.-4      	; 0x12ae <display_mode+0x6>
  PORTB ^=(1<<BIT0);//send rising edge to regclk on HC595
    12b2:	98 b3       	in	r25, 0x18	; 24
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	98 27       	eor	r25, r24
    12b8:	98 bb       	out	0x18, r25	; 24
  PORTB ^=(1<<BIT0);//send falling edge to reglck on HC595
    12ba:	98 b3       	in	r25, 0x18	; 24
    12bc:	89 27       	eor	r24, r25
    12be:	88 bb       	out	0x18, r24	; 24
    12c0:	08 95       	ret

000012c2 <lcd_ports>:
  display to work correctly
Parameters: NONE
Return:void
***************************************************************/
void lcd_ports(){
  DDRF  |= 0x08;  //port F bit 3 is enable for LCD
    12c2:	e1 e6       	ldi	r30, 0x61	; 97
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	88 60       	ori	r24, 0x08	; 8
    12ca:	80 83       	st	Z, r24
  PORTF &= 0xF7;  //port F bit 3 is initially low
    12cc:	e2 e6       	ldi	r30, 0x62	; 98
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	87 7f       	andi	r24, 0xF7	; 247
    12d4:	80 83       	st	Z, r24
    12d6:	08 95       	ret

000012d8 <__vector_29>:
}

// //***********************************************************************
// //                     ISR for timer counter three
// //***********************************************************************
ISR(TIMER3_OVF_vect){
    12d8:	1f 92       	push	r1
    12da:	0f 92       	push	r0
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	0f 92       	push	r0
    12e0:	11 24       	eor	r1, r1
    12e2:	0b b6       	in	r0, 0x3b	; 59
    12e4:	0f 92       	push	r0
    12e6:	2f 93       	push	r18
    12e8:	3f 93       	push	r19
    12ea:	4f 93       	push	r20
    12ec:	5f 93       	push	r21
    12ee:	6f 93       	push	r22
    12f0:	7f 93       	push	r23
    12f2:	8f 93       	push	r24
    12f4:	9f 93       	push	r25
    12f6:	af 93       	push	r26
    12f8:	bf 93       	push	r27
    12fa:	ef 93       	push	r30
    12fc:	ff 93       	push	r31
  static uint8_t count_isr3 = 0;
  count_isr3++;
    12fe:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <count_isr3.2316>
    1302:	8f 5f       	subi	r24, 0xFF	; 255
    1304:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <count_isr3.2316>

  if ((count_isr3%60)==0) {
    1308:	99 e8       	ldi	r25, 0x89	; 137
    130a:	89 9f       	mul	r24, r25
    130c:	91 2d       	mov	r25, r1
    130e:	11 24       	eor	r1, r1
    1310:	92 95       	swap	r25
    1312:	96 95       	lsr	r25
    1314:	97 70       	andi	r25, 0x07	; 7
    1316:	2c e3       	ldi	r18, 0x3C	; 60
    1318:	92 9f       	mul	r25, r18
    131a:	80 19       	sub	r24, r0
    131c:	11 24       	eor	r1, r1
    131e:	81 11       	cpse	r24, r1
    1320:	41 c0       	rjmp	.+130    	; 0x13a4 <__vector_29+0xcc>
Parameters: NONE
Return:
  * 16 bit unsigned  adc result
***************************************************************/
uint16_t adc_read(){
  ADCSRA |= (1<<ADSC);//Start ADC
    1322:	36 9a       	sbi	0x06, 6	; 6
  while (bit_is_clear(ADCSRA,ADIF)){}//wait for ADC to finish
    1324:	34 9b       	sbis	0x06, 4	; 6
    1326:	fe cf       	rjmp	.-4      	; 0x1324 <__vector_29+0x4c>
  ADCSRA |= (1<<ADIF);//clear flag by writing one
    1328:	34 9a       	sbi	0x06, 4	; 6
  return ADC;
    132a:	84 b1       	in	r24, 0x04	; 4
    132c:	95 b1       	in	r25, 0x05	; 5
ISR(TIMER3_OVF_vect){
  static uint8_t count_isr3 = 0;
  count_isr3++;

  if ((count_isr3%60)==0) {
    adc_result = adc_read();//read adc
    132e:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <adc_result+0x1>
    1332:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <adc_result>
    ocr2_value = 0.457*adc_result-100;//calculate new ocr2
    1336:	60 91 94 02 	lds	r22, 0x0294	; 0x800294 <adc_result>
    133a:	70 91 95 02 	lds	r23, 0x0295	; 0x800295 <adc_result+0x1>
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__floatunsisf>
    1346:	27 ee       	ldi	r18, 0xE7	; 231
    1348:	3b ef       	ldi	r19, 0xFB	; 251
    134a:	49 ee       	ldi	r20, 0xE9	; 233
    134c:	5e e3       	ldi	r21, 0x3E	; 62
    134e:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__mulsf3>
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	48 ec       	ldi	r20, 0xC8	; 200
    1358:	52 e4       	ldi	r21, 0x42	; 66
    135a:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__subsf3>
    135e:	0e 94 6d 16 	call	0x2cda	; 0x2cda <__fixsfsi>
    1362:	70 93 4d 02 	sts	0x024D, r23	; 0x80024d <ocr2_value+0x1>
    1366:	60 93 4c 02 	sts	0x024C, r22	; 0x80024c <ocr2_value>
    //bound ocr2_value to 0-255
    if (ocr2_value<10) {
    136a:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <ocr2_value>
    136e:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <ocr2_value+0x1>
    1372:	0a 97       	sbiw	r24, 0x0a	; 10
    1374:	54 f5       	brge	.+84     	; 0x13ca <__vector_29+0xf2>
      ocr2_value = 10;
    1376:	8a e0       	ldi	r24, 0x0A	; 10
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <ocr2_value+0x1>
    137e:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <ocr2_value>
    }else if (ocr2_value>255) {
      ocr2_value = 255;//
    }
    if (ocr2_value<=25) {ocr2_value=25;}else
    1382:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <ocr2_value>
    1386:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <ocr2_value+0x1>
    138a:	4a 97       	sbiw	r24, 0x1a	; 26
    138c:	94 f5       	brge	.+100    	; 0x13f2 <__vector_29+0x11a>
    138e:	89 e1       	ldi	r24, 0x19	; 25
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <ocr2_value+0x1>
    1396:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <ocr2_value>
    if(ocr2_value<=150){ocr2_value=150;}else
    if(ocr2_value<=175){ocr2_value=175;}else
    if(ocr2_value<=200){ocr2_value=200;}else
    if(ocr2_value<=225){ocr2_value=225;}else
    if(ocr2_value<=250){ocr2_value=250;}
    OCR2 = ocr2_value;//set new OCR2
    139a:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <ocr2_value>
    139e:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <ocr2_value+0x1>
    13a2:	83 bd       	out	0x23, r24	; 35
  }
}
    13a4:	ff 91       	pop	r31
    13a6:	ef 91       	pop	r30
    13a8:	bf 91       	pop	r27
    13aa:	af 91       	pop	r26
    13ac:	9f 91       	pop	r25
    13ae:	8f 91       	pop	r24
    13b0:	7f 91       	pop	r23
    13b2:	6f 91       	pop	r22
    13b4:	5f 91       	pop	r21
    13b6:	4f 91       	pop	r20
    13b8:	3f 91       	pop	r19
    13ba:	2f 91       	pop	r18
    13bc:	0f 90       	pop	r0
    13be:	0b be       	out	0x3b, r0	; 59
    13c0:	0f 90       	pop	r0
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	0f 90       	pop	r0
    13c6:	1f 90       	pop	r1
    13c8:	18 95       	reti
    adc_result = adc_read();//read adc
    ocr2_value = 0.457*adc_result-100;//calculate new ocr2
    //bound ocr2_value to 0-255
    if (ocr2_value<10) {
      ocr2_value = 10;
    }else if (ocr2_value>255) {
    13ca:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <ocr2_value>
    13ce:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <ocr2_value+0x1>
    13d2:	8f 3f       	cpi	r24, 0xFF	; 255
    13d4:	91 05       	cpc	r25, r1
    13d6:	a9 f2       	breq	.-86     	; 0x1382 <__vector_29+0xaa>
    13d8:	a4 f2       	brlt	.-88     	; 0x1382 <__vector_29+0xaa>
      ocr2_value = 255;//
    13da:	8f ef       	ldi	r24, 0xFF	; 255
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <ocr2_value+0x1>
    13e2:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <ocr2_value>
    }
    if (ocr2_value<=25) {ocr2_value=25;}else
    13e6:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <ocr2_value>
    13ea:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <ocr2_value+0x1>
    13ee:	4a 97       	sbiw	r24, 0x1a	; 26
    13f0:	74 f2       	brlt	.-100    	; 0x138e <__vector_29+0xb6>
    if(ocr2_value<=50){ocr2_value=50;}else
    13f2:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <ocr2_value>
    13f6:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <ocr2_value+0x1>
    13fa:	c3 97       	sbiw	r24, 0x33	; 51
    13fc:	74 f0       	brlt	.+28     	; 0x141a <__vector_29+0x142>
    if(ocr2_value<=75){ocr2_value=75;}else
    13fe:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <ocr2_value>
    1402:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <ocr2_value+0x1>
    1406:	8c 34       	cpi	r24, 0x4C	; 76
    1408:	91 05       	cpc	r25, r1
    140a:	74 f4       	brge	.+28     	; 0x1428 <__vector_29+0x150>
    140c:	8b e4       	ldi	r24, 0x4B	; 75
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <ocr2_value+0x1>
    1414:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <ocr2_value>
    1418:	c0 cf       	rjmp	.-128    	; 0x139a <__vector_29+0xc2>
      ocr2_value = 10;
    }else if (ocr2_value>255) {
      ocr2_value = 255;//
    }
    if (ocr2_value<=25) {ocr2_value=25;}else
    if(ocr2_value<=50){ocr2_value=50;}else
    141a:	82 e3       	ldi	r24, 0x32	; 50
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <ocr2_value+0x1>
    1422:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <ocr2_value>
    1426:	b9 cf       	rjmp	.-142    	; 0x139a <__vector_29+0xc2>
    if(ocr2_value<=75){ocr2_value=75;}else
    if(ocr2_value<=100){ocr2_value=100;}else
    1428:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <ocr2_value>
    142c:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <ocr2_value+0x1>
    1430:	85 36       	cpi	r24, 0x65	; 101
    1432:	91 05       	cpc	r25, r1
    1434:	74 f0       	brlt	.+28     	; 0x1452 <__vector_29+0x17a>
    if(ocr2_value<=125){ocr2_value=125;}else
    1436:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <ocr2_value>
    143a:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <ocr2_value+0x1>
    143e:	8e 37       	cpi	r24, 0x7E	; 126
    1440:	91 05       	cpc	r25, r1
    1442:	74 f4       	brge	.+28     	; 0x1460 <__vector_29+0x188>
    1444:	8d e7       	ldi	r24, 0x7D	; 125
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <ocr2_value+0x1>
    144c:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <ocr2_value>
    1450:	a4 cf       	rjmp	.-184    	; 0x139a <__vector_29+0xc2>
      ocr2_value = 255;//
    }
    if (ocr2_value<=25) {ocr2_value=25;}else
    if(ocr2_value<=50){ocr2_value=50;}else
    if(ocr2_value<=75){ocr2_value=75;}else
    if(ocr2_value<=100){ocr2_value=100;}else
    1452:	84 e6       	ldi	r24, 0x64	; 100
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <ocr2_value+0x1>
    145a:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <ocr2_value>
    145e:	9d cf       	rjmp	.-198    	; 0x139a <__vector_29+0xc2>
    if(ocr2_value<=125){ocr2_value=125;}else
    if(ocr2_value<=150){ocr2_value=150;}else
    1460:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <ocr2_value>
    1464:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <ocr2_value+0x1>
    1468:	87 39       	cpi	r24, 0x97	; 151
    146a:	91 05       	cpc	r25, r1
    146c:	3c f4       	brge	.+14     	; 0x147c <__vector_29+0x1a4>
    146e:	86 e9       	ldi	r24, 0x96	; 150
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <ocr2_value+0x1>
    1476:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <ocr2_value>
    147a:	8f cf       	rjmp	.-226    	; 0x139a <__vector_29+0xc2>
    if(ocr2_value<=175){ocr2_value=175;}else
    147c:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <ocr2_value>
    1480:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <ocr2_value+0x1>
    1484:	80 3b       	cpi	r24, 0xB0	; 176
    1486:	91 05       	cpc	r25, r1
    1488:	3c f4       	brge	.+14     	; 0x1498 <__vector_29+0x1c0>
    148a:	8f ea       	ldi	r24, 0xAF	; 175
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <ocr2_value+0x1>
    1492:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <ocr2_value>
    1496:	81 cf       	rjmp	.-254    	; 0x139a <__vector_29+0xc2>
    if(ocr2_value<=200){ocr2_value=200;}else
    1498:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <ocr2_value>
    149c:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <ocr2_value+0x1>
    14a0:	89 3c       	cpi	r24, 0xC9	; 201
    14a2:	91 05       	cpc	r25, r1
    14a4:	3c f4       	brge	.+14     	; 0x14b4 <__vector_29+0x1dc>
    14a6:	88 ec       	ldi	r24, 0xC8	; 200
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <ocr2_value+0x1>
    14ae:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <ocr2_value>
    14b2:	73 cf       	rjmp	.-282    	; 0x139a <__vector_29+0xc2>
    if(ocr2_value<=225){ocr2_value=225;}else
    14b4:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <ocr2_value>
    14b8:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <ocr2_value+0x1>
    14bc:	82 3e       	cpi	r24, 0xE2	; 226
    14be:	91 05       	cpc	r25, r1
    14c0:	3c f4       	brge	.+14     	; 0x14d0 <__vector_29+0x1f8>
    14c2:	81 ee       	ldi	r24, 0xE1	; 225
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <ocr2_value+0x1>
    14ca:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <ocr2_value>
    14ce:	65 cf       	rjmp	.-310    	; 0x139a <__vector_29+0xc2>
    if(ocr2_value<=250){ocr2_value=250;}
    14d0:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <ocr2_value>
    14d4:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <ocr2_value+0x1>
    14d8:	8b 3f       	cpi	r24, 0xFB	; 251
    14da:	91 05       	cpc	r25, r1
    14dc:	0c f0       	brlt	.+2      	; 0x14e0 <__vector_29+0x208>
    14de:	5d cf       	rjmp	.-326    	; 0x139a <__vector_29+0xc2>
    14e0:	8a ef       	ldi	r24, 0xFA	; 250
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <ocr2_value+0x1>
    14e8:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <ocr2_value>
    14ec:	56 cf       	rjmp	.-340    	; 0x139a <__vector_29+0xc2>

000014ee <alarm_radio_en>:
Parameters:NONE
Return: void
*************************************************************************/
void alarm_radio_en()
{
  if (alarm_sound == 1) {//alarm from tone EN
    14ee:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <alarm_sound>
    14f2:	81 30       	cpi	r24, 0x01	; 1
    14f4:	49 f0       	breq	.+18     	; 0x1508 <alarm_radio_en+0x1a>
        fm_pwr_up();//power up radio
        fm_tune_freq();//tune to static
      }
    }
  }else{//alarm from tone DISABLED
    if (radio_on_off==1) {//Radio is ON
    14f6:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__data_end>
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	d9 f0       	breq	.+54     	; 0x1534 <alarm_radio_en+0x46>
        ra_flag=0;//reset flag
        current_fm_freq=last_fm_freq;//restore last frequency
        fm_tune_freq();//tune to last frequency
      }
    }else{//Radio was OFF
      if (ra_flag==1) {
    14fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1502:	81 30       	cpi	r24, 0x01	; 1
    1504:	39 f1       	breq	.+78     	; 0x1554 <alarm_radio_en+0x66>
    1506:	08 95       	ret
Return: void
*************************************************************************/
void alarm_radio_en()
{
  if (alarm_sound == 1) {//alarm from tone EN
    if (radio_on_off==1) {//Radios is ON
    1508:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__data_end>
    150c:	81 30       	cpi	r24, 0x01	; 1
    150e:	31 f1       	breq	.+76     	; 0x155c <alarm_radio_en+0x6e>
        last_fm_freq = current_fm_freq;//save current freq for restore
        current_fm_freq=alarm_fm_freq;//set freq to static
        fm_tune_freq();//tune radio to new freq
      }
    }else{//radio is OFF
      if (ra_flag==1) {
    1510:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	b9 f7       	brne	.-18     	; 0x1506 <alarm_radio_en+0x18>
        ra_flag=0;//Reset flag
    1518:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
        current_fm_freq=alarm_fm_freq;//set to static
    151c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <alarm_fm_freq>
    1520:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <alarm_fm_freq+0x1>
    1524:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <current_fm_freq+0x1>
    1528:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <current_fm_freq>
        fm_pwr_up();//power up radio
    152c:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <fm_pwr_up>
        fm_tune_freq();//tune to static
    1530:	0c 94 34 12 	jmp	0x2468	; 0x2468 <fm_tune_freq>
      }
    }
  }else{//alarm from tone DISABLED
    if (radio_on_off==1) {//Radio is ON
      if (ra_flag==1) {
    1534:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1538:	81 30       	cpi	r24, 0x01	; 1
    153a:	29 f7       	brne	.-54     	; 0x1506 <alarm_radio_en+0x18>
        ra_flag=0;//reset flag
    153c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
        current_fm_freq=last_fm_freq;//restore last frequency
    1540:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <last_fm_freq>
    1544:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <last_fm_freq+0x1>
    1548:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <current_fm_freq+0x1>
    154c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <current_fm_freq>
        fm_tune_freq();//tune to last frequency
    1550:	0c 94 34 12 	jmp	0x2468	; 0x2468 <fm_tune_freq>
      }
    }else{//Radio was OFF
      if (ra_flag==1) {
        ra_flag=0;//reset flag
    1554:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
        radio_pwr_dwn();//Turn off radio
    1558:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <radio_pwr_dwn>
*************************************************************************/
void alarm_radio_en()
{
  if (alarm_sound == 1) {//alarm from tone EN
    if (radio_on_off==1) {//Radios is ON
      if (ra_flag==1) {
    155c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1560:	81 30       	cpi	r24, 0x01	; 1
    1562:	89 f6       	brne	.-94     	; 0x1506 <alarm_radio_en+0x18>
        ra_flag=0;//reset flag
    1564:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
        last_fm_freq = current_fm_freq;//save current freq for restore
    1568:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <current_fm_freq>
    156c:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <current_fm_freq+0x1>
    1570:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <last_fm_freq+0x1>
    1574:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <last_fm_freq>
        current_fm_freq=alarm_fm_freq;//set freq to static
    1578:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <alarm_fm_freq>
    157c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <alarm_fm_freq+0x1>
    1580:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <current_fm_freq+0x1>
    1584:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <current_fm_freq>
        fm_tune_freq();//tune radio to new freq
    1588:	0c 94 34 12 	jmp	0x2468	; 0x2468 <fm_tune_freq>

0000158c <send_lcd>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    158c:	91 e0       	ldi	r25, 0x01	; 1
    158e:	81 11       	cpse	r24, r1
    1590:	01 c0       	rjmp	.+2      	; 0x1594 <send_lcd+0x8>
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1596:	77 9b       	sbis	0x0e, 7	; 14
    1598:	fe cf       	rjmp	.-4      	; 0x1596 <send_lcd+0xa>
  SPDR = byte;                        //send payload
    159a:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    159c:	77 9b       	sbis	0x0e, 7	; 14
    159e:	fe cf       	rjmp	.-4      	; 0x159c <send_lcd+0x10>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    15a0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    15a4:	88 60       	ori	r24, 0x08	; 8
    15a6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    15aa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    15ae:	87 7f       	andi	r24, 0xF7	; 247
    15b0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    15b4:	8f e9       	ldi	r24, 0x9F	; 159
    15b6:	9f e0       	ldi	r25, 0x0F	; 15
    15b8:	01 97       	sbiw	r24, 0x01	; 1
    15ba:	f1 f7       	brne	.-4      	; 0x15b8 <send_lcd+0x2c>
    15bc:	00 c0       	rjmp	.+0      	; 0x15be <send_lcd+0x32>
    15be:	00 00       	nop
    15c0:	08 95       	ret

000015c2 <refresh_lcd>:

void refresh_lcd(char lcd_string_array[]) {

    static uint8_t index=0;           // index into string array

    SPDR = 0x01; //set SR for data
    15c2:	21 e0       	ldi	r18, 0x01	; 1
    15c4:	2f b9       	out	0x0f, r18	; 15
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
    15c6:	77 9b       	sbis	0x0e, 7	; 14
    15c8:	fe cf       	rjmp	.-4      	; 0x15c6 <refresh_lcd+0x4>
    SPDR = lcd_string_array[index];
    15ca:	20 91 82 02 	lds	r18, 0x0282	; 0x800282 <index.2091>
    15ce:	fc 01       	movw	r30, r24
    15d0:	e2 0f       	add	r30, r18
    15d2:	f1 1d       	adc	r31, r1
    15d4:	80 81       	ld	r24, Z
    15d6:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
    15d8:	77 9b       	sbis	0x0e, 7	; 14
    15da:	fe cf       	rjmp	.-4      	; 0x15d8 <refresh_lcd+0x16>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    15dc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    15e0:	88 60       	ori	r24, 0x08	; 8
    15e2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    15e6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    15ea:	87 7f       	andi	r24, 0xF7	; 247
    15ec:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    SPDR = 0x01; //set SR for data
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
    SPDR = lcd_string_array[index];
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
    strobe_lcd();                   //write into LCD
    index++;                        //increment to next character
    15f0:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <index.2091>
    15f4:	8f 5f       	subi	r24, 0xFF	; 255
    15f6:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <index.2091>
    if(index == 16) {_delay_us(40); home_line2();}           //on to 2nd line, 1st position
    15fa:	80 31       	cpi	r24, 0x10	; 16
    15fc:	09 f1       	breq	.+66     	; 0x1640 <refresh_lcd+0x7e>
    if(index == 32) {_delay_us(40); cursor_home(); index=0;} //back to 1st line, 1st position
    15fe:	80 32       	cpi	r24, 0x20	; 32
    1600:	09 f0       	breq	.+2      	; 0x1604 <refresh_lcd+0x42>
    1602:	08 95       	ret
    1604:	95 ed       	ldi	r25, 0xD5	; 213
    1606:	9a 95       	dec	r25
    1608:	f1 f7       	brne	.-4      	; 0x1606 <refresh_lcd+0x44>
    160a:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    160c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    160e:	77 9b       	sbis	0x0e, 7	; 14
    1610:	fe cf       	rjmp	.-4      	; 0x160e <refresh_lcd+0x4c>
  SPDR = byte;                        //send payload
    1612:	82 e0       	ldi	r24, 0x02	; 2
    1614:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1616:	77 9b       	sbis	0x0e, 7	; 14
    1618:	fe cf       	rjmp	.-4      	; 0x1616 <refresh_lcd+0x54>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    161a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    161e:	88 60       	ori	r24, 0x08	; 8
    1620:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1624:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1628:	87 7f       	andi	r24, 0xF7	; 247
    162a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    162e:	8f e9       	ldi	r24, 0x9F	; 159
    1630:	9f e0       	ldi	r25, 0x0F	; 15
    1632:	01 97       	sbiw	r24, 0x01	; 1
    1634:	f1 f7       	brne	.-4      	; 0x1632 <refresh_lcd+0x70>
    1636:	00 c0       	rjmp	.+0      	; 0x1638 <refresh_lcd+0x76>
    1638:	00 00       	nop
    SPDR = lcd_string_array[index];
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
    strobe_lcd();                   //write into LCD
    index++;                        //increment to next character
    if(index == 16) {_delay_us(40); home_line2();}           //on to 2nd line, 1st position
    if(index == 32) {_delay_us(40); cursor_home(); index=0;} //back to 1st line, 1st position
    163a:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <index.2091>
    163e:	08 95       	ret
    1640:	85 ed       	ldi	r24, 0xD5	; 213
    1642:	8a 95       	dec	r24
    1644:	f1 f7       	brne	.-4      	; 0x1642 <refresh_lcd+0x80>
    1646:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1648:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    164a:	77 9b       	sbis	0x0e, 7	; 14
    164c:	fe cf       	rjmp	.-4      	; 0x164a <refresh_lcd+0x88>
  SPDR = byte;                        //send payload
    164e:	80 ec       	ldi	r24, 0xC0	; 192
    1650:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1652:	77 9b       	sbis	0x0e, 7	; 14
    1654:	fe cf       	rjmp	.-4      	; 0x1652 <refresh_lcd+0x90>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1656:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    165a:	88 60       	ori	r24, 0x08	; 8
    165c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1660:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1664:	87 7f       	andi	r24, 0xF7	; 247
    1666:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    166a:	8f e9       	ldi	r24, 0x9F	; 159
    166c:	9f e0       	ldi	r25, 0x0F	; 15
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	f1 f7       	brne	.-4      	; 0x166e <refresh_lcd+0xac>
    1672:	00 c0       	rjmp	.+0      	; 0x1674 <refresh_lcd+0xb2>
    1674:	00 00       	nop
    1676:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <index.2091>
    167a:	c1 cf       	rjmp	.-126    	; 0x15fe <refresh_lcd+0x3c>

0000167c <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3), 1000);  //only needs 40uS!
    167c:	66 0f       	add	r22, r22
    167e:	66 0f       	add	r22, r22
    1680:	66 0f       	add	r22, r22
    1682:	60 5c       	subi	r22, 0xC0	; 192
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1684:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1686:	77 9b       	sbis	0x0e, 7	; 14
    1688:	fe cf       	rjmp	.-4      	; 0x1686 <set_custom_character+0xa>
  SPDR = byte;                        //send payload
    168a:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    168c:	77 9b       	sbis	0x0e, 7	; 14
    168e:	fe cf       	rjmp	.-4      	; 0x168c <set_custom_character+0x10>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1690:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1694:	28 60       	ori	r18, 0x08	; 8
    1696:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    169a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    169e:	27 7f       	andi	r18, 0xF7	; 247
    16a0:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    16a4:	af e9       	ldi	r26, 0x9F	; 159
    16a6:	bf e0       	ldi	r27, 0x0F	; 15
    16a8:	11 97       	sbiw	r26, 0x01	; 1
    16aa:	f1 f7       	brne	.-4      	; 0x16a8 <set_custom_character+0x2c>
    16ac:	00 c0       	rjmp	.+0      	; 0x16ae <set_custom_character+0x32>
    16ae:	00 00       	nop
    16b0:	fc 01       	movw	r30, r24
    16b2:	9c 01       	movw	r18, r24
    16b4:	28 5f       	subi	r18, 0xF8	; 248
    16b6:	3f 4f       	sbci	r19, 0xFF	; 255
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    16b8:	91 e0       	ldi	r25, 0x01	; 1
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3), 1000);  //only needs 40uS!
    for(i=0; i<8; i++){send_lcd(CHAR_BYTE, data[i], 100);}
    16ba:	81 91       	ld	r24, Z+
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    16bc:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    16be:	77 9b       	sbis	0x0e, 7	; 14
    16c0:	fe cf       	rjmp	.-4      	; 0x16be <set_custom_character+0x42>
  SPDR = byte;                        //send payload
    16c2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    16c4:	77 9b       	sbis	0x0e, 7	; 14
    16c6:	fe cf       	rjmp	.-4      	; 0x16c4 <set_custom_character+0x48>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    16c8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    16cc:	88 60       	ori	r24, 0x08	; 8
    16ce:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    16d2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    16d6:	87 7f       	andi	r24, 0xF7	; 247
    16d8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    16dc:	af e9       	ldi	r26, 0x9F	; 159
    16de:	bf e0       	ldi	r27, 0x0F	; 15
    16e0:	11 97       	sbiw	r26, 0x01	; 1
    16e2:	f1 f7       	brne	.-4      	; 0x16e0 <set_custom_character+0x64>
    16e4:	00 c0       	rjmp	.+0      	; 0x16e6 <set_custom_character+0x6a>
    16e6:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3), 1000);  //only needs 40uS!
    for(i=0; i<8; i++){send_lcd(CHAR_BYTE, data[i], 100);}
    16e8:	e2 17       	cp	r30, r18
    16ea:	f3 07       	cpc	r31, r19
    16ec:	31 f7       	brne	.-52     	; 0x16ba <set_custom_character+0x3e>
}
    16ee:	08 95       	ret

000016f0 <set_cursor>:
//                          set_cursor
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40), 1000);
    16f0:	90 e4       	ldi	r25, 0x40	; 64
    16f2:	89 9f       	mul	r24, r25
    16f4:	60 0d       	add	r22, r0
    16f6:	11 24       	eor	r1, r1
    16f8:	60 5c       	subi	r22, 0xC0	; 192
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    16fa:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    16fc:	77 9b       	sbis	0x0e, 7	; 14
    16fe:	fe cf       	rjmp	.-4      	; 0x16fc <set_cursor+0xc>
  SPDR = byte;                        //send payload
    1700:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1702:	77 9b       	sbis	0x0e, 7	; 14
    1704:	fe cf       	rjmp	.-4      	; 0x1702 <set_cursor+0x12>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1706:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    170a:	88 60       	ori	r24, 0x08	; 8
    170c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1710:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1714:	87 7f       	andi	r24, 0xF7	; 247
    1716:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    171a:	8f e9       	ldi	r24, 0x9F	; 159
    171c:	9f e0       	ldi	r25, 0x0F	; 15
    171e:	01 97       	sbiw	r24, 0x01	; 1
    1720:	f1 f7       	brne	.-4      	; 0x171e <set_cursor+0x2e>
    1722:	00 c0       	rjmp	.+0      	; 0x1724 <set_cursor+0x34>
    1724:	00 00       	nop
    1726:	08 95       	ret

00001728 <uint2lcd>:
//not displayed.
//TODO: optimize by removing the mod operators
//TODO: does not display the number zero!  (FIXED 8.30.2014)
//
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    1728:	81 11       	cpse	r24, r1
    172a:	19 c0       	rjmp	.+50     	; 0x175e <uint2lcd+0x36>
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1730:	77 9b       	sbis	0x0e, 7	; 14
    1732:	fe cf       	rjmp	.-4      	; 0x1730 <uint2lcd+0x8>
  SPDR = byte;                        //send payload
    1734:	80 e3       	ldi	r24, 0x30	; 48
    1736:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1738:	77 9b       	sbis	0x0e, 7	; 14
    173a:	fe cf       	rjmp	.-4      	; 0x1738 <uint2lcd+0x10>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    173c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1740:	88 60       	ori	r24, 0x08	; 8
    1742:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1746:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    174a:	87 7f       	andi	r24, 0xF7	; 247
    174c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1750:	8f e9       	ldi	r24, 0x9F	; 159
    1752:	9f e0       	ldi	r25, 0x0F	; 15
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	f1 f7       	brne	.-4      	; 0x1754 <uint2lcd+0x2c>
    1758:	00 c0       	rjmp	.+0      	; 0x175a <uint2lcd+0x32>
    175a:	00 00       	nop
    175c:	08 95       	ret
//TODO: does not display the number zero!  (FIXED 8.30.2014)
//
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
    175e:	84 36       	cpi	r24, 0x64	; 100
    1760:	b0 f4       	brcc	.+44     	; 0x178e <uint2lcd+0x66>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10, 100); }
    1762:	8a 30       	cpi	r24, 0x0A	; 10
    1764:	90 f5       	brcc	.+100    	; 0x17ca <uint2lcd+0xa2>
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1766:	91 e0       	ldi	r25, 0x01	; 1
    1768:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    176a:	77 9b       	sbis	0x0e, 7	; 14
    176c:	fe cf       	rjmp	.-4      	; 0x176a <uint2lcd+0x42>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10, 100); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    , 100); }
    176e:	9d ec       	ldi	r25, 0xCD	; 205
    1770:	89 9f       	mul	r24, r25
    1772:	91 2d       	mov	r25, r1
    1774:	11 24       	eor	r1, r1
    1776:	96 95       	lsr	r25
    1778:	96 95       	lsr	r25
    177a:	96 95       	lsr	r25
    177c:	fa e0       	ldi	r31, 0x0A	; 10
    177e:	9f 9f       	mul	r25, r31
    1780:	80 19       	sub	r24, r0
    1782:	11 24       	eor	r1, r1
    1784:	80 5d       	subi	r24, 0xD0	; 208


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
    1786:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1788:	77 9b       	sbis	0x0e, 7	; 14
    178a:	fe cf       	rjmp	.-4      	; 0x1788 <uint2lcd+0x60>
    178c:	d7 cf       	rjmp	.-82     	; 0x173c <uint2lcd+0x14>
//TODO: does not display the number zero!  (FIXED 8.30.2014)
//
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
    178e:	99 e2       	ldi	r25, 0x29	; 41
    1790:	89 9f       	mul	r24, r25
    1792:	91 2d       	mov	r25, r1
    1794:	11 24       	eor	r1, r1
    1796:	92 95       	swap	r25
    1798:	9f 70       	andi	r25, 0x0F	; 15
    179a:	90 5d       	subi	r25, 0xD0	; 208
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    179c:	21 e0       	ldi	r18, 0x01	; 1
    179e:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    17a0:	77 9b       	sbis	0x0e, 7	; 14
    17a2:	fe cf       	rjmp	.-4      	; 0x17a0 <uint2lcd+0x78>
  SPDR = byte;                        //send payload
    17a4:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    17a6:	77 9b       	sbis	0x0e, 7	; 14
    17a8:	fe cf       	rjmp	.-4      	; 0x17a6 <uint2lcd+0x7e>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    17aa:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    17ae:	98 60       	ori	r25, 0x08	; 8
    17b0:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    17b4:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    17b8:	97 7f       	andi	r25, 0xF7	; 247
    17ba:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    17be:	ef e9       	ldi	r30, 0x9F	; 159
    17c0:	ff e0       	ldi	r31, 0x0F	; 15
    17c2:	31 97       	sbiw	r30, 0x01	; 1
    17c4:	f1 f7       	brne	.-4      	; 0x17c2 <uint2lcd+0x9a>
    17c6:	00 c0       	rjmp	.+0      	; 0x17c8 <uint2lcd+0xa0>
    17c8:	00 00       	nop
//
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10, 100); }
    17ca:	99 e2       	ldi	r25, 0x29	; 41
    17cc:	89 9f       	mul	r24, r25
    17ce:	91 2d       	mov	r25, r1
    17d0:	11 24       	eor	r1, r1
    17d2:	92 95       	swap	r25
    17d4:	9f 70       	andi	r25, 0x0F	; 15
    17d6:	28 2f       	mov	r18, r24
    17d8:	f4 e6       	ldi	r31, 0x64	; 100
    17da:	9f 9f       	mul	r25, r31
    17dc:	20 19       	sub	r18, r0
    17de:	11 24       	eor	r1, r1
    17e0:	92 2f       	mov	r25, r18
    17e2:	2d ec       	ldi	r18, 0xCD	; 205
    17e4:	92 9f       	mul	r25, r18
    17e6:	91 2d       	mov	r25, r1
    17e8:	11 24       	eor	r1, r1
    17ea:	96 95       	lsr	r25
    17ec:	96 95       	lsr	r25
    17ee:	96 95       	lsr	r25
    17f0:	90 5d       	subi	r25, 0xD0	; 208
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    17f2:	21 e0       	ldi	r18, 0x01	; 1
    17f4:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    17f6:	77 9b       	sbis	0x0e, 7	; 14
    17f8:	fe cf       	rjmp	.-4      	; 0x17f6 <uint2lcd+0xce>
  SPDR = byte;                        //send payload
    17fa:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    17fc:	77 9b       	sbis	0x0e, 7	; 14
    17fe:	fe cf       	rjmp	.-4      	; 0x17fc <uint2lcd+0xd4>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1800:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1804:	98 60       	ori	r25, 0x08	; 8
    1806:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    180a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    180e:	97 7f       	andi	r25, 0xF7	; 247
    1810:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1814:	ef e9       	ldi	r30, 0x9F	; 159
    1816:	ff e0       	ldi	r31, 0x0F	; 15
    1818:	31 97       	sbiw	r30, 0x01	; 1
    181a:	f1 f7       	brne	.-4      	; 0x1818 <uint2lcd+0xf0>
    181c:	00 c0       	rjmp	.+0      	; 0x181e <uint2lcd+0xf6>
    181e:	00 00       	nop
    1820:	a2 cf       	rjmp	.-188    	; 0x1766 <uint2lcd+0x3e>

00001822 <int2lcd>:
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    if(number < 0){send_lcd(CHAR_BYTE, '-', 100); uint2lcd(~number+1);}    //take 2's complement of number and display
    1822:	87 ff       	sbrs	r24, 7
    else                                    {uint2lcd(number);}
    1824:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <uint2lcd>
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1828:	91 e0       	ldi	r25, 0x01	; 1
    182a:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    182c:	77 9b       	sbis	0x0e, 7	; 14
    182e:	fe cf       	rjmp	.-4      	; 0x182c <int2lcd+0xa>
  SPDR = byte;                        //send payload
    1830:	9d e2       	ldi	r25, 0x2D	; 45
    1832:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1834:	77 9b       	sbis	0x0e, 7	; 14
    1836:	fe cf       	rjmp	.-4      	; 0x1834 <int2lcd+0x12>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1838:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    183c:	98 60       	ori	r25, 0x08	; 8
    183e:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1842:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1846:	97 7f       	andi	r25, 0xF7	; 247
    1848:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    184c:	ef e9       	ldi	r30, 0x9F	; 159
    184e:	ff e0       	ldi	r31, 0x0F	; 15
    1850:	31 97       	sbiw	r30, 0x01	; 1
    1852:	f1 f7       	brne	.-4      	; 0x1850 <int2lcd+0x2e>
    1854:	00 c0       	rjmp	.+0      	; 0x1856 <int2lcd+0x34>
    1856:	00 00       	nop
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    if(number < 0){send_lcd(CHAR_BYTE, '-', 100); uint2lcd(~number+1);}    //take 2's complement of number and display
    1858:	81 95       	neg	r24
    185a:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <uint2lcd>

0000185e <cursor_on>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    185e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1860:	77 9b       	sbis	0x0e, 7	; 14
    1862:	fe cf       	rjmp	.-4      	; 0x1860 <cursor_on+0x2>
  SPDR = byte;                        //send payload
    1864:	8e e0       	ldi	r24, 0x0E	; 14
    1866:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1868:	77 9b       	sbis	0x0e, 7	; 14
    186a:	fe cf       	rjmp	.-4      	; 0x1868 <cursor_on+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    186c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1870:	88 60       	ori	r24, 0x08	; 8
    1872:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1876:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    187a:	87 7f       	andi	r24, 0xF7	; 247
    187c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1880:	8f e9       	ldi	r24, 0x9F	; 159
    1882:	9f e0       	ldi	r25, 0x0F	; 15
    1884:	01 97       	sbiw	r24, 0x01	; 1
    1886:	f1 f7       	brne	.-4      	; 0x1884 <cursor_on+0x26>
    1888:	00 c0       	rjmp	.+0      	; 0x188a <cursor_on+0x2c>
    188a:	00 00       	nop
    188c:	08 95       	ret

0000188e <cursor_off>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    188e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1890:	77 9b       	sbis	0x0e, 7	; 14
    1892:	fe cf       	rjmp	.-4      	; 0x1890 <cursor_off+0x2>
  SPDR = byte;                        //send payload
    1894:	8c e0       	ldi	r24, 0x0C	; 12
    1896:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1898:	77 9b       	sbis	0x0e, 7	; 14
    189a:	fe cf       	rjmp	.-4      	; 0x1898 <cursor_off+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    189c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    18a0:	88 60       	ori	r24, 0x08	; 8
    18a2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    18a6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    18aa:	87 7f       	andi	r24, 0xF7	; 247
    18ac:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    18b0:	8f e9       	ldi	r24, 0x9F	; 159
    18b2:	9f e0       	ldi	r25, 0x0F	; 15
    18b4:	01 97       	sbiw	r24, 0x01	; 1
    18b6:	f1 f7       	brne	.-4      	; 0x18b4 <cursor_off+0x26>
    18b8:	00 c0       	rjmp	.+0      	; 0x18ba <cursor_off+0x2c>
    18ba:	00 00       	nop
    18bc:	08 95       	ret

000018be <shift_right>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    18be:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    18c0:	77 9b       	sbis	0x0e, 7	; 14
    18c2:	fe cf       	rjmp	.-4      	; 0x18c0 <shift_right+0x2>
  SPDR = byte;                        //send payload
    18c4:	8e e1       	ldi	r24, 0x1E	; 30
    18c6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    18c8:	77 9b       	sbis	0x0e, 7	; 14
    18ca:	fe cf       	rjmp	.-4      	; 0x18c8 <shift_right+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    18cc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    18d0:	88 60       	ori	r24, 0x08	; 8
    18d2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    18d6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    18da:	87 7f       	andi	r24, 0xF7	; 247
    18dc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    18e0:	8f e9       	ldi	r24, 0x9F	; 159
    18e2:	9f e0       	ldi	r25, 0x0F	; 15
    18e4:	01 97       	sbiw	r24, 0x01	; 1
    18e6:	f1 f7       	brne	.-4      	; 0x18e4 <shift_right+0x26>
    18e8:	00 c0       	rjmp	.+0      	; 0x18ea <shift_right+0x2c>
    18ea:	00 00       	nop
    18ec:	08 95       	ret

000018ee <shift_left>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    18ee:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    18f0:	77 9b       	sbis	0x0e, 7	; 14
    18f2:	fe cf       	rjmp	.-4      	; 0x18f0 <shift_left+0x2>
  SPDR = byte;                        //send payload
    18f4:	88 e1       	ldi	r24, 0x18	; 24
    18f6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    18f8:	77 9b       	sbis	0x0e, 7	; 14
    18fa:	fe cf       	rjmp	.-4      	; 0x18f8 <shift_left+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    18fc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1900:	88 60       	ori	r24, 0x08	; 8
    1902:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1906:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    190a:	87 7f       	andi	r24, 0xF7	; 247
    190c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1910:	8f e9       	ldi	r24, 0x9F	; 159
    1912:	9f e0       	ldi	r25, 0x0F	; 15
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	f1 f7       	brne	.-4      	; 0x1914 <shift_left+0x26>
    1918:	00 c0       	rjmp	.+0      	; 0x191a <shift_left+0x2c>
    191a:	00 00       	nop
    191c:	08 95       	ret

0000191e <strobe_lcd>:
    191e:	e2 e6       	ldi	r30, 0x62	; 98
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	88 60       	ori	r24, 0x08	; 8
    1926:	80 83       	st	Z, r24
    1928:	80 81       	ld	r24, Z
    192a:	87 7f       	andi	r24, 0xF7	; 247
    192c:	80 83       	st	Z, r24
    192e:	08 95       	ret

00001930 <clear_display>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1930:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1932:	77 9b       	sbis	0x0e, 7	; 14
    1934:	fe cf       	rjmp	.-4      	; 0x1932 <clear_display+0x2>
  SPDR = byte;                        //send payload
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    193a:	77 9b       	sbis	0x0e, 7	; 14
    193c:	fe cf       	rjmp	.-4      	; 0x193a <clear_display+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    193e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1942:	88 60       	ori	r24, 0x08	; 8
    1944:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1948:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    194c:	87 7f       	andi	r24, 0xF7	; 247
    194e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1952:	8f e9       	ldi	r24, 0x9F	; 159
    1954:	9f e0       	ldi	r25, 0x0F	; 15
    1956:	01 97       	sbiw	r24, 0x01	; 1
    1958:	f1 f7       	brne	.-4      	; 0x1956 <clear_display+0x26>
    195a:	00 c0       	rjmp	.+0      	; 0x195c <clear_display+0x2c>
    195c:	00 00       	nop
    195e:	08 95       	ret

00001960 <cursor_home>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1960:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1962:	77 9b       	sbis	0x0e, 7	; 14
    1964:	fe cf       	rjmp	.-4      	; 0x1962 <cursor_home+0x2>
  SPDR = byte;                        //send payload
    1966:	82 e0       	ldi	r24, 0x02	; 2
    1968:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    196a:	77 9b       	sbis	0x0e, 7	; 14
    196c:	fe cf       	rjmp	.-4      	; 0x196a <cursor_home+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    196e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1972:	88 60       	ori	r24, 0x08	; 8
    1974:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1978:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    197c:	87 7f       	andi	r24, 0xF7	; 247
    197e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1982:	8f e9       	ldi	r24, 0x9F	; 159
    1984:	9f e0       	ldi	r25, 0x0F	; 15
    1986:	01 97       	sbiw	r24, 0x01	; 1
    1988:	f1 f7       	brne	.-4      	; 0x1986 <cursor_home+0x26>
    198a:	00 c0       	rjmp	.+0      	; 0x198c <cursor_home+0x2c>
    198c:	00 00       	nop
    198e:	08 95       	ret

00001990 <home_line2>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1990:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1992:	77 9b       	sbis	0x0e, 7	; 14
    1994:	fe cf       	rjmp	.-4      	; 0x1992 <home_line2+0x2>
  SPDR = byte;                        //send payload
    1996:	80 ec       	ldi	r24, 0xC0	; 192
    1998:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    199a:	77 9b       	sbis	0x0e, 7	; 14
    199c:	fe cf       	rjmp	.-4      	; 0x199a <home_line2+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    199e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    19a2:	88 60       	ori	r24, 0x08	; 8
    19a4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    19a8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    19ac:	87 7f       	andi	r24, 0xF7	; 247
    19ae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    19b2:	8f e9       	ldi	r24, 0x9F	; 159
    19b4:	9f e0       	ldi	r25, 0x0F	; 15
    19b6:	01 97       	sbiw	r24, 0x01	; 1
    19b8:	f1 f7       	brne	.-4      	; 0x19b6 <home_line2+0x26>
    19ba:	00 c0       	rjmp	.+0      	; 0x19bc <home_line2+0x2c>
    19bc:	00 00       	nop
    19be:	08 95       	ret

000019c0 <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
    19c0:	90 e1       	ldi	r25, 0x10	; 16
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    19c2:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
    19c4:	20 e2       	ldi	r18, 0x20	; 32
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    19c6:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    19c8:	77 9b       	sbis	0x0e, 7	; 14
    19ca:	fe cf       	rjmp	.-4      	; 0x19c8 <fill_spaces+0x8>
  SPDR = byte;                        //send payload
    19cc:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    19ce:	77 9b       	sbis	0x0e, 7	; 14
    19d0:	fe cf       	rjmp	.-4      	; 0x19ce <fill_spaces+0xe>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    19d2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    19d6:	88 60       	ori	r24, 0x08	; 8
    19d8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    19dc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    19e0:	87 7f       	andi	r24, 0xF7	; 247
    19e2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    19e6:	ef e9       	ldi	r30, 0x9F	; 159
    19e8:	ff e0       	ldi	r31, 0x0F	; 15
    19ea:	31 97       	sbiw	r30, 0x01	; 1
    19ec:	f1 f7       	brne	.-4      	; 0x19ea <fill_spaces+0x2a>
    19ee:	00 c0       	rjmp	.+0      	; 0x19f0 <fill_spaces+0x30>
    19f0:	00 00       	nop
    19f2:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
    19f4:	41 f7       	brne	.-48     	; 0x19c6 <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' ',100); //100us wait between characters
	}
}
    19f6:	08 95       	ret

000019f8 <char2lcd>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    19f8:	91 e0       	ldi	r25, 0x01	; 1
    19fa:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    19fc:	77 9b       	sbis	0x0e, 7	; 14
    19fe:	fe cf       	rjmp	.-4      	; 0x19fc <char2lcd+0x4>
  SPDR = byte;                        //send payload
    1a00:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1a02:	77 9b       	sbis	0x0e, 7	; 14
    1a04:	fe cf       	rjmp	.-4      	; 0x1a02 <char2lcd+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1a06:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1a0a:	88 60       	ori	r24, 0x08	; 8
    1a0c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1a10:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1a14:	87 7f       	andi	r24, 0xF7	; 247
    1a16:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1a1a:	8f e9       	ldi	r24, 0x9F	; 159
    1a1c:	9f e0       	ldi	r25, 0x0F	; 15
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	f1 f7       	brne	.-4      	; 0x1a1e <char2lcd+0x26>
    1a22:	00 c0       	rjmp	.+0      	; 0x1a24 <char2lcd+0x2c>
    1a24:	00 00       	nop
    1a26:	08 95       	ret

00001a28 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
    1a28:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i], 100);}
    1a2a:	40 e0       	ldi	r20, 0x00	; 0
    1a2c:	50 e0       	ldi	r21, 0x00	; 0
    1a2e:	60 e0       	ldi	r22, 0x00	; 0
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1a30:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i], 100);}
    1a32:	df 01       	movw	r26, r30
    1a34:	a4 0f       	add	r26, r20
    1a36:	b5 1f       	adc	r27, r21
    1a38:	8c 91       	ld	r24, X
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1a3a:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1a3c:	77 9b       	sbis	0x0e, 7	; 14
    1a3e:	fe cf       	rjmp	.-4      	; 0x1a3c <string2lcd+0x14>
  SPDR = byte;                        //send payload
    1a40:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1a42:	77 9b       	sbis	0x0e, 7	; 14
    1a44:	fe cf       	rjmp	.-4      	; 0x1a42 <string2lcd+0x1a>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1a46:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1a4a:	98 60       	ori	r25, 0x08	; 8
    1a4c:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1a50:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1a54:	97 7f       	andi	r25, 0xF7	; 247
    1a56:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1a5a:	8f e9       	ldi	r24, 0x9F	; 159
    1a5c:	9f e0       	ldi	r25, 0x0F	; 15
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	f1 f7       	brne	.-4      	; 0x1a5e <string2lcd+0x36>
    1a62:	00 c0       	rjmp	.+0      	; 0x1a64 <string2lcd+0x3c>
    1a64:	00 00       	nop
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i], 100);}
    1a66:	6f 5f       	subi	r22, 0xFF	; 255
    1a68:	46 2f       	mov	r20, r22
    1a6a:	50 e0       	ldi	r21, 0x00	; 0
    1a6c:	df 01       	movw	r26, r30
    1a6e:	0d 90       	ld	r0, X+
    1a70:	00 20       	and	r0, r0
    1a72:	e9 f7       	brne	.-6      	; 0x1a6e <string2lcd+0x46>
    1a74:	9d 01       	movw	r18, r26
    1a76:	2e 1b       	sub	r18, r30
    1a78:	3f 0b       	sbc	r19, r31
    1a7a:	22 50       	subi	r18, 0x02	; 2
    1a7c:	31 09       	sbc	r19, r1
    1a7e:	24 17       	cp	r18, r20
    1a80:	35 07       	cpc	r19, r21
    1a82:	b8 f6       	brcc	.-82     	; 0x1a32 <string2lcd+0xa>
}
    1a84:	08 95       	ret

00001a86 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a86:	8f ef       	ldi	r24, 0xFF	; 255
    1a88:	99 ef       	ldi	r25, 0xF9	; 249
    1a8a:	01 97       	sbiw	r24, 0x01	; 1
    1a8c:	f1 f7       	brne	.-4      	; 0x1a8a <lcd_init+0x4>
    1a8e:	00 c0       	rjmp	.+0      	; 0x1a90 <lcd_init+0xa>
    1a90:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! should not be here.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
    1a92:	88 e0       	ldi	r24, 0x08	; 8
    1a94:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1a98:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1a9a:	77 9b       	sbis	0x0e, 7	; 14
    1a9c:	fe cf       	rjmp	.-4      	; 0x1a9a <lcd_init+0x14>
  SPDR = byte;                        //send payload
    1a9e:	80 e3       	ldi	r24, 0x30	; 48
    1aa0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1aa2:	77 9b       	sbis	0x0e, 7	; 14
    1aa4:	fe cf       	rjmp	.-4      	; 0x1aa2 <lcd_init+0x1c>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1aa6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1aaa:	88 60       	ori	r24, 0x08	; 8
    1aac:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1ab0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1ab4:	87 7f       	andi	r24, 0xF7	; 247
    1ab6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1aba:	8f e9       	ldi	r24, 0x9F	; 159
    1abc:	9f e0       	ldi	r25, 0x0F	; 15
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	f1 f7       	brne	.-4      	; 0x1abe <lcd_init+0x38>
    1ac2:	00 c0       	rjmp	.+0      	; 0x1ac4 <lcd_init+0x3e>
    1ac4:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1ac6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1ac8:	77 9b       	sbis	0x0e, 7	; 14
    1aca:	fe cf       	rjmp	.-4      	; 0x1ac8 <lcd_init+0x42>
  SPDR = byte;                        //send payload
    1acc:	80 e3       	ldi	r24, 0x30	; 48
    1ace:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1ad0:	77 9b       	sbis	0x0e, 7	; 14
    1ad2:	fe cf       	rjmp	.-4      	; 0x1ad0 <lcd_init+0x4a>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1ad4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1ad8:	88 60       	ori	r24, 0x08	; 8
    1ada:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1ade:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1ae2:	87 7f       	andi	r24, 0xF7	; 247
    1ae4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1ae8:	8f e9       	ldi	r24, 0x9F	; 159
    1aea:	9f e0       	ldi	r25, 0x0F	; 15
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	f1 f7       	brne	.-4      	; 0x1aec <lcd_init+0x66>
    1af0:	00 c0       	rjmp	.+0      	; 0x1af2 <lcd_init+0x6c>
    1af2:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1af4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1af6:	77 9b       	sbis	0x0e, 7	; 14
    1af8:	fe cf       	rjmp	.-4      	; 0x1af6 <lcd_init+0x70>
  SPDR = byte;                        //send payload
    1afa:	80 e3       	ldi	r24, 0x30	; 48
    1afc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1afe:	77 9b       	sbis	0x0e, 7	; 14
    1b00:	fe cf       	rjmp	.-4      	; 0x1afe <lcd_init+0x78>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1b02:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1b06:	88 60       	ori	r24, 0x08	; 8
    1b08:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1b0c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1b10:	87 7f       	andi	r24, 0xF7	; 247
    1b12:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1b16:	8f e9       	ldi	r24, 0x9F	; 159
    1b18:	9f e0       	ldi	r25, 0x0F	; 15
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	f1 f7       	brne	.-4      	; 0x1b1a <lcd_init+0x94>
    1b1e:	00 c0       	rjmp	.+0      	; 0x1b20 <lcd_init+0x9a>
    1b20:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1b22:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1b24:	77 9b       	sbis	0x0e, 7	; 14
    1b26:	fe cf       	rjmp	.-4      	; 0x1b24 <lcd_init+0x9e>
  SPDR = byte;                        //send payload
    1b28:	88 e3       	ldi	r24, 0x38	; 56
    1b2a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1b2c:	77 9b       	sbis	0x0e, 7	; 14
    1b2e:	fe cf       	rjmp	.-4      	; 0x1b2c <lcd_init+0xa6>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1b30:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1b34:	88 60       	ori	r24, 0x08	; 8
    1b36:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1b3a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1b3e:	87 7f       	andi	r24, 0xF7	; 247
    1b40:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1b44:	8f e9       	ldi	r24, 0x9F	; 159
    1b46:	9f e0       	ldi	r25, 0x0F	; 15
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	f1 f7       	brne	.-4      	; 0x1b48 <lcd_init+0xc2>
    1b4c:	00 c0       	rjmp	.+0      	; 0x1b4e <lcd_init+0xc8>
    1b4e:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1b50:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1b52:	77 9b       	sbis	0x0e, 7	; 14
    1b54:	fe cf       	rjmp	.-4      	; 0x1b52 <lcd_init+0xcc>
  SPDR = byte;                        //send payload
    1b56:	88 e0       	ldi	r24, 0x08	; 8
    1b58:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1b5a:	77 9b       	sbis	0x0e, 7	; 14
    1b5c:	fe cf       	rjmp	.-4      	; 0x1b5a <lcd_init+0xd4>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1b5e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1b62:	88 60       	ori	r24, 0x08	; 8
    1b64:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1b68:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1b6c:	87 7f       	andi	r24, 0xF7	; 247
    1b6e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1b72:	8f e9       	ldi	r24, 0x9F	; 159
    1b74:	9f e0       	ldi	r25, 0x0F	; 15
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	f1 f7       	brne	.-4      	; 0x1b76 <lcd_init+0xf0>
    1b7a:	00 c0       	rjmp	.+0      	; 0x1b7c <lcd_init+0xf6>
    1b7c:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1b7e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1b80:	77 9b       	sbis	0x0e, 7	; 14
    1b82:	fe cf       	rjmp	.-4      	; 0x1b80 <lcd_init+0xfa>
  SPDR = byte;                        //send payload
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1b88:	77 9b       	sbis	0x0e, 7	; 14
    1b8a:	fe cf       	rjmp	.-4      	; 0x1b88 <lcd_init+0x102>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1b8c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1b90:	88 60       	ori	r24, 0x08	; 8
    1b92:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1b96:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1b9a:	87 7f       	andi	r24, 0xF7	; 247
    1b9c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1ba0:	8f e9       	ldi	r24, 0x9F	; 159
    1ba2:	9f e0       	ldi	r25, 0x0F	; 15
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	f1 f7       	brne	.-4      	; 0x1ba4 <lcd_init+0x11e>
    1ba8:	00 c0       	rjmp	.+0      	; 0x1baa <lcd_init+0x124>
    1baa:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1bac:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1bae:	77 9b       	sbis	0x0e, 7	; 14
    1bb0:	fe cf       	rjmp	.-4      	; 0x1bae <lcd_init+0x128>
  SPDR = byte;                        //send payload
    1bb2:	86 e0       	ldi	r24, 0x06	; 6
    1bb4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1bb6:	77 9b       	sbis	0x0e, 7	; 14
    1bb8:	fe cf       	rjmp	.-4      	; 0x1bb6 <lcd_init+0x130>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1bba:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1bbe:	88 60       	ori	r24, 0x08	; 8
    1bc0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1bc4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1bc8:	87 7f       	andi	r24, 0xF7	; 247
    1bca:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1bce:	8f e9       	ldi	r24, 0x9F	; 159
    1bd0:	9f e0       	ldi	r25, 0x0F	; 15
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	f1 f7       	brne	.-4      	; 0x1bd2 <lcd_init+0x14c>
    1bd6:	00 c0       	rjmp	.+0      	; 0x1bd8 <lcd_init+0x152>
    1bd8:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1bda:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1bdc:	77 9b       	sbis	0x0e, 7	; 14
    1bde:	fe cf       	rjmp	.-4      	; 0x1bdc <lcd_init+0x156>
  SPDR = byte;                        //send payload
    1be0:	8c e0       	ldi	r24, 0x0C	; 12
    1be2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1be4:	77 9b       	sbis	0x0e, 7	; 14
    1be6:	fe cf       	rjmp	.-4      	; 0x1be4 <lcd_init+0x15e>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1be8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1bec:	88 60       	ori	r24, 0x08	; 8
    1bee:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1bf2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1bf6:	87 7f       	andi	r24, 0xF7	; 247
    1bf8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1bfc:	8f e9       	ldi	r24, 0x9F	; 159
    1bfe:	9f e0       	ldi	r25, 0x0F	; 15
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	f1 f7       	brne	.-4      	; 0x1c00 <lcd_init+0x17a>
    1c04:	00 c0       	rjmp	.+0      	; 0x1c06 <lcd_init+0x180>
    1c06:	00 00       	nop
    1c08:	08 95       	ret

00001c0a <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
    1c0a:	4f 92       	push	r4
    1c0c:	5f 92       	push	r5
    1c0e:	6f 92       	push	r6
    1c10:	7f 92       	push	r7
    1c12:	8f 92       	push	r8
    1c14:	9f 92       	push	r9
    1c16:	af 92       	push	r10
    1c18:	bf 92       	push	r11
    1c1a:	cf 92       	push	r12
    1c1c:	df 92       	push	r13
    1c1e:	ef 92       	push	r14
    1c20:	ff 92       	push	r15
    1c22:	0f 93       	push	r16
    1c24:	1f 93       	push	r17
    1c26:	cf 93       	push	r28
    1c28:	df 93       	push	r29
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	69 97       	sbiw	r28, 0x19	; 25
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	f8 94       	cli
    1c34:	de bf       	out	0x3e, r29	; 62
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	cd bf       	out	0x3d, r28	; 61
    1c3a:	14 2f       	mov	r17, r20
    1c3c:	42 2e       	mov	r4, r18
    1c3e:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient

      if (bSigned){
    1c40:	00 23       	and	r16, r16
    1c42:	79 f0       	breq	.+30     	; 0x1c62 <lcd_int32+0x58>
        bSigned = (qr.quot<0);
    1c44:	6b 01       	movw	r12, r22
    1c46:	7c 01       	movw	r14, r24
    1c48:	cc 24       	eor	r12, r12
    1c4a:	f7 fc       	sbrc	r15, 7
    1c4c:	c3 94       	inc	r12
    1c4e:	dd 24       	eor	r13, r13
    1c50:	ee 24       	eor	r14, r14
    1c52:	ff 24       	eor	r15, r15
    1c54:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
    1c56:	6b 01       	movw	r12, r22
    1c58:	7c 01       	movw	r14, r24
    1c5a:	97 fd       	sbrc	r25, 7
    1c5c:	a5 c0       	rjmp	.+330    	; 0x1da8 <lcd_int32+0x19e>
    1c5e:	c7 01       	movw	r24, r14
    1c60:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point
      if (decpos){
    1c62:	44 20       	and	r4, r4
    1c64:	09 f4       	brne	.+2      	; 0x1c68 <lcd_int32+0x5e>
    1c66:	98 c0       	rjmp	.+304    	; 0x1d98 <lcd_int32+0x18e>
    1c68:	9e 01       	movw	r18, r28
    1c6a:	2f 5f       	subi	r18, 0xFF	; 255
    1c6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c6e:	59 01       	movw	r10, r18
    1c70:	49 01       	movw	r8, r18
    1c72:	66 24       	eor	r6, r6
    1c74:	6a 94       	dec	r6
    1c76:	64 0c       	add	r6, r4
    1c78:	71 2c       	mov	r7, r1
    1c7a:	3f ef       	ldi	r19, 0xFF	; 255
    1c7c:	63 1a       	sub	r6, r19
    1c7e:	73 0a       	sbc	r7, r19
    1c80:	6a 0c       	add	r6, r10
    1c82:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
    1c84:	2a e0       	ldi	r18, 0x0A	; 10
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	40 e0       	ldi	r20, 0x00	; 0
    1c8a:	50 e0       	ldi	r21, 0x00	; 0
    1c8c:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__divmodsi4>
    1c90:	e6 2f       	mov	r30, r22
    1c92:	2a 8b       	std	Y+18, r18	; 0x12
    1c94:	3b 8b       	std	Y+19, r19	; 0x13
    1c96:	4c 8b       	std	Y+20, r20	; 0x14
    1c98:	5d 8b       	std	Y+21, r21	; 0x15
    1c9a:	6a 89       	ldd	r22, Y+18	; 0x12
    1c9c:	7b 89       	ldd	r23, Y+19	; 0x13
    1c9e:	8c 89       	ldd	r24, Y+20	; 0x14
    1ca0:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    1ca2:	20 e3       	ldi	r18, 0x30	; 48
    1ca4:	2e 0f       	add	r18, r30
    1ca6:	f4 01       	movw	r30, r8
    1ca8:	21 93       	st	Z+, r18
    1caa:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point
      if (decpos){
        for (; decpos ; decpos--){
    1cac:	6e 16       	cp	r6, r30
    1cae:	7f 06       	cpc	r7, r31
    1cb0:	49 f7       	brne	.-46     	; 0x1c84 <lcd_int32+0x7a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
    1cb2:	99 24       	eor	r9, r9
    1cb4:	93 94       	inc	r9
    1cb6:	94 0c       	add	r9, r4
    1cb8:	f5 01       	movw	r30, r10
    1cba:	e4 0d       	add	r30, r4
    1cbc:	f1 1d       	adc	r31, r1
    1cbe:	2e e2       	ldi	r18, 0x2E	; 46
    1cc0:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point
      do{
          qr = ldiv(qr.quot, 10);
    1cc2:	2a e0       	ldi	r18, 0x0A	; 10
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 e0       	ldi	r20, 0x00	; 0
    1cc8:	50 e0       	ldi	r21, 0x00	; 0
    1cca:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__divmodsi4>
    1cce:	e6 2f       	mov	r30, r22
    1cd0:	2a 8b       	std	Y+18, r18	; 0x12
    1cd2:	3b 8b       	std	Y+19, r19	; 0x13
    1cd4:	4c 8b       	std	Y+20, r20	; 0x14
    1cd6:	5d 8b       	std	Y+21, r21	; 0x15
    1cd8:	6e 8b       	std	Y+22, r22	; 0x16
    1cda:	7f 8b       	std	Y+23, r23	; 0x17
    1cdc:	88 8f       	std	Y+24, r24	; 0x18
    1cde:	99 8f       	std	Y+25, r25	; 0x19
    1ce0:	6a 89       	ldd	r22, Y+18	; 0x12
    1ce2:	7b 89       	ldd	r23, Y+19	; 0x13
    1ce4:	8c 89       	ldd	r24, Y+20	; 0x14
    1ce6:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    1ce8:	31 e0       	ldi	r19, 0x01	; 1
    1cea:	39 0d       	add	r19, r9
    1cec:	d5 01       	movw	r26, r10
    1cee:	a9 0d       	add	r26, r9
    1cf0:	b1 1d       	adc	r27, r1
    1cf2:	e0 5d       	subi	r30, 0xD0	; 208
    1cf4:	ec 93       	st	X, r30
    1cf6:	93 2e       	mov	r9, r19
        }while(qr.quot);
    1cf8:	61 15       	cp	r22, r1
    1cfa:	71 05       	cpc	r23, r1
    1cfc:	81 05       	cpc	r24, r1
    1cfe:	91 05       	cpc	r25, r1
    1d00:	01 f7       	brne	.-64     	; 0x1cc2 <lcd_int32+0xb8>

      // fill the whole field if a width was specified
      if (fieldwidth){
    1d02:	11 23       	and	r17, r17
    1d04:	61 f0       	breq	.+24     	; 0x1d1e <lcd_int32+0x114>
        fillch = bZeroFill? '0': ' '; // determine the fill character
    1d06:	51 10       	cpse	r5, r1
    1d08:	4d c0       	rjmp	.+154    	; 0x1da4 <lcd_int32+0x19a>
    1d0a:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
    1d0c:	31 17       	cp	r19, r17
    1d0e:	38 f4       	brcc	.+14     	; 0x1d1e <lcd_int32+0x114>
    1d10:	f5 01       	movw	r30, r10
    1d12:	e3 0f       	add	r30, r19
    1d14:	f1 1d       	adc	r31, r1
    1d16:	90 83       	st	Z, r25
    1d18:	3f 5f       	subi	r19, 0xFF	; 255
    1d1a:	13 13       	cpse	r17, r19
    1d1c:	f9 cf       	rjmp	.-14     	; 0x1d10 <lcd_int32+0x106>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
    1d1e:	00 23       	and	r16, r16
    1d20:	31 f0       	breq	.+12     	; 0x1d2e <lcd_int32+0x124>
    1d22:	f5 01       	movw	r30, r10
    1d24:	e3 0f       	add	r30, r19
    1d26:	f1 1d       	adc	r31, r1
    1d28:	9d e2       	ldi	r25, 0x2D	; 45
    1d2a:	90 83       	st	Z, r25
    1d2c:	3f 5f       	subi	r19, 0xFF	; 255
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1d2e:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i] , 1000);} while(i);
    1d30:	31 50       	subi	r19, 0x01	; 1
    1d32:	f5 01       	movw	r30, r10
    1d34:	e3 0f       	add	r30, r19
    1d36:	f1 1d       	adc	r31, r1
    1d38:	90 81       	ld	r25, Z
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1d3a:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1d3c:	77 9b       	sbis	0x0e, 7	; 14
    1d3e:	fe cf       	rjmp	.-4      	; 0x1d3c <lcd_int32+0x132>
  SPDR = byte;                        //send payload
    1d40:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1d42:	77 9b       	sbis	0x0e, 7	; 14
    1d44:	fe cf       	rjmp	.-4      	; 0x1d42 <lcd_int32+0x138>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1d46:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1d4a:	98 60       	ori	r25, 0x08	; 8
    1d4c:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1d50:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1d54:	97 7f       	andi	r25, 0xF7	; 247
    1d56:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1d5a:	8f e9       	ldi	r24, 0x9F	; 159
    1d5c:	9f e0       	ldi	r25, 0x0F	; 15
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	f1 f7       	brne	.-4      	; 0x1d5e <lcd_int32+0x154>
    1d62:	00 c0       	rjmp	.+0      	; 0x1d64 <lcd_int32+0x15a>
    1d64:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i] , 1000);} while(i);
    1d66:	31 11       	cpse	r19, r1
    1d68:	e3 cf       	rjmp	.-58     	; 0x1d30 <lcd_int32+0x126>

}
    1d6a:	69 96       	adiw	r28, 0x19	; 25
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	f8 94       	cli
    1d70:	de bf       	out	0x3e, r29	; 62
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	cd bf       	out	0x3d, r28	; 61
    1d76:	df 91       	pop	r29
    1d78:	cf 91       	pop	r28
    1d7a:	1f 91       	pop	r17
    1d7c:	0f 91       	pop	r16
    1d7e:	ff 90       	pop	r15
    1d80:	ef 90       	pop	r14
    1d82:	df 90       	pop	r13
    1d84:	cf 90       	pop	r12
    1d86:	bf 90       	pop	r11
    1d88:	af 90       	pop	r10
    1d8a:	9f 90       	pop	r9
    1d8c:	8f 90       	pop	r8
    1d8e:	7f 90       	pop	r7
    1d90:	6f 90       	pop	r6
    1d92:	5f 90       	pop	r5
    1d94:	4f 90       	pop	r4
    1d96:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
    1d98:	91 2c       	mov	r9, r1
    1d9a:	9e 01       	movw	r18, r28
    1d9c:	2f 5f       	subi	r18, 0xFF	; 255
    1d9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1da0:	59 01       	movw	r10, r18
    1da2:	8f cf       	rjmp	.-226    	; 0x1cc2 <lcd_int32+0xb8>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
    1da4:	90 e3       	ldi	r25, 0x30	; 48
    1da6:	b2 cf       	rjmp	.-156    	; 0x1d0c <lcd_int32+0x102>

      qr.quot = l; // initialize the quotient

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
    1da8:	f0 94       	com	r15
    1daa:	e0 94       	com	r14
    1dac:	d0 94       	com	r13
    1dae:	c0 94       	com	r12
    1db0:	c1 1c       	adc	r12, r1
    1db2:	d1 1c       	adc	r13, r1
    1db4:	e1 1c       	adc	r14, r1
    1db6:	f1 1c       	adc	r15, r1
    1db8:	52 cf       	rjmp	.-348    	; 0x1c5e <lcd_int32+0x54>

00001dba <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l,
                  uint8_t fieldwidth,
                  uint8_t decpos,
                  uint8_t bZeroFill)
{
    1dba:	5f 92       	push	r5
    1dbc:	6f 92       	push	r6
    1dbe:	7f 92       	push	r7
    1dc0:	8f 92       	push	r8
    1dc2:	9f 92       	push	r9
    1dc4:	af 92       	push	r10
    1dc6:	bf 92       	push	r11
    1dc8:	cf 92       	push	r12
    1dca:	df 92       	push	r13
    1dcc:	ef 92       	push	r14
    1dce:	ff 92       	push	r15
    1dd0:	0f 93       	push	r16
    1dd2:	1f 93       	push	r17
    1dd4:	cf 93       	push	r28
    1dd6:	df 93       	push	r29
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
    1ddc:	61 97       	sbiw	r28, 0x11	; 17
    1dde:	0f b6       	in	r0, 0x3f	; 63
    1de0:	f8 94       	cli
    1de2:	de bf       	out	0x3e, r29	; 62
    1de4:	0f be       	out	0x3f, r0	; 63
    1de6:	cd bf       	out	0x3d, r28	; 61
    1de8:	5c 01       	movw	r10, r24
    1dea:	96 2e       	mov	r9, r22
    1dec:	54 2e       	mov	r5, r20
    1dee:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
    1df0:	8b 2c       	mov	r8, r11
    1df2:	88 1c       	adc	r8, r8
    1df4:	88 24       	eor	r8, r8
    1df6:	88 1c       	adc	r8, r8
    1df8:	78 2c       	mov	r7, r8
    1dfa:	9c 01       	movw	r18, r24
    1dfc:	97 fd       	sbrc	r25, 7
    1dfe:	9f c0       	rjmp	.+318    	; 0x1f3e <lcd_int16+0x184>
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point
        if (decpos){
    1e00:	55 20       	and	r5, r5
    1e02:	09 f4       	brne	.+2      	; 0x1e06 <lcd_int16+0x4c>
    1e04:	90 c0       	rjmp	.+288    	; 0x1f26 <lcd_int16+0x16c>
    1e06:	8e 01       	movw	r16, r28
    1e08:	0f 5f       	subi	r16, 0xFF	; 255
    1e0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e0c:	78 01       	movw	r14, r16
    1e0e:	cc 24       	eor	r12, r12
    1e10:	ca 94       	dec	r12
    1e12:	c5 0c       	add	r12, r5
    1e14:	d1 2c       	mov	r13, r1
    1e16:	8f ef       	ldi	r24, 0xFF	; 255
    1e18:	c8 1a       	sub	r12, r24
    1e1a:	d8 0a       	sbc	r13, r24
    1e1c:	c0 0e       	add	r12, r16
    1e1e:	d1 1e       	adc	r13, r17
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
    1e20:	6a e0       	ldi	r22, 0x0A	; 10
    1e22:	70 e0       	ldi	r23, 0x00	; 0
    1e24:	c9 01       	movw	r24, r18
    1e26:	0e 94 7f 15 	call	0x2afe	; 0x2afe <__divmodhi4>
    1e2a:	46 2f       	mov	r20, r22
    1e2c:	24 2f       	mov	r18, r20
    1e2e:	37 2f       	mov	r19, r23
            sline[i++] = qr.rem + '0';
    1e30:	80 5d       	subi	r24, 0xD0	; 208
    1e32:	f7 01       	movw	r30, r14
    1e34:	81 93       	st	Z+, r24
    1e36:	7f 01       	movw	r14, r30
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point
        if (decpos){
          for (; decpos ; decpos--){
    1e38:	ec 15       	cp	r30, r12
    1e3a:	fd 05       	cpc	r31, r13
    1e3c:	89 f7       	brne	.-30     	; 0x1e20 <lcd_int16+0x66>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
    1e3e:	ff 24       	eor	r15, r15
    1e40:	f3 94       	inc	r15
    1e42:	f5 0c       	add	r15, r5
    1e44:	f8 01       	movw	r30, r16
    1e46:	e5 0d       	add	r30, r5
    1e48:	f1 1d       	adc	r31, r1
    1e4a:	8e e2       	ldi	r24, 0x2E	; 46
    1e4c:	80 83       	st	Z, r24
    1e4e:	01 c0       	rjmp	.+2      	; 0x1e52 <lcd_int16+0x98>

        // convert the digits to the left of the decimal point
        do
        {
                qr = div(qr.quot, 10);
                sline[i++] = qr.rem + '0';
    1e50:	f9 2e       	mov	r15, r25
        }

        // convert the digits to the left of the decimal point
        do
        {
                qr = div(qr.quot, 10);
    1e52:	6a e0       	ldi	r22, 0x0A	; 10
    1e54:	70 e0       	ldi	r23, 0x00	; 0
    1e56:	c9 01       	movw	r24, r18
    1e58:	0e 94 7f 15 	call	0x2afe	; 0x2afe <__divmodhi4>
    1e5c:	46 2f       	mov	r20, r22
    1e5e:	24 2f       	mov	r18, r20
    1e60:	37 2f       	mov	r19, r23
                sline[i++] = qr.rem + '0';
    1e62:	91 e0       	ldi	r25, 0x01	; 1
    1e64:	9f 0d       	add	r25, r15
    1e66:	f8 01       	movw	r30, r16
    1e68:	ef 0d       	add	r30, r15
    1e6a:	f1 1d       	adc	r31, r1
    1e6c:	80 5d       	subi	r24, 0xD0	; 208
    1e6e:	80 83       	st	Z, r24
        }
        while(qr.quot);
    1e70:	21 15       	cp	r18, r1
    1e72:	31 05       	cpc	r19, r1
    1e74:	69 f7       	brne	.-38     	; 0x1e50 <lcd_int16+0x96>

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
    1e76:	61 10       	cpse	r6, r1
    1e78:	5b c0       	rjmp	.+182    	; 0x1f30 <lcd_int16+0x176>
    1e7a:	b7 fc       	sbrc	r11, 7
    1e7c:	65 c0       	rjmp	.+202    	; 0x1f48 <lcd_int16+0x18e>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
    1e7e:	99 20       	and	r9, r9
    1e80:	b1 f0       	breq	.+44     	; 0x1eae <lcd_int16+0xf4>
    1e82:	68 2d       	mov	r22, r8
    1e84:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
    1e86:	80 e2       	ldi	r24, 0x20	; 32
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    1e88:	29 2f       	mov	r18, r25
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	49 2d       	mov	r20, r9
    1e8e:	50 e0       	ldi	r21, 0x00	; 0
    1e90:	46 1b       	sub	r20, r22
    1e92:	57 0b       	sbc	r21, r23
    1e94:	24 17       	cp	r18, r20
    1e96:	35 07       	cpc	r19, r21
    1e98:	54 f4       	brge	.+20     	; 0x1eae <lcd_int16+0xf4>
    1e9a:	9f 5f       	subi	r25, 0xFF	; 255
    1e9c:	f8 01       	movw	r30, r16
    1e9e:	e2 0f       	add	r30, r18
    1ea0:	f3 1f       	adc	r31, r19
    1ea2:	80 83       	st	Z, r24
    1ea4:	29 2f       	mov	r18, r25
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	24 17       	cp	r18, r20
    1eaa:	35 07       	cpc	r19, r21
    1eac:	b4 f3       	brlt	.-20     	; 0x1e9a <lcd_int16+0xe0>
        }

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}
    1eae:	77 20       	and	r7, r7
    1eb0:	31 f0       	breq	.+12     	; 0x1ebe <lcd_int16+0x104>
    1eb2:	f8 01       	movw	r30, r16
    1eb4:	e9 0f       	add	r30, r25
    1eb6:	f1 1d       	adc	r31, r1
    1eb8:	8d e2       	ldi	r24, 0x2D	; 45
    1eba:	80 83       	st	Z, r24
    1ebc:	9f 5f       	subi	r25, 0xFF	; 255
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1ebe:	21 e0       	ldi	r18, 0x01	; 1

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number
            do{send_lcd(CHAR_BYTE, sline[--i] , 1000);} while(i);
    1ec0:	91 50       	subi	r25, 0x01	; 1
    1ec2:	f8 01       	movw	r30, r16
    1ec4:	e9 0f       	add	r30, r25
    1ec6:	f1 1d       	adc	r31, r1
    1ec8:	80 81       	ld	r24, Z
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1eca:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1ecc:	77 9b       	sbis	0x0e, 7	; 14
    1ece:	fe cf       	rjmp	.-4      	; 0x1ecc <lcd_int16+0x112>
  SPDR = byte;                        //send payload
    1ed0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1ed2:	77 9b       	sbis	0x0e, 7	; 14
    1ed4:	fe cf       	rjmp	.-4      	; 0x1ed2 <lcd_int16+0x118>
//-----------------------------------------------------------------------------
//                          strobe_lcd
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1ed6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1eda:	88 60       	ori	r24, 0x08	; 8
    1edc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1ee0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1ee4:	87 7f       	andi	r24, 0xF7	; 247
    1ee6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1eea:	ef e9       	ldi	r30, 0x9F	; 159
    1eec:	ff e0       	ldi	r31, 0x0F	; 15
    1eee:	31 97       	sbiw	r30, 0x01	; 1
    1ef0:	f1 f7       	brne	.-4      	; 0x1eee <lcd_int16+0x134>
    1ef2:	00 c0       	rjmp	.+0      	; 0x1ef4 <lcd_int16+0x13a>
    1ef4:	00 00       	nop

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number
            do{send_lcd(CHAR_BYTE, sline[--i] , 1000);} while(i);
    1ef6:	91 11       	cpse	r25, r1
    1ef8:	e3 cf       	rjmp	.-58     	; 0x1ec0 <lcd_int16+0x106>
}
    1efa:	61 96       	adiw	r28, 0x11	; 17
    1efc:	0f b6       	in	r0, 0x3f	; 63
    1efe:	f8 94       	cli
    1f00:	de bf       	out	0x3e, r29	; 62
    1f02:	0f be       	out	0x3f, r0	; 63
    1f04:	cd bf       	out	0x3d, r28	; 61
    1f06:	df 91       	pop	r29
    1f08:	cf 91       	pop	r28
    1f0a:	1f 91       	pop	r17
    1f0c:	0f 91       	pop	r16
    1f0e:	ff 90       	pop	r15
    1f10:	ef 90       	pop	r14
    1f12:	df 90       	pop	r13
    1f14:	cf 90       	pop	r12
    1f16:	bf 90       	pop	r11
    1f18:	af 90       	pop	r10
    1f1a:	9f 90       	pop	r9
    1f1c:	8f 90       	pop	r8
    1f1e:	7f 90       	pop	r7
    1f20:	6f 90       	pop	r6
    1f22:	5f 90       	pop	r5
    1f24:	08 95       	ret
                  uint8_t fieldwidth,
                  uint8_t decpos,
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
    1f26:	f1 2c       	mov	r15, r1
    1f28:	8e 01       	movw	r16, r28
    1f2a:	0f 5f       	subi	r16, 0xFF	; 255
    1f2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f2e:	91 cf       	rjmp	.-222    	; 0x1e52 <lcd_int16+0x98>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
    1f30:	99 20       	and	r9, r9
    1f32:	09 f4       	brne	.+2      	; 0x1f36 <lcd_int16+0x17c>
    1f34:	bc cf       	rjmp	.-136    	; 0x1eae <lcd_int16+0xf4>
    1f36:	68 2d       	mov	r22, r8
    1f38:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
    1f3a:	80 e3       	ldi	r24, 0x30	; 48
    1f3c:	a5 cf       	rjmp	.-182    	; 0x1e88 <lcd_int16+0xce>
    1f3e:	22 27       	eor	r18, r18
    1f40:	33 27       	eor	r19, r19
    1f42:	28 1b       	sub	r18, r24
    1f44:	39 0b       	sbc	r19, r25
    1f46:	5c cf       	rjmp	.-328    	; 0x1e00 <lcd_int16+0x46>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    1f48:	f3 94       	inc	r15
    1f4a:	f3 94       	inc	r15
    1f4c:	f8 01       	movw	r30, r16
    1f4e:	e9 0f       	add	r30, r25
    1f50:	f1 1d       	adc	r31, r1
    1f52:	8d e2       	ldi	r24, 0x2D	; 45
    1f54:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
    1f56:	99 20       	and	r9, r9
    1f58:	59 f0       	breq	.+22     	; 0x1f70 <lcd_int16+0x1b6>
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    1f5a:	2f 2d       	mov	r18, r15
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	49 2d       	mov	r20, r9
    1f60:	50 e0       	ldi	r21, 0x00	; 0
    1f62:	24 17       	cp	r18, r20
    1f64:	35 07       	cpc	r19, r21
    1f66:	24 f4       	brge	.+8      	; 0x1f70 <lcd_int16+0x1b6>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    1f68:	9f 2d       	mov	r25, r15
                bSigned = 0;
    1f6a:	71 2c       	mov	r7, r1
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
    1f6c:	80 e2       	ldi	r24, 0x20	; 32
    1f6e:	95 cf       	rjmp	.-214    	; 0x1e9a <lcd_int16+0xe0>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    1f70:	9f 2d       	mov	r25, r15
    1f72:	a5 cf       	rjmp	.-182    	; 0x1ebe <lcd_int16+0x104>

00001f74 <lm73_temp_convert>:
      This is the flag that determines if the conversion is sent out
      as Farenheit or Celcius. 0x00=Celcius and 0x01=Farenheit
Return: VOID 
***********************************************************/
void lm73_temp_convert(char temp_digits[], uint16_t lm73_temp, uint8_t f_not_c)
{
    1f74:	cf 92       	push	r12
    1f76:	df 92       	push	r13
    1f78:	ef 92       	push	r14
    1f7a:	ff 92       	push	r15
    1f7c:	0f 93       	push	r16
    1f7e:	1f 93       	push	r17
    1f80:	cf 93       	push	r28
    1f82:	df 93       	push	r29
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
    1f88:	a0 97       	sbiw	r28, 0x20	; 32
    1f8a:	0f b6       	in	r0, 0x3f	; 63
    1f8c:	f8 94       	cli
    1f8e:	de bf       	out	0x3e, r29	; 62
    1f90:	0f be       	out	0x3f, r0	; 63
    1f92:	cd bf       	out	0x3d, r28	; 61
    1f94:	8c 01       	movw	r16, r24
    1f96:	f4 2e       	mov	r15, r20
  //clear the character array
  temp_digits[0]=0;//set initial value to zero to denote empty array
    1f98:	dc 01       	movw	r26, r24
    1f9a:	1c 92       	st	X, r1

  //clean the register value
  uint16_t cleaned_temp   = (lm73_temp>>5);//copy RS value by 5 to get rid of 0:4
    1f9c:	76 95       	lsr	r23
    1f9e:	67 95       	ror	r22
    1fa0:	72 95       	swap	r23
    1fa2:	62 95       	swap	r22
    1fa4:	6f 70       	andi	r22, 0x0F	; 15
    1fa6:	67 27       	eor	r22, r23
    1fa8:	7f 70       	andi	r23, 0x0F	; 15
    1faa:	67 27       	eor	r22, r23
    1fac:	91 e0       	ldi	r25, 0x01	; 1
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0

  //setup variables to store additions
  uint8_t integer_part    = 0;//whole number
  uint8_t fractional_part = 0;//decimal part
    1fb2:	e1 2c       	mov	r14, r1

  //clean the register value
  uint16_t cleaned_temp   = (lm73_temp>>5);//copy RS value by 5 to get rid of 0:4

  //setup variables to store additions
  uint8_t integer_part    = 0;//whole number
    1fb4:	e0 e0       	ldi	r30, 0x00	; 0
      }else if (bit_t==1) {//0.50 degrees
        fractional_part+=50;
      }else if (bit_t==10) {//sign of temperature
        strcat(temp_digits, "-");
      }else{
        integer_part+=(1<<(bit_t-2));//bits 2:9(-2 due to 1st two bits)
    1fb6:	a1 e0       	ldi	r26, 0x01	; 1
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	03 c0       	rjmp	.+6      	; 0x1fc2 <lm73_temp_convert+0x4e>
    1fbc:	2f 5f       	subi	r18, 0xFF	; 255
    1fbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc0:	9f 5f       	subi	r25, 0xFF	; 255
  //integer used to keep track of farenheit decimal
  uint8_t farenheit_carry = 0;

  //check each bit to get temperature
  for (uint8_t bit_t = 0; bit_t <11; bit_t++) {
    if (((cleaned_temp>>bit_t)&1)==1) {//bit is a one
    1fc2:	ab 01       	movw	r20, r22
    1fc4:	02 2e       	mov	r0, r18
    1fc6:	02 c0       	rjmp	.+4      	; 0x1fcc <lm73_temp_convert+0x58>
    1fc8:	56 95       	lsr	r21
    1fca:	47 95       	ror	r20
    1fcc:	0a 94       	dec	r0
    1fce:	e2 f7       	brpl	.-8      	; 0x1fc8 <lm73_temp_convert+0x54>
    1fd0:	40 ff       	sbrs	r20, 0
    1fd2:	13 c0       	rjmp	.+38     	; 0x1ffa <lm73_temp_convert+0x86>
      if (bit_t == 0) {//0.25 degrees
    1fd4:	22 23       	and	r18, r18
    1fd6:	09 f4       	brne	.+2      	; 0x1fda <lm73_temp_convert+0x66>
    1fd8:	d3 c0       	rjmp	.+422    	; 0x2180 <lm73_temp_convert+0x20c>
        fractional_part+=25;
      }else if (bit_t==1) {//0.50 degrees
    1fda:	21 30       	cpi	r18, 0x01	; 1
    1fdc:	09 f4       	brne	.+2      	; 0x1fe0 <lm73_temp_convert+0x6c>
    1fde:	d3 c0       	rjmp	.+422    	; 0x2186 <lm73_temp_convert+0x212>
        fractional_part+=50;
      }else if (bit_t==10) {//sign of temperature
    1fe0:	2a 30       	cpi	r18, 0x0A	; 10
    1fe2:	09 f4       	brne	.+2      	; 0x1fe6 <lm73_temp_convert+0x72>
    1fe4:	d4 c0       	rjmp	.+424    	; 0x218e <lm73_temp_convert+0x21a>
        strcat(temp_digits, "-");
      }else{
        integer_part+=(1<<(bit_t-2));//bits 2:9(-2 due to 1st two bits)
    1fe6:	a9 01       	movw	r20, r18
    1fe8:	42 50       	subi	r20, 0x02	; 2
    1fea:	51 09       	sbc	r21, r1
    1fec:	6d 01       	movw	r12, r26
    1fee:	02 c0       	rjmp	.+4      	; 0x1ff4 <lm73_temp_convert+0x80>
    1ff0:	cc 0c       	add	r12, r12
    1ff2:	dd 1c       	adc	r13, r13
    1ff4:	4a 95       	dec	r20
    1ff6:	e2 f7       	brpl	.-8      	; 0x1ff0 <lm73_temp_convert+0x7c>
    1ff8:	ec 0d       	add	r30, r12

  //integer used to keep track of farenheit decimal
  uint8_t farenheit_carry = 0;

  //check each bit to get temperature
  for (uint8_t bit_t = 0; bit_t <11; bit_t++) {
    1ffa:	9b 30       	cpi	r25, 0x0B	; 11
    1ffc:	f9 f6       	brne	.-66     	; 0x1fbc <lm73_temp_convert+0x48>
        integer_part+=(1<<(bit_t-2));//bits 2:9(-2 due to 1st two bits)
      }
    }
  }
  //Farenheit conversion
  if (f_not_c==1) {
    1ffe:	dd 24       	eor	r13, r13
    2000:	d3 94       	inc	r13
    2002:	fd 14       	cp	r15, r13
    2004:	09 f4       	brne	.+2      	; 0x2008 <lm73_temp_convert+0x94>
    2006:	42 c0       	rjmp	.+132    	; 0x208c <lm73_temp_convert+0x118>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2008:	4a e0       	ldi	r20, 0x0A	; 10
    200a:	be 01       	movw	r22, r28
    200c:	6f 5e       	subi	r22, 0xEF	; 239
    200e:	7f 4f       	sbci	r23, 0xFF	; 255
    2010:	8e 2f       	mov	r24, r30
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__itoa_ncheck>
    2018:	4a e0       	ldi	r20, 0x0A	; 10
    201a:	be 01       	movw	r22, r28
    201c:	6f 5f       	subi	r22, 0xFF	; 255
    201e:	7f 4f       	sbci	r23, 0xFF	; 255
    2020:	8e 2d       	mov	r24, r14
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__itoa_ncheck>
  }

  //write value to char array
  itoa(integer_part,ip_arr,10);//convert integer part to ascii
  itoa(fractional_part,fp_arr,10);//convert fractionla part to ascii
  strcat(temp_digits, ip_arr);//concatenate with the main array
    2028:	be 01       	movw	r22, r28
    202a:	6f 5e       	subi	r22, 0xEF	; 239
    202c:	7f 4f       	sbci	r23, 0xFF	; 255
    202e:	c8 01       	movw	r24, r16
    2030:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <strcat>
  strcat(temp_digits, ".");//add decimal point
    2034:	f8 01       	movw	r30, r16
    2036:	01 90       	ld	r0, Z+
    2038:	00 20       	and	r0, r0
    203a:	e9 f7       	brne	.-6      	; 0x2036 <lm73_temp_convert+0xc2>
    203c:	31 97       	sbiw	r30, 0x01	; 1
    203e:	cf 01       	movw	r24, r30
    2040:	80 1b       	sub	r24, r16
    2042:	91 0b       	sbc	r25, r17
    2044:	2e e2       	ldi	r18, 0x2E	; 46
    2046:	20 83       	st	Z, r18
  strcat(temp_digits, fp_arr);//concatenate with main array
    2048:	01 96       	adiw	r24, 0x01	; 1
    204a:	be 01       	movw	r22, r28
    204c:	6f 5f       	subi	r22, 0xFF	; 255
    204e:	7f 4f       	sbci	r23, 0xFF	; 255
    2050:	80 0f       	add	r24, r16
    2052:	91 1f       	adc	r25, r17
    2054:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <strcpy>
  if (f_not_c) {
    2058:	f1 10       	cpse	r15, r1
    205a:	84 c0       	rjmp	.+264    	; 0x2164 <lm73_temp_convert+0x1f0>
    strcat(temp_digits,"F");//Add DEG F
  }else{
    strcat(temp_digits, "C");//ADD DEG C
    205c:	f8 01       	movw	r30, r16
    205e:	01 90       	ld	r0, Z+
    2060:	00 20       	and	r0, r0
    2062:	e9 f7       	brne	.-6      	; 0x205e <lm73_temp_convert+0xea>
    2064:	31 97       	sbiw	r30, 0x01	; 1
    2066:	83 e4       	ldi	r24, 0x43	; 67
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	91 83       	std	Z+1, r25	; 0x01
    206c:	80 83       	st	Z, r24
  }


}//lm73_temp_convert
    206e:	a0 96       	adiw	r28, 0x20	; 32
    2070:	0f b6       	in	r0, 0x3f	; 63
    2072:	f8 94       	cli
    2074:	de bf       	out	0x3e, r29	; 62
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	cd bf       	out	0x3d, r28	; 61
    207a:	df 91       	pop	r29
    207c:	cf 91       	pop	r28
    207e:	1f 91       	pop	r17
    2080:	0f 91       	pop	r16
    2082:	ff 90       	pop	r15
    2084:	ef 90       	pop	r14
    2086:	df 90       	pop	r13
    2088:	cf 90       	pop	r12
    208a:	08 95       	ret
    }
  }
  //Farenheit conversion
  if (f_not_c==1) {
    //Convert decimal part 1st exclusively
    uint8_t farenheit_decimal = (fractional_part*9)/5;
    208c:	29 e0       	ldi	r18, 0x09	; 9
    208e:	e2 9e       	mul	r14, r18
    2090:	c0 01       	movw	r24, r0
    2092:	11 24       	eor	r1, r1
    2094:	65 e0       	ldi	r22, 0x05	; 5
    2096:	70 e0       	ldi	r23, 0x00	; 0
    2098:	0e 94 7f 15 	call	0x2afe	; 0x2afe <__divmodhi4>
    209c:	46 2f       	mov	r20, r22
    if (farenheit_decimal >=100) {
    209e:	64 36       	cpi	r22, 0x64	; 100
    20a0:	08 f0       	brcs	.+2      	; 0x20a4 <lm73_temp_convert+0x130>
    20a2:	6a c0       	rjmp	.+212    	; 0x2178 <lm73_temp_convert+0x204>
  //setup arrays to hold string equivalent of IP(integer part) and FP(fractional part)
  char ip_arr[16];
  char fp_arr[16];

  //integer used to keep track of farenheit decimal
  uint8_t farenheit_carry = 0;
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    // clear_display();//for testing
    // cursor_home();//for testing
    //Convert integer part
    uint16_t farenheit_integer  = (integer_part*90)/5 + 320;
    uint8_t f_decimal_from_int = (farenheit_integer%10) * 10;
    fractional_part +=f_decimal_from_int;//update fraction part
    20a6:	82 e1       	ldi	r24, 0x12	; 18
    20a8:	e8 9f       	mul	r30, r24
    20aa:	70 01       	movw	r14, r0
    20ac:	11 24       	eor	r1, r1
    20ae:	a0 ec       	ldi	r26, 0xC0	; 192
    20b0:	ea 1a       	sub	r14, r26
    20b2:	ae ef       	ldi	r26, 0xFE	; 254
    20b4:	fa 0a       	sbc	r15, r26
    20b6:	97 01       	movw	r18, r14
    20b8:	ad ec       	ldi	r26, 0xCD	; 205
    20ba:	bc ec       	ldi	r27, 0xCC	; 204
    20bc:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <__umulhisi3>
    20c0:	96 95       	lsr	r25
    20c2:	87 95       	ror	r24
    20c4:	96 95       	lsr	r25
    20c6:	87 95       	ror	r24
    20c8:	96 95       	lsr	r25
    20ca:	87 95       	ror	r24
    20cc:	9c 01       	movw	r18, r24
    20ce:	22 0f       	add	r18, r18
    20d0:	33 1f       	adc	r19, r19
    20d2:	88 0f       	add	r24, r24
    20d4:	99 1f       	adc	r25, r25
    20d6:	88 0f       	add	r24, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	88 0f       	add	r24, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	82 0f       	add	r24, r18
    20e0:	93 1f       	adc	r25, r19
    20e2:	e8 1a       	sub	r14, r24
    20e4:	f9 0a       	sbc	r15, r25
    20e6:	f4 2e       	mov	r15, r20
    20e8:	ba e0       	ldi	r27, 0x0A	; 10
    20ea:	eb 9e       	mul	r14, r27
    20ec:	f0 0c       	add	r15, r0
    20ee:	11 24       	eor	r1, r1
    if (fractional_part>=100) {
    20f0:	73 e6       	ldi	r23, 0x63	; 99
    20f2:	c7 2e       	mov	r12, r23
    20f4:	cf 14       	cp	r12, r15
    20f6:	20 f4       	brcc	.+8      	; 0x2100 <lm73_temp_convert+0x18c>
      farenheit_carry++;//increase the farenheit carry
    20f8:	ff 5f       	subi	r31, 0xFF	; 255
      fractional_part-=100;//update fractional part
    20fa:	8c e9       	ldi	r24, 0x9C	; 156
    20fc:	d8 2e       	mov	r13, r24
    20fe:	fd 0c       	add	r15, r13
    2100:	29 e0       	ldi	r18, 0x09	; 9
    2102:	e2 9f       	mul	r30, r18
    2104:	c0 01       	movw	r24, r0
    2106:	11 24       	eor	r1, r1
    2108:	65 e0       	ldi	r22, 0x05	; 5
    210a:	70 e0       	ldi	r23, 0x00	; 0
    210c:	0e 94 7f 15 	call	0x2afe	; 0x2afe <__divmodhi4>
    2110:	80 e2       	ldi	r24, 0x20	; 32
    2112:	86 0f       	add	r24, r22
    2114:	8f 0f       	add	r24, r31
    2116:	4a e0       	ldi	r20, 0x0A	; 10
    2118:	be 01       	movw	r22, r28
    211a:	6f 5e       	subi	r22, 0xEF	; 239
    211c:	7f 4f       	sbci	r23, 0xFF	; 255
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__itoa_ncheck>
    2124:	4a e0       	ldi	r20, 0x0A	; 10
    2126:	be 01       	movw	r22, r28
    2128:	6f 5f       	subi	r22, 0xFF	; 255
    212a:	7f 4f       	sbci	r23, 0xFF	; 255
    212c:	8f 2d       	mov	r24, r15
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__itoa_ncheck>
  }

  //write value to char array
  itoa(integer_part,ip_arr,10);//convert integer part to ascii
  itoa(fractional_part,fp_arr,10);//convert fractionla part to ascii
  strcat(temp_digits, ip_arr);//concatenate with the main array
    2134:	be 01       	movw	r22, r28
    2136:	6f 5e       	subi	r22, 0xEF	; 239
    2138:	7f 4f       	sbci	r23, 0xFF	; 255
    213a:	c8 01       	movw	r24, r16
    213c:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <strcat>
  strcat(temp_digits, ".");//add decimal point
    2140:	f8 01       	movw	r30, r16
    2142:	01 90       	ld	r0, Z+
    2144:	00 20       	and	r0, r0
    2146:	e9 f7       	brne	.-6      	; 0x2142 <lm73_temp_convert+0x1ce>
    2148:	31 97       	sbiw	r30, 0x01	; 1
    214a:	cf 01       	movw	r24, r30
    214c:	80 1b       	sub	r24, r16
    214e:	91 0b       	sbc	r25, r17
    2150:	2e e2       	ldi	r18, 0x2E	; 46
    2152:	20 83       	st	Z, r18
  strcat(temp_digits, fp_arr);//concatenate with main array
    2154:	01 96       	adiw	r24, 0x01	; 1
    2156:	be 01       	movw	r22, r28
    2158:	6f 5f       	subi	r22, 0xFF	; 255
    215a:	7f 4f       	sbci	r23, 0xFF	; 255
    215c:	80 0f       	add	r24, r16
    215e:	91 1f       	adc	r25, r17
    2160:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <strcpy>
  if (f_not_c) {
    strcat(temp_digits,"F");//Add DEG F
    2164:	f8 01       	movw	r30, r16
    2166:	01 90       	ld	r0, Z+
    2168:	00 20       	and	r0, r0
    216a:	e9 f7       	brne	.-6      	; 0x2166 <lm73_temp_convert+0x1f2>
    216c:	31 97       	sbiw	r30, 0x01	; 1
    216e:	86 e4       	ldi	r24, 0x46	; 70
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	91 83       	std	Z+1, r25	; 0x01
    2174:	80 83       	st	Z, r24
    2176:	7b cf       	rjmp	.-266    	; 0x206e <lm73_temp_convert+0xfa>
  if (f_not_c==1) {
    //Convert decimal part 1st exclusively
    uint8_t farenheit_decimal = (fractional_part*9)/5;
    if (farenheit_decimal >=100) {
      farenheit_carry++;
      fractional_part = farenheit_decimal-100;
    2178:	4c e9       	ldi	r20, 0x9C	; 156
    217a:	46 0f       	add	r20, r22
  //Farenheit conversion
  if (f_not_c==1) {
    //Convert decimal part 1st exclusively
    uint8_t farenheit_decimal = (fractional_part*9)/5;
    if (farenheit_decimal >=100) {
      farenheit_carry++;
    217c:	f1 e0       	ldi	r31, 0x01	; 1
    217e:	93 cf       	rjmp	.-218    	; 0x20a6 <lm73_temp_convert+0x132>

  //check each bit to get temperature
  for (uint8_t bit_t = 0; bit_t <11; bit_t++) {
    if (((cleaned_temp>>bit_t)&1)==1) {//bit is a one
      if (bit_t == 0) {//0.25 degrees
        fractional_part+=25;
    2180:	f9 e1       	ldi	r31, 0x19	; 25
    2182:	ef 0e       	add	r14, r31
    2184:	1b cf       	rjmp	.-458    	; 0x1fbc <lm73_temp_convert+0x48>
      }else if (bit_t==1) {//0.50 degrees
        fractional_part+=50;
    2186:	f2 e3       	ldi	r31, 0x32	; 50
    2188:	cf 2e       	mov	r12, r31
    218a:	ec 0c       	add	r14, r12
    218c:	17 cf       	rjmp	.-466    	; 0x1fbc <lm73_temp_convert+0x48>
      }else if (bit_t==10) {//sign of temperature
        strcat(temp_digits, "-");
    218e:	8d e2       	ldi	r24, 0x2D	; 45
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	d8 01       	movw	r26, r16
    2194:	8d 93       	st	X+, r24
    2196:	9c 93       	st	X, r25
    2198:	32 cf       	rjmp	.-412    	; 0x1ffe <lm73_temp_convert+0x8a>

0000219a <read_temperature>:
    This variable holds the temperature value that was read
    from the LM73 temperature sensor
***********************************************************/
uint16_t read_temperature(){
  uint16_t lm73_temperature;//var to hold retun value
  twi_start_rd(LM73_ADDRESS, lm73_rd_buf, 2);
    219a:	42 e0       	ldi	r20, 0x02	; 2
    219c:	60 ef       	ldi	r22, 0xF0	; 240
    219e:	72 e0       	ldi	r23, 0x02	; 2
    21a0:	80 e9       	ldi	r24, 0x90	; 144
    21a2:	0e 94 7f 11 	call	0x22fe	; 0x22fe <twi_start_rd>
  lm73_temperature = lm73_rd_buf[0];//
  lm73_temperature = lm73_temperature<<8;//LS by 8
  lm73_temperature |= lm73_rd_buf[1];

  return lm73_temperature;
    21a6:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <lm73_rd_buf>
    21aa:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <lm73_rd_buf+0x1>
}
    21ae:	98 27       	eor	r25, r24
    21b0:	89 27       	eor	r24, r25
    21b2:	98 27       	eor	r25, r24
    21b4:	08 95       	ret

000021b6 <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
    21b6:	1f 92       	push	r1
    21b8:	0f 92       	push	r0
    21ba:	0f b6       	in	r0, 0x3f	; 63
    21bc:	0f 92       	push	r0
    21be:	11 24       	eor	r1, r1
    21c0:	0b b6       	in	r0, 0x3b	; 59
    21c2:	0f 92       	push	r0
    21c4:	2f 93       	push	r18
    21c6:	3f 93       	push	r19
    21c8:	8f 93       	push	r24
    21ca:	9f 93       	push	r25
    21cc:	af 93       	push	r26
    21ce:	bf 93       	push	r27
    21d0:	ef 93       	push	r30
    21d2:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    21d4:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    21d8:	8e 2f       	mov	r24, r30
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	fc 01       	movw	r30, r24
    21de:	38 97       	sbiw	r30, 0x08	; 8
    21e0:	e1 35       	cpi	r30, 0x51	; 81
    21e2:	f1 05       	cpc	r31, r1
    21e4:	b0 f0       	brcs	.+44     	; 0x2212 <__vector_33+0x5c>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
    21e6:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    21ea:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <twi_state>
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
    21ee:	84 e0       	ldi	r24, 0x04	; 4
    21f0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  }//switch
}//TWI_isr
    21f4:	ff 91       	pop	r31
    21f6:	ef 91       	pop	r30
    21f8:	bf 91       	pop	r27
    21fa:	af 91       	pop	r26
    21fc:	9f 91       	pop	r25
    21fe:	8f 91       	pop	r24
    2200:	3f 91       	pop	r19
    2202:	2f 91       	pop	r18
    2204:	0f 90       	pop	r0
    2206:	0b be       	out	0x3b, r0	; 59
    2208:	0f 90       	pop	r0
    220a:	0f be       	out	0x3f, r0	; 63
    220c:	0f 90       	pop	r0
    220e:	1f 90       	pop	r1
    2210:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    2212:	ea 5b       	subi	r30, 0xBA	; 186
    2214:	ff 4f       	sbci	r31, 0xFF	; 255
    2216:	0c 94 b2 15 	jmp	0x2b64	; 0x2b64 <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
    221a:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <twi_buf_ptr.1780>
    221e:	e0 91 f3 02 	lds	r30, 0x02F3	; 0x8002f3 <twi_buf>
    2222:	f0 91 f4 02 	lds	r31, 0x02F4	; 0x8002f4 <twi_buf+0x1>
    2226:	e8 0f       	add	r30, r24
    2228:	f1 1d       	adc	r31, r1
    222a:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    222e:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
    2230:	84 e9       	ldi	r24, 0x94	; 148
    2232:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;      
    2236:	de cf       	rjmp	.-68     	; 0x21f4 <__vector_33+0x3e>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
    2238:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <twi_bus_addr>
    223c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
      twi_buf_ptr = 0;      //initalize buffer pointer 
    2240:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <twi_buf_ptr.1780>
      TWCR = TWCR_SEND;     //send SLA+RW
    2244:	85 e8       	ldi	r24, 0x85	; 133
    2246:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;
    224a:	d4 cf       	rjmp	.-88     	; 0x21f4 <__vector_33+0x3e>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
    224c:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <twi_buf_ptr.1780>
    2250:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <twi_msg_size>
    2254:	89 17       	cp	r24, r25
    2256:	60 f7       	brcc	.-40     	; 0x2230 <__vector_33+0x7a>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
    2258:	e0 91 f3 02 	lds	r30, 0x02F3	; 0x8002f3 <twi_buf>
    225c:	f0 91 f4 02 	lds	r31, 0x02F4	; 0x8002f4 <twi_buf+0x1>
    2260:	91 e0       	ldi	r25, 0x01	; 1
    2262:	98 0f       	add	r25, r24
    2264:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <twi_buf_ptr.1780>
    2268:	e8 0f       	add	r30, r24
    226a:	f1 1d       	adc	r31, r1
    226c:	80 81       	ld	r24, Z
    226e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
        TWCR = TWCR_SEND;               //send next byte 
    2272:	85 e8       	ldi	r24, 0x85	; 133
    2274:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    2278:	bd cf       	rjmp	.-134    	; 0x21f4 <__vector_33+0x3e>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
    227a:	85 ea       	ldi	r24, 0xA5	; 165
    227c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;
    2280:	b9 cf       	rjmp	.-142    	; 0x21f4 <__vector_33+0x3e>
    2282:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <twi_buf_ptr.1780>
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    2286:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <twi_msg_size>
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	28 17       	cp	r18, r24
    2292:	39 07       	cpc	r19, r25
    2294:	dc f4       	brge	.+54     	; 0x22cc <__vector_33+0x116>
    2296:	85 ec       	ldi	r24, 0xC5	; 197
    2298:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    229c:	ab cf       	rjmp	.-170    	; 0x21f4 <__vector_33+0x3e>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    229e:	e0 91 f3 02 	lds	r30, 0x02F3	; 0x8002f3 <twi_buf>
    22a2:	f0 91 f4 02 	lds	r31, 0x02F4	; 0x8002f4 <twi_buf+0x1>
    22a6:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <twi_buf_ptr.1780>
    22aa:	21 e0       	ldi	r18, 0x01	; 1
    22ac:	28 0f       	add	r18, r24
    22ae:	20 93 83 02 	sts	0x0283, r18	; 0x800283 <twi_buf_ptr.1780>
    22b2:	e8 0f       	add	r30, r24
    22b4:	f1 1d       	adc	r31, r1
    22b6:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    22ba:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    22bc:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <twi_msg_size>
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	01 97       	sbiw	r24, 0x01	; 1
    22c6:	28 17       	cp	r18, r24
    22c8:	39 07       	cpc	r19, r25
    22ca:	2c f3       	brlt	.-54     	; 0x2296 <__vector_33+0xe0>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
    22cc:	85 e8       	ldi	r24, 0x85	; 133
    22ce:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    22d2:	90 cf       	rjmp	.-224    	; 0x21f4 <__vector_33+0x3e>

000022d4 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    22d4:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
}
    22d8:	81 70       	andi	r24, 0x01	; 1
    22da:	08 95       	ret

000022dc <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    22dc:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
    22e0:	90 fd       	sbrc	r25, 0
    22e2:	fc cf       	rjmp	.-8      	; 0x22dc <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
    22e4:	8e 7f       	andi	r24, 0xFE	; 254
    22e6:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <twi_bus_addr>
  twi_buf = twi_data;                   //load pointer to write buffer
    22ea:	70 93 f4 02 	sts	0x02F4, r23	; 0x8002f4 <twi_buf+0x1>
    22ee:	60 93 f3 02 	sts	0x02F3, r22	; 0x8002f3 <twi_buf>
  twi_msg_size = byte_cnt;              //load size of xfer 
    22f2:	40 93 f6 02 	sts	0x02F6, r20	; 0x8002f6 <twi_msg_size>
  TWCR = TWCR_START;                    //initiate START
    22f6:	85 ea       	ldi	r24, 0xA5	; 165
    22f8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    22fc:	08 95       	ret

000022fe <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    22fe:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
    2302:	90 fd       	sbrc	r25, 0
    2304:	fc cf       	rjmp	.-8      	; 0x22fe <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
    2306:	81 60       	ori	r24, 0x01	; 1
    2308:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <twi_bus_addr>
  twi_buf = twi_data;                  //load pointer to write buffer
    230c:	70 93 f4 02 	sts	0x02F4, r23	; 0x8002f4 <twi_buf+0x1>
    2310:	60 93 f3 02 	sts	0x02F3, r22	; 0x8002f3 <twi_buf>
  twi_msg_size = byte_cnt;             //load size of xfer 
    2314:	40 93 f6 02 	sts	0x02F6, r20	; 0x8002f6 <twi_msg_size>
  TWCR = TWCR_START;                   //initiate START
    2318:	85 ea       	ldi	r24, 0xA5	; 165
    231a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    231e:	08 95       	ret

00002320 <init_twi>:
//10K pullups are present on the board
//for alarm clock an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
    2320:	8f ef       	ldi	r24, 0xFF	; 255
    2322:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  TWSR = 0x00;     //prescaler value = 1
    2326:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
  TWBR = TWI_TWBR; //defined in twi_master.h 
    232a:	8c e0       	ldi	r24, 0x0C	; 12
    232c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    2330:	08 95       	ret

00002332 <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    2332:	5d 9b       	sbis	0x0b, 5	; 11
    2334:	fe cf       	rjmp	.-4      	; 0x2332 <uart_putc>
    UDR0 = data;    // Send data byte
    2336:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    2338:	5d 9b       	sbis	0x0b, 5	; 11
    233a:	fe cf       	rjmp	.-4      	; 0x2338 <uart_putc+0x6>
}
    233c:	08 95       	ret

0000233e <uart1_putc>:
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
    233e:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    2342:	95 ff       	sbrs	r25, 5
    2344:	fc cf       	rjmp	.-8      	; 0x233e <uart1_putc>
    UDR1 = data;    // Send data byte
    2346:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
    234a:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    234e:	85 ff       	sbrs	r24, 5
    2350:	fc cf       	rjmp	.-8      	; 0x234a <uart1_putc+0xc>
}
    2352:	08 95       	ret

00002354 <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    2354:	fc 01       	movw	r30, r24
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    2356:	90 81       	ld	r25, Z
    2358:	99 23       	and	r25, r25
    235a:	49 f0       	breq	.+18     	; 0x236e <uart_puts+0x1a>
    235c:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    235e:	5d 9b       	sbis	0x0b, 5	; 11
    2360:	fe cf       	rjmp	.-4      	; 0x235e <uart_puts+0xa>
    UDR0 = data;    // Send data byte
    2362:	9c b9       	out	0x0c, r25	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    2364:	5d 9b       	sbis	0x0b, 5	; 11
    2366:	fe cf       	rjmp	.-4      	; 0x2364 <uart_puts+0x10>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    2368:	91 91       	ld	r25, Z+
    236a:	91 11       	cpse	r25, r1
    236c:	f8 cf       	rjmp	.-16     	; 0x235e <uart_puts+0xa>
    236e:	08 95       	ret

00002370 <uart1_puts>:
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    2370:	fc 01       	movw	r30, r24
    2372:	20 81       	ld	r18, Z
    2374:	22 23       	and	r18, r18
    2376:	71 f0       	breq	.+28     	; 0x2394 <uart1_puts+0x24>
    2378:	31 96       	adiw	r30, 0x01	; 1
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
    237a:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    237e:	95 ff       	sbrs	r25, 5
    2380:	fc cf       	rjmp	.-8      	; 0x237a <uart1_puts+0xa>
    UDR1 = data;    // Send data byte
    2382:	20 93 9c 00 	sts	0x009C, r18	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
    2386:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    238a:	95 ff       	sbrs	r25, 5
    238c:	fc cf       	rjmp	.-8      	; 0x2386 <uart1_puts+0x16>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    238e:	21 91       	ld	r18, Z+
    2390:	21 11       	cpse	r18, r1
    2392:	f3 cf       	rjmp	.-26     	; 0x237a <uart1_puts+0xa>
    2394:	08 95       	ret

00002396 <uart_puts_p>:
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
    2396:	9c 01       	movw	r18, r24
    2398:	fc 01       	movw	r30, r24
    239a:	44 91       	lpm	r20, Z
    239c:	44 23       	and	r20, r20
    239e:	69 f0       	breq	.+26     	; 0x23ba <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
    23a0:	01 96       	adiw	r24, 0x01	; 1
    23a2:	f9 01       	movw	r30, r18
    23a4:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    23a6:	5d 9b       	sbis	0x0b, 5	; 11
    23a8:	fe cf       	rjmp	.-4      	; 0x23a6 <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
    23aa:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    23ac:	5d 9b       	sbis	0x0b, 5	; 11
    23ae:	fe cf       	rjmp	.-4      	; 0x23ac <uart_puts_p+0x16>
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
    23b0:	9c 01       	movw	r18, r24
    23b2:	fc 01       	movw	r30, r24
    23b4:	44 91       	lpm	r20, Z
    23b6:	41 11       	cpse	r20, r1
    23b8:	f3 cf       	rjmp	.-26     	; 0x23a0 <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
    23ba:	08 95       	ret

000023bc <uart_init>:
//Jumpers J14 and J16 (mega128.1) or Jumpers J7 and J9 (mega128.2)
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); //INTERRUPTS ENABLED
    23bc:	8a b1       	in	r24, 0x0a	; 10
    23be:	88 69       	ori	r24, 0x98	; 152
    23c0:	8a b9       	out	0x0a, r24	; 10
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);               //INTERRUPS DISABLED

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
    23c2:	e5 e9       	ldi	r30, 0x95	; 149
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	80 81       	ld	r24, Z
    23c8:	86 60       	ori	r24, 0x06	; 6
    23ca:	80 83       	st	Z, r24
  UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
    23cc:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
    23d0:	87 e6       	ldi	r24, 0x67	; 103
    23d2:	89 b9       	out	0x09, r24	; 9
    23d4:	08 95       	ret

000023d6 <uart1_init>:
//must be in place for the MAX232 chip to get data.

void uart1_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
//UCSR1B |= (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1); //INTERRUPTS ENABLED
  UCSR1B |= (1<<RXEN1) | (1<<TXEN1);               //INTERRUPS DISABLED
    23d6:	ea e9       	ldi	r30, 0x9A	; 154
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	80 81       	ld	r24, Z
    23dc:	88 61       	ori	r24, 0x18	; 24
    23de:	80 83       	st	Z, r24

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);
    23e0:	ed e9       	ldi	r30, 0x9D	; 157
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	86 60       	ori	r24, 0x06	; 6
    23e8:	80 83       	st	Z, r24
  UBRR1H = (BAUDVALUE_1 >>8 ); //load upper byte of the baud rate into UBRR 
    23ea:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
  UBRR1L =  BAUDVALUE_1;       //load lower byte of the baud rate into UBRR 
    23ee:	87 e6       	ldi	r24, 0x67	; 103
    23f0:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    23f4:	08 95       	ret

000023f6 <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    23f6:	80 e8       	ldi	r24, 0x80	; 128
    23f8:	9e e3       	ldi	r25, 0x3E	; 62
    23fa:	02 c0       	rjmp	.+4      	; 0x2400 <uart_getc+0xa>
    23fc:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
    23fe:	21 f0       	breq	.+8      	; 0x2408 <uart_getc+0x12>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    2400:	5f 9b       	sbis	0x0b, 7	; 11
    2402:	fc cf       	rjmp	.-8      	; 0x23fc <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
    2404:	8c b1       	in	r24, 0x0c	; 12
    2406:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
    2408:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
    240a:	08 95       	ret

0000240c <uart1_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
    240c:	80 e8       	ldi	r24, 0x80	; 128
    240e:	9e e3       	ldi	r25, 0x3E	; 62
    2410:	02 c0       	rjmp	.+4      	; 0x2416 <uart1_getc+0xa>
    2412:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
    2414:	39 f0       	breq	.+14     	; 0x2424 <uart1_getc+0x18>
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
    2416:	20 91 9b 00 	lds	r18, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    241a:	27 ff       	sbrs	r18, 7
    241c:	fa cf       	rjmp	.-12     	; 0x2412 <uart1_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
    241e:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    2422:	08 95       	ret
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
  timer++;
  if(timer >= 16000){ return(0);}
    2424:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
}
    2426:	08 95       	ret

00002428 <get_int_status>:
//
//TODO: update for interrupts
//
uint8_t get_int_status(){

    si4734_wr_buf[0] = GET_INT_STATUS;
    2428:	84 e1       	ldi	r24, 0x14	; 20
    242a:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <si4734_wr_buf>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1); //send get_int_status command
    242e:	41 e0       	ldi	r20, 0x01	; 1
    2430:	67 e9       	ldi	r22, 0x97	; 151
    2432:	73 e0       	ldi	r23, 0x03	; 3
    2434:	82 e2       	ldi	r24, 0x22	; 34
    2436:	0e 94 6e 11 	call	0x22dc	; 0x22dc <twi_start_wr>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
    243a:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <twi_busy>
    243e:	81 11       	cpse	r24, r1
    2440:	fc cf       	rjmp	.-8      	; 0x243a <get_int_status+0x12>
    2442:	8f ea       	ldi	r24, 0xAF	; 175
    2444:	94 e0       	ldi	r25, 0x04	; 4
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	f1 f7       	brne	.-4      	; 0x2446 <get_int_status+0x1e>
    244a:	00 c0       	rjmp	.+0      	; 0x244c <get_int_status+0x24>
    244c:	00 00       	nop
    _delay_us(300);        //si4734 process delay
    twi_start_rd(SI4734_ADDRESS, si4734_rd_buf, 1); //get the interrupt status
    244e:	41 e0       	ldi	r20, 0x01	; 1
    2450:	69 eb       	ldi	r22, 0xB9	; 185
    2452:	73 e0       	ldi	r23, 0x03	; 3
    2454:	82 e2       	ldi	r24, 0x22	; 34
    2456:	0e 94 7f 11 	call	0x22fe	; 0x22fe <twi_start_rd>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
    245a:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <twi_busy>
    245e:	81 11       	cpse	r24, r1
    2460:	fc cf       	rjmp	.-8      	; 0x245a <get_int_status+0x32>
    return(si4734_rd_buf[0]);
}
    2462:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <si4734_rd_buf>
    2466:	08 95       	ret

00002468 <fm_tune_freq>:
//
//takes current_fm_freq and sends it to the radio chip
//

void fm_tune_freq(){
  si4734_wr_buf[0] = 0x20;  //fm tune command
    2468:	80 e2       	ldi	r24, 0x20	; 32
    246a:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <si4734_wr_buf>
  si4734_wr_buf[1] = 0x00;  //no FREEZE and no FAST tune
    246e:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <si4734_wr_buf+0x1>
  si4734_wr_buf[2] = (uint8_t)(current_fm_freq >> 8); //freq high byte
    2472:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <current_fm_freq>
    2476:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <current_fm_freq+0x1>
    247a:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <si4734_wr_buf+0x2>
  si4734_wr_buf[3] = (uint8_t)(current_fm_freq);      //freq low byte
    247e:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <si4734_wr_buf+0x3>
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior
    2482:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <si4734_wr_buf+0x4>
  //send fm tune command
  STC_interrupt = FALSE;
    2486:	10 92 b8 03 	sts	0x03B8, r1	; 0x8003b8 <STC_interrupt>
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 5);
    248a:	45 e0       	ldi	r20, 0x05	; 5
    248c:	67 e9       	ldi	r22, 0x97	; 151
    248e:	73 e0       	ldi	r23, 0x03	; 3
    2490:	82 e2       	ldi	r24, 0x22	; 34
    2492:	0e 94 6e 11 	call	0x22dc	; 0x22dc <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2496:	2f ef       	ldi	r18, 0xFF	; 255
    2498:	81 ee       	ldi	r24, 0xE1	; 225
    249a:	94 e0       	ldi	r25, 0x04	; 4
    249c:	21 50       	subi	r18, 0x01	; 1
    249e:	80 40       	sbci	r24, 0x00	; 0
    24a0:	90 40       	sbci	r25, 0x00	; 0
    24a2:	e1 f7       	brne	.-8      	; 0x249c <fm_tune_freq+0x34>
    24a4:	00 c0       	rjmp	.+0      	; 0x24a6 <fm_tune_freq+0x3e>
    24a6:	00 00       	nop
  _delay_ms(100);
  while( ! STC_interrupt ){
    24a8:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <STC_interrupt>
    24ac:	88 23       	and	r24, r24
    24ae:	e1 f3       	breq	.-8      	; 0x24a8 <fm_tune_freq+0x40>
  }; //spin until the tune command finishes
}
    24b0:	08 95       	ret

000024b2 <radio_pwr_dwn>:
//                            radio_pwr_dwn()
//

void radio_pwr_dwn(){
//send fm power down command
    si4734_wr_buf[0] = 0x11;
    24b2:	81 e1       	ldi	r24, 0x11	; 17
    24b4:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <si4734_wr_buf>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
    24b8:	41 e0       	ldi	r20, 0x01	; 1
    24ba:	67 e9       	ldi	r22, 0x97	; 151
    24bc:	73 e0       	ldi	r23, 0x03	; 3
    24be:	82 e2       	ldi	r24, 0x22	; 34
    24c0:	0e 94 6e 11 	call	0x22dc	; 0x22dc <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    24c4:	87 ed       	ldi	r24, 0xD7	; 215
    24c6:	94 e0       	ldi	r25, 0x04	; 4
    24c8:	01 97       	sbiw	r24, 0x01	; 1
    24ca:	f1 f7       	brne	.-4      	; 0x24c8 <radio_pwr_dwn+0x16>
    24cc:	00 c0       	rjmp	.+0      	; 0x24ce <radio_pwr_dwn+0x1c>
    24ce:	00 00       	nop
    24d0:	08 95       	ret

000024d2 <fm_rsq_status>:
//inside the chip.
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_rsq_status(){

    si4734_wr_buf[0] = FM_RSQ_STATUS;            //fm_rsq_status command
    24d2:	83 e2       	ldi	r24, 0x23	; 35
    24d4:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <si4734_wr_buf>
    si4734_wr_buf[1] = FM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    24de:	42 e0       	ldi	r20, 0x02	; 2
    24e0:	67 e9       	ldi	r22, 0x97	; 151
    24e2:	73 e0       	ldi	r23, 0x03	; 3
    24e4:	82 e2       	ldi	r24, 0x22	; 34
    24e6:	0e 94 6e 11 	call	0x22dc	; 0x22dc <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    24ea:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <twi_busy>
    24ee:	81 11       	cpse	r24, r1
    24f0:	fc cf       	rjmp	.-8      	; 0x24ea <fm_rsq_status+0x18>
    24f2:	8f ea       	ldi	r24, 0xAF	; 175
    24f4:	94 e0       	ldi	r25, 0x04	; 4
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	f1 f7       	brne	.-4      	; 0x24f6 <fm_rsq_status+0x24>
    24fa:	00 c0       	rjmp	.+0      	; 0x24fc <fm_rsq_status+0x2a>
    24fc:	00 00       	nop
    _delay_us(300);      //delay for si4734 to process
    //This is a blind wait. Waiting for CTS interrupt here would tell you
    //when the command is received and has been processed.
    //get the fm tune status
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    24fe:	48 e0       	ldi	r20, 0x08	; 8
    2500:	60 ea       	ldi	r22, 0xA0	; 160
    2502:	73 e0       	ldi	r23, 0x03	; 3
    2504:	82 e2       	ldi	r24, 0x22	; 34
    2506:	0e 94 7f 11 	call	0x22fe	; 0x22fe <twi_start_rd>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    250a:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <twi_busy>
    250e:	81 11       	cpse	r24, r1
    2510:	fc cf       	rjmp	.-8      	; 0x250a <fm_rsq_status+0x38>
}
    2512:	08 95       	ret

00002514 <fm_tune_status>:
//is cleared.
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_tune_status(){

    si4734_wr_buf[0] = FM_TUNE_STATUS;            //fm_tune_status command
    2514:	82 e2       	ldi	r24, 0x22	; 34
    2516:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <si4734_wr_buf>
    si4734_wr_buf[1] = FM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
    251a:	81 e0       	ldi	r24, 0x01	; 1
    251c:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    2520:	42 e0       	ldi	r20, 0x02	; 2
    2522:	67 e9       	ldi	r22, 0x97	; 151
    2524:	73 e0       	ldi	r23, 0x03	; 3
    2526:	82 e2       	ldi	r24, 0x22	; 34
    2528:	0e 94 6e 11 	call	0x22dc	; 0x22dc <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    252c:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <twi_busy>
    2530:	81 11       	cpse	r24, r1
    2532:	fc cf       	rjmp	.-8      	; 0x252c <fm_tune_status+0x18>
    2534:	8f ea       	ldi	r24, 0xAF	; 175
    2536:	94 e0       	ldi	r25, 0x04	; 4
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	f1 f7       	brne	.-4      	; 0x2538 <fm_tune_status+0x24>
    253c:	00 c0       	rjmp	.+0      	; 0x253e <fm_tune_status+0x2a>
    253e:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process
    //get the fm tune status
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    2540:	48 e0       	ldi	r20, 0x08	; 8
    2542:	60 ea       	ldi	r22, 0xA0	; 160
    2544:	73 e0       	ldi	r23, 0x03	; 3
    2546:	82 e2       	ldi	r24, 0x22	; 34
    2548:	0e 94 7f 11 	call	0x22fe	; 0x22fe <twi_start_rd>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
    254c:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <twi_busy>
    2550:	81 11       	cpse	r24, r1
    2552:	fc cf       	rjmp	.-8      	; 0x254c <fm_tune_status+0x38>
}
    2554:	08 95       	ret

00002556 <am_tune_status>:
//TODO: could probably just have one tune_status() function
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_tune_status(){

    si4734_wr_buf[0] = AM_TUNE_STATUS;            //fm_tune_status command
    2556:	82 e4       	ldi	r24, 0x42	; 66
    2558:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <si4734_wr_buf>
    si4734_wr_buf[1] = AM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    2562:	42 e0       	ldi	r20, 0x02	; 2
    2564:	67 e9       	ldi	r22, 0x97	; 151
    2566:	73 e0       	ldi	r23, 0x03	; 3
    2568:	82 e2       	ldi	r24, 0x22	; 34
    256a:	0e 94 6e 11 	call	0x22dc	; 0x22dc <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    256e:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <twi_busy>
    2572:	81 11       	cpse	r24, r1
    2574:	fc cf       	rjmp	.-8      	; 0x256e <am_tune_status+0x18>
    2576:	8f ea       	ldi	r24, 0xAF	; 175
    2578:	94 e0       	ldi	r25, 0x04	; 4
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	f1 f7       	brne	.-4      	; 0x257a <am_tune_status+0x24>
    257e:	00 c0       	rjmp	.+0      	; 0x2580 <am_tune_status+0x2a>
    2580:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the am tune status
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    2582:	48 e0       	ldi	r20, 0x08	; 8
    2584:	60 ea       	ldi	r22, 0xA0	; 160
    2586:	73 e0       	ldi	r23, 0x03	; 3
    2588:	82 e2       	ldi	r24, 0x22	; 34
    258a:	0c 94 7f 11 	jmp	0x22fe	; 0x22fe <twi_start_rd>

0000258e <am_rsq_status>:
//
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_rsq_status(){

    si4734_wr_buf[0] = AM_RSQ_STATUS;            //am_rsq_status command
    258e:	83 e4       	ldi	r24, 0x43	; 67
    2590:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <si4734_wr_buf>
    si4734_wr_buf[1] = AM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    259a:	42 e0       	ldi	r20, 0x02	; 2
    259c:	67 e9       	ldi	r22, 0x97	; 151
    259e:	73 e0       	ldi	r23, 0x03	; 3
    25a0:	82 e2       	ldi	r24, 0x22	; 34
    25a2:	0e 94 6e 11 	call	0x22dc	; 0x22dc <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    25a6:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <twi_busy>
    25aa:	81 11       	cpse	r24, r1
    25ac:	fc cf       	rjmp	.-8      	; 0x25a6 <am_rsq_status+0x18>
    25ae:	8f ea       	ldi	r24, 0xAF	; 175
    25b0:	94 e0       	ldi	r25, 0x04	; 4
    25b2:	01 97       	sbiw	r24, 0x01	; 1
    25b4:	f1 f7       	brne	.-4      	; 0x25b2 <am_rsq_status+0x24>
    25b6:	00 c0       	rjmp	.+0      	; 0x25b8 <am_rsq_status+0x2a>
    25b8:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the fm tune status
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    25ba:	48 e0       	ldi	r20, 0x08	; 8
    25bc:	60 ea       	ldi	r22, 0xA0	; 160
    25be:	73 e0       	ldi	r23, 0x03	; 3
    25c0:	82 e2       	ldi	r24, 0x22	; 34
    25c2:	0c 94 7f 11 	jmp	0x22fe	; 0x22fe <twi_start_rd>

000025c6 <set_property>:
//The set property command does not have a indication that it has completed. This
//command is guarnteed by design to finish in 10ms.
//
void set_property(uint16_t property, uint16_t property_value){

    si4734_wr_buf[0] = SET_PROPERTY;                   //set property command
    25c6:	e7 e9       	ldi	r30, 0x97	; 151
    25c8:	f3 e0       	ldi	r31, 0x03	; 3
    25ca:	22 e1       	ldi	r18, 0x12	; 18
    25cc:	20 83       	st	Z, r18
    si4734_wr_buf[1] = 0x00;                           //all zeros
    25ce:	11 82       	std	Z+1, r1	; 0x01
    si4734_wr_buf[2] = (uint8_t)(property >> 8);       //property high byte
    25d0:	92 83       	std	Z+2, r25	; 0x02
    si4734_wr_buf[3] = (uint8_t)(property);            //property low byte
    25d2:	83 83       	std	Z+3, r24	; 0x03
    si4734_wr_buf[4] = (uint8_t)(property_value >> 8); //property value high byte
    25d4:	74 83       	std	Z+4, r23	; 0x04
    si4734_wr_buf[5] = (uint8_t)(property_value);      //property value low byte
    25d6:	65 83       	std	Z+5, r22	; 0x05
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    25d8:	46 e0       	ldi	r20, 0x06	; 6
    25da:	bf 01       	movw	r22, r30
    25dc:	82 e2       	ldi	r24, 0x22	; 34
    25de:	0e 94 6e 11 	call	0x22dc	; 0x22dc <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    25e2:	8f e3       	ldi	r24, 0x3F	; 63
    25e4:	9c e9       	ldi	r25, 0x9C	; 156
    25e6:	01 97       	sbiw	r24, 0x01	; 1
    25e8:	f1 f7       	brne	.-4      	; 0x25e6 <set_property+0x20>
    25ea:	00 c0       	rjmp	.+0      	; 0x25ec <set_property+0x26>
    25ec:	00 00       	nop
    25ee:	08 95       	ret

000025f0 <fm_pwr_up>:
//********************************************************************************
//                            fm_pwr_up()
//
void fm_pwr_up(){
//send fm power up command
  si4734_wr_buf[0] = FM_PWR_UP; //powerup command byte
    25f0:	e7 e9       	ldi	r30, 0x97	; 151
    25f2:	f3 e0       	ldi	r31, 0x03	; 3
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x50;      //GPO2O enabled, STCINT enabled, use ext. 32khz osc.
    25f8:	80 e5       	ldi	r24, 0x50	; 80
    25fa:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;      //OPMODE = 0x05; analog audio output
    25fc:	85 e0       	ldi	r24, 0x05	; 5
    25fe:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    2600:	43 e0       	ldi	r20, 0x03	; 3
    2602:	bf 01       	movw	r22, r30
    2604:	82 e2       	ldi	r24, 0x22	; 34
    2606:	0e 94 6e 11 	call	0x22dc	; 0x22dc <twi_start_wr>
    260a:	2f ef       	ldi	r18, 0xFF	; 255
    260c:	8b ed       	ldi	r24, 0xDB	; 219
    260e:	95 e0       	ldi	r25, 0x05	; 5
    2610:	21 50       	subi	r18, 0x01	; 1
    2612:	80 40       	sbci	r24, 0x00	; 0
    2614:	90 40       	sbci	r25, 0x00	; 0
    2616:	e1 f7       	brne	.-8      	; 0x2610 <fm_pwr_up+0x20>
    2618:	00 c0       	rjmp	.+0      	; 0x261a <fm_pwr_up+0x2a>
    261a:	00 00       	nop
  _delay_ms(120);               //startup delay as specified
  //The seek/tune interrupt is enabled here. If the STCINT bit is set, a 1.5us
  //low pulse will be output from GPIO2/INT when tune or seek is completed.
  set_property(GPO_IEN, GPO_IEN_STCIEN); //seek_tune complete interrupt
    261c:	61 e0       	ldi	r22, 0x01	; 1
    261e:	70 e0       	ldi	r23, 0x00	; 0
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <set_property>

00002628 <am_pwr_up>:
//********************************************************************************
//                            am_pwr_up()
//
void am_pwr_up(){
//send am power up command
  si4734_wr_buf[0] = AM_PWR_UP;
    2628:	e7 e9       	ldi	r30, 0x97	; 151
    262a:	f3 e0       	ldi	r31, 0x03	; 3
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x51;//GPO2OEN and XOSCEN selected
    2630:	81 e5       	ldi	r24, 0x51	; 81
    2632:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;
    2634:	85 e0       	ldi	r24, 0x05	; 5
    2636:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    2638:	43 e0       	ldi	r20, 0x03	; 3
    263a:	bf 01       	movw	r22, r30
    263c:	82 e2       	ldi	r24, 0x22	; 34
    263e:	0e 94 6e 11 	call	0x22dc	; 0x22dc <twi_start_wr>
    2642:	2f ef       	ldi	r18, 0xFF	; 255
    2644:	8b ed       	ldi	r24, 0xDB	; 219
    2646:	95 e0       	ldi	r25, 0x05	; 5
    2648:	21 50       	subi	r18, 0x01	; 1
    264a:	80 40       	sbci	r24, 0x00	; 0
    264c:	90 40       	sbci	r25, 0x00	; 0
    264e:	e1 f7       	brne	.-8      	; 0x2648 <am_pwr_up+0x20>
    2650:	00 c0       	rjmp	.+0      	; 0x2652 <am_pwr_up+0x2a>
    2652:	00 00       	nop
  _delay_ms(120);
  set_property(GPO_IEN, GPO_IEN_STCIEN);    //Seek/Tune Complete interrupt
    2654:	61 e0       	ldi	r22, 0x01	; 1
    2656:	70 e0       	ldi	r23, 0x00	; 0
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <set_property>

00002660 <sw_pwr_up>:
//                            sw_pwr_up()
//

void sw_pwr_up(){
//send sw power up command (same as am, only tuning rate is different)
    si4734_wr_buf[0] = AM_PWR_UP; //same cmd as for AM
    2660:	e7 e9       	ldi	r30, 0x97	; 151
    2662:	f3 e0       	ldi	r31, 0x03	; 3
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	80 83       	st	Z, r24
    si4734_wr_buf[1] = 0x51;
    2668:	81 e5       	ldi	r24, 0x51	; 81
    266a:	81 83       	std	Z+1, r24	; 0x01
    si4734_wr_buf[2] = 0x05;
    266c:	85 e0       	ldi	r24, 0x05	; 5
    266e:	82 83       	std	Z+2, r24	; 0x02
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    2670:	43 e0       	ldi	r20, 0x03	; 3
    2672:	bf 01       	movw	r22, r30
    2674:	82 e2       	ldi	r24, 0x22	; 34
    2676:	0e 94 6e 11 	call	0x22dc	; 0x22dc <twi_start_wr>
    267a:	2f ef       	ldi	r18, 0xFF	; 255
    267c:	8b ed       	ldi	r24, 0xDB	; 219
    267e:	95 e0       	ldi	r25, 0x05	; 5
    2680:	21 50       	subi	r18, 0x01	; 1
    2682:	80 40       	sbci	r24, 0x00	; 0
    2684:	90 40       	sbci	r25, 0x00	; 0
    2686:	e1 f7       	brne	.-8      	; 0x2680 <sw_pwr_up+0x20>
    2688:	00 c0       	rjmp	.+0      	; 0x268a <sw_pwr_up+0x2a>
    268a:	00 00       	nop
    _delay_ms(120);   //start up delay

  //set property to disable soft muting for shortwave broadcasts
  set_property(AM_SOFT_MUTE_MAX_ATTENUATION, 0x0000); //cut off soft mute
    268c:	60 e0       	ldi	r22, 0x00	; 0
    268e:	70 e0       	ldi	r23, 0x00	; 0
    2690:	82 e0       	ldi	r24, 0x02	; 2
    2692:	93 e3       	ldi	r25, 0x33	; 51
    2694:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <set_property>
  //select 4khz filter BW and engage power line filter
  set_property(AM_CHANNEL_FILTER, (AM_CHFILT_4KHZ | AM_PWR_LINE_NOISE_REJT_FILTER));
    2698:	61 e0       	ldi	r22, 0x01	; 1
    269a:	71 e0       	ldi	r23, 0x01	; 1
    269c:	82 e0       	ldi	r24, 0x02	; 2
    269e:	91 e3       	ldi	r25, 0x31	; 49
    26a0:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <set_property>
  set_property(GPO_IEN, GPO_IEN_STCIEN); //Seek/Tune Complete interrupt
    26a4:	61 e0       	ldi	r22, 0x01	; 1
    26a6:	70 e0       	ldi	r23, 0x00	; 0
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <set_property>

000026b0 <get_rev>:
//TODO: UNTESTED!
//Report the chip revision info via uart1. UART1 be setup and connected to
//a dumb terminal. e.g.: screen /dev/cu.usbserial-A800fh27 9600
//
void get_rev(){
    si4734_wr_buf[0] = GET_REV;                   //get rev command
    26b0:	80 e1       	ldi	r24, 0x10	; 16
    26b2:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <si4734_wr_buf>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
    26b6:	41 e0       	ldi	r20, 0x01	; 1
    26b8:	67 e9       	ldi	r22, 0x97	; 151
    26ba:	73 e0       	ldi	r23, 0x03	; 3
    26bc:	82 e2       	ldi	r24, 0x22	; 34
    26be:	0e 94 6e 11 	call	0x22dc	; 0x22dc <twi_start_wr>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
    26c2:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <twi_busy>
    26c6:	81 11       	cpse	r24, r1
    26c8:	fc cf       	rjmp	.-8      	; 0x26c2 <get_rev+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    26ca:	8f ea       	ldi	r24, 0xAF	; 175
    26cc:	94 e0       	ldi	r25, 0x04	; 4
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	f1 f7       	brne	.-4      	; 0x26ce <get_rev+0x1e>
    26d2:	00 c0       	rjmp	.+0      	; 0x26d4 <get_rev+0x24>
    26d4:	00 00       	nop
    _delay_us(300);        //wait for processing delay
//get the revision info
    twi_start_rd(SI4734_ADDRESS, si4734_revision_buf, 8);
    26d6:	48 e0       	ldi	r20, 0x08	; 8
    26d8:	68 ea       	ldi	r22, 0xA8	; 168
    26da:	73 e0       	ldi	r23, 0x03	; 3
    26dc:	82 e2       	ldi	r24, 0x22	; 34
    26de:	0e 94 7f 11 	call	0x22fe	; 0x22fe <twi_start_rd>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
    26e2:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <twi_busy>
    26e6:	81 11       	cpse	r24, r1
    26e8:	fc cf       	rjmp	.-8      	; 0x26e2 <get_rev+0x32>
//use TABs instead?
    uart1_puts("Si4734 Rev:  last 2 digits of part no.   chip rev     \n\r");
    26ea:	82 e4       	ldi	r24, 0x42	; 66
    26ec:	91 e0       	ldi	r25, 0x01	; 1
    26ee:	0e 94 b8 11 	call	0x2370	; 0x2370 <uart1_puts>
    uart1_puts("             -------------------------   --------     \n\r");
    26f2:	8b e7       	ldi	r24, 0x7B	; 123
    26f4:	91 e0       	ldi	r25, 0x01	; 1
    26f6:	0e 94 b8 11 	call	0x2370	; 0x2370 <uart1_puts>
    uart1_puts("                          "); itoa((int)si4734_revision_buf[1], uart1_tx_buf, 10); uart1_puts(uart1_tx_buf);
    26fa:	84 eb       	ldi	r24, 0xB4	; 180
    26fc:	91 e0       	ldi	r25, 0x01	; 1
    26fe:	0e 94 b8 11 	call	0x2370	; 0x2370 <uart1_puts>
    2702:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <si4734_revision_buf+0x1>
    2706:	4a e0       	ldi	r20, 0x0A	; 10
    2708:	6f e1       	ldi	r22, 0x1F	; 31
    270a:	73 e0       	ldi	r23, 0x03	; 3
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__itoa_ncheck>
    2712:	8f e1       	ldi	r24, 0x1F	; 31
    2714:	93 e0       	ldi	r25, 0x03	; 3
    2716:	0e 94 b8 11 	call	0x2370	; 0x2370 <uart1_puts>
    uart1_puts("             "); itoa((int)si4734_revision_buf[2], uart1_tx_buf, 10); uart1_puts(uart1_tx_buf); uart1_puts("\n\r");
    271a:	81 ec       	ldi	r24, 0xC1	; 193
    271c:	91 e0       	ldi	r25, 0x01	; 1
    271e:	0e 94 b8 11 	call	0x2370	; 0x2370 <uart1_puts>
    2722:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <si4734_revision_buf+0x2>
    2726:	4a e0       	ldi	r20, 0x0A	; 10
    2728:	6f e1       	ldi	r22, 0x1F	; 31
    272a:	73 e0       	ldi	r23, 0x03	; 3
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__itoa_ncheck>
    2732:	8f e1       	ldi	r24, 0x1F	; 31
    2734:	93 e0       	ldi	r25, 0x03	; 3
    2736:	0e 94 b8 11 	call	0x2370	; 0x2370 <uart1_puts>
    273a:	81 eb       	ldi	r24, 0xB1	; 177
    273c:	91 e0       	ldi	r25, 0x01	; 1
    273e:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <uart1_puts>

00002742 <get_fm_rsq_status>:
    2742:	ff 92       	push	r15
    2744:	0f 93       	push	r16
    2746:	1f 93       	push	r17
    2748:	cf 93       	push	r28
    274a:	df 93       	push	r29
    274c:	cd b7       	in	r28, 0x3d	; 61
    274e:	de b7       	in	r29, 0x3e	; 62
    2750:	a8 97       	sbiw	r28, 0x28	; 40
    2752:	0f b6       	in	r0, 0x3f	; 63
    2754:	f8 94       	cli
    2756:	de bf       	out	0x3e, r29	; 62
    2758:	0f be       	out	0x3f, r0	; 63
    275a:	cd bf       	out	0x3d, r28	; 61
    275c:	8f ec       	ldi	r24, 0xCF	; 207
    275e:	91 e0       	ldi	r25, 0x01	; 1
    2760:	0e 94 b8 11 	call	0x2370	; 0x2370 <uart1_puts>
    2764:	8f ed       	ldi	r24, 0xDF	; 223
    2766:	91 e0       	ldi	r25, 0x01	; 1
    2768:	0e 94 b8 11 	call	0x2370	; 0x2370 <uart1_puts>
    276c:	00 ea       	ldi	r16, 0xA0	; 160
    276e:	13 e0       	ldi	r17, 0x03	; 3
    2770:	f8 01       	movw	r30, r16
    2772:	80 81       	ld	r24, Z
    2774:	40 e1       	ldi	r20, 0x10	; 16
    2776:	6f e1       	ldi	r22, 0x1F	; 31
    2778:	73 e0       	ldi	r23, 0x03	; 3
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__itoa_ncheck>
    2780:	8f e1       	ldi	r24, 0x1F	; 31
    2782:	93 e0       	ldi	r25, 0x03	; 3
    2784:	0e 94 b8 11 	call	0x2370	; 0x2370 <uart1_puts>
    2788:	81 eb       	ldi	r24, 0xB1	; 177
    278a:	91 e0       	ldi	r25, 0x01	; 1
    278c:	0e 94 b8 11 	call	0x2370	; 0x2370 <uart1_puts>
    2790:	8f ee       	ldi	r24, 0xEF	; 239
    2792:	91 e0       	ldi	r25, 0x01	; 1
    2794:	0e 94 b8 11 	call	0x2370	; 0x2370 <uart1_puts>
    2798:	f8 01       	movw	r30, r16
    279a:	81 81       	ldd	r24, Z+1	; 0x01
    279c:	4a e0       	ldi	r20, 0x0A	; 10
    279e:	6f e1       	ldi	r22, 0x1F	; 31
    27a0:	73 e0       	ldi	r23, 0x03	; 3
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__itoa_ncheck>
    27a8:	8f e1       	ldi	r24, 0x1F	; 31
    27aa:	93 e0       	ldi	r25, 0x03	; 3
    27ac:	0e 94 b8 11 	call	0x2370	; 0x2370 <uart1_puts>
    27b0:	81 eb       	ldi	r24, 0xB1	; 177
    27b2:	91 e0       	ldi	r25, 0x01	; 1
    27b4:	0e 94 b8 11 	call	0x2370	; 0x2370 <uart1_puts>
    27b8:	f8 01       	movw	r30, r16
    27ba:	f3 80       	ldd	r15, Z+3	; 0x03
    27bc:	8f ef       	ldi	r24, 0xFF	; 255
    27be:	91 e0       	ldi	r25, 0x01	; 1
    27c0:	0e 94 b8 11 	call	0x2370	; 0x2370 <uart1_puts>
    27c4:	4a e0       	ldi	r20, 0x0A	; 10
    27c6:	6f e1       	ldi	r22, 0x1F	; 31
    27c8:	73 e0       	ldi	r23, 0x03	; 3
    27ca:	8f 2d       	mov	r24, r15
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__itoa_ncheck>
    27d2:	8f e1       	ldi	r24, 0x1F	; 31
    27d4:	93 e0       	ldi	r25, 0x03	; 3
    27d6:	0e 94 b8 11 	call	0x2370	; 0x2370 <uart1_puts>
    27da:	81 eb       	ldi	r24, 0xB1	; 177
    27dc:	91 e0       	ldi	r25, 0x01	; 1
    27de:	0e 94 b8 11 	call	0x2370	; 0x2370 <uart1_puts>
    27e2:	8f e0       	ldi	r24, 0x0F	; 15
    27e4:	92 e0       	ldi	r25, 0x02	; 2
    27e6:	0e 94 b8 11 	call	0x2370	; 0x2370 <uart1_puts>
    27ea:	f8 01       	movw	r30, r16
    27ec:	82 81       	ldd	r24, Z+2	; 0x02
    27ee:	40 e1       	ldi	r20, 0x10	; 16
    27f0:	be 01       	movw	r22, r28
    27f2:	6f 5f       	subi	r22, 0xFF	; 255
    27f4:	7f 4f       	sbci	r23, 0xFF	; 255
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__itoa_ncheck>
    27fc:	ce 01       	movw	r24, r28
    27fe:	01 96       	adiw	r24, 0x01	; 1
    2800:	0e 94 b8 11 	call	0x2370	; 0x2370 <uart1_puts>
    2804:	81 eb       	ldi	r24, 0xB1	; 177
    2806:	91 e0       	ldi	r25, 0x01	; 1
    2808:	0e 94 b8 11 	call	0x2370	; 0x2370 <uart1_puts>
    280c:	8f e1       	ldi	r24, 0x1F	; 31
    280e:	92 e0       	ldi	r25, 0x02	; 2
    2810:	0e 94 b8 11 	call	0x2370	; 0x2370 <uart1_puts>
    2814:	f8 01       	movw	r30, r16
    2816:	83 81       	ldd	r24, Z+3	; 0x03
    2818:	40 e1       	ldi	r20, 0x10	; 16
    281a:	be 01       	movw	r22, r28
    281c:	6f 5f       	subi	r22, 0xFF	; 255
    281e:	7f 4f       	sbci	r23, 0xFF	; 255
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__itoa_ncheck>
    2826:	ce 01       	movw	r24, r28
    2828:	01 96       	adiw	r24, 0x01	; 1
    282a:	0e 94 b8 11 	call	0x2370	; 0x2370 <uart1_puts>
    282e:	81 eb       	ldi	r24, 0xB1	; 177
    2830:	91 e0       	ldi	r25, 0x01	; 1
    2832:	0e 94 b8 11 	call	0x2370	; 0x2370 <uart1_puts>
    2836:	8f e2       	ldi	r24, 0x2F	; 47
    2838:	92 e0       	ldi	r25, 0x02	; 2
    283a:	0e 94 b8 11 	call	0x2370	; 0x2370 <uart1_puts>
    283e:	f8 01       	movw	r30, r16
    2840:	84 81       	ldd	r24, Z+4	; 0x04
    2842:	40 e1       	ldi	r20, 0x10	; 16
    2844:	6f e1       	ldi	r22, 0x1F	; 31
    2846:	73 e0       	ldi	r23, 0x03	; 3
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__itoa_ncheck>
    284e:	8f e1       	ldi	r24, 0x1F	; 31
    2850:	93 e0       	ldi	r25, 0x03	; 3
    2852:	0e 94 b8 11 	call	0x2370	; 0x2370 <uart1_puts>
    2856:	81 eb       	ldi	r24, 0xB1	; 177
    2858:	91 e0       	ldi	r25, 0x01	; 1
    285a:	0e 94 b8 11 	call	0x2370	; 0x2370 <uart1_puts>
    285e:	a8 96       	adiw	r28, 0x28	; 40
    2860:	0f b6       	in	r0, 0x3f	; 63
    2862:	f8 94       	cli
    2864:	de bf       	out	0x3e, r29	; 62
    2866:	0f be       	out	0x3f, r0	; 63
    2868:	cd bf       	out	0x3d, r28	; 61
    286a:	df 91       	pop	r29
    286c:	cf 91       	pop	r28
    286e:	1f 91       	pop	r17
    2870:	0f 91       	pop	r16
    2872:	ff 90       	pop	r15
    2874:	08 95       	ret

00002876 <main>:
//***********************************************************************
//                           init_tcnt0
//***********************************************************************
//initalize timer/counter zero to normal mode
void init_tcnt0(){
  ASSR  |= (1<<AS0);//run off external 32kHz osc
    2876:	80 b7       	in	r24, 0x30	; 48
    2878:	88 60       	ori	r24, 0x08	; 8
    287a:	80 bf       	out	0x30, r24	; 48
  TIMSK |= (1<<TOIE0);//overflow interrup
    287c:	87 b7       	in	r24, 0x37	; 55
    287e:	81 60       	ori	r24, 0x01	; 1
    2880:	87 bf       	out	0x37, r24	; 55
  TCCR0 |= (1<<CS00);//Normal mode, no prescale
    2882:	83 b7       	in	r24, 0x33	; 51
    2884:	81 60       	ori	r24, 0x01	; 1
    2886:	83 bf       	out	0x33, r24	; 51
//***********************************************************************
//                           init_tcnt2
//***********************************************************************
void init_tcnt2(){
  //Fast PWM, Non-inverting mode on OC2(PB7),CLKio/1024 prescale, uC clock
  TCCR2 |= (1<<WGM21)|(1<<WGM20)|(1<<COM21)|(1<<COM20)|(0<<CS20)|(0<<CS21)|(1<<CS22);
    2888:	85 b5       	in	r24, 0x25	; 37
    288a:	8c 67       	ori	r24, 0x7C	; 124
    288c:	85 bd       	out	0x25, r24	; 37
  TIMSK |= (1<<TOIE2);//overflow interrupt
    288e:	87 b7       	in	r24, 0x37	; 55
    2890:	80 64       	ori	r24, 0x40	; 64
    2892:	87 bf       	out	0x37, r24	; 55
  OCR2  |= 127;//initalize to half of the total scale (0-255)
    2894:	83 b5       	in	r24, 0x23	; 35
    2896:	8f 67       	ori	r24, 0x7F	; 127
    2898:	83 bd       	out	0x23, r24	; 35
//***********************************************************************
//                           init_tcnt1
//***********************************************************************
void init_tcnt1(){
  //CTC mode,no prescale, Normal port operation
  TCCR1B |= (1<<WGM12)|(1<<CS10);
    289a:	8e b5       	in	r24, 0x2e	; 46
    289c:	89 60       	ori	r24, 0x09	; 9
    289e:	8e bd       	out	0x2e, r24	; 46
  TIMSK  |= (1<<OCIE1A);// Output compare A match
    28a0:	87 b7       	in	r24, 0x37	; 55
    28a2:	80 61       	ori	r24, 0x10	; 16
    28a4:	87 bf       	out	0x37, r24	; 55
  OCR1A   = 0x1F3F;//7999 for 1Khz wave
    28a6:	8f e3       	ldi	r24, 0x3F	; 63
    28a8:	9f e1       	ldi	r25, 0x1F	; 31
    28aa:	9b bd       	out	0x2b, r25	; 43
    28ac:	8a bd       	out	0x2a, r24	; 42
//***********************************************************************
//                           init_tcnt3
//***********************************************************************
void init_tcnt3(){
  //Non-inverting mode //FAST PWM, 8-bit, no prescale
  TCCR3A |= (1<<COM3A1)|(0<<COM3A0)|(0<<WGM31)|(1<<WGM30);
    28ae:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    28b2:	81 68       	ori	r24, 0x81	; 129
    28b4:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  TCCR3B |= (0<<WGM33)|(1<<WGM32)|(1<<CS30);
    28b8:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    28bc:	89 60       	ori	r24, 0x09	; 9
    28be:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
  ETIMSK |= (1<<TOIE3);//overflow interrup
    28c2:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <__TEXT_REGION_LENGTH__+0x7e007d>
    28c6:	84 60       	ori	r24, 0x04	; 4
    28c8:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x7e007d>
  OCR3A =  127;//Vout = OCR3A*(0.0198)+0.022
    28cc:	8f e7       	ldi	r24, 0x7F	; 127
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    28d4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
  This function will setup the Analog-to-digital conveter
Parameters: NONE
Return: void
***************************************************************/
void adc_init(){
  DDRF  &= ~(_BV(DDF7));//make port F bit 7 is ADC input
    28d8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    28dc:	8f 77       	andi	r24, 0x7F	; 127
    28de:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  PORTF &= ~(_BV(PF7));// port F bit 7 pullups must be off
    28e2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    28e6:	8f 77       	andi	r24, 0x7F	; 127
    28e8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  ADMUX |= (1<<REFS0)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0) ;//single-ended, input PORTF bit 7, right adjusted, 10 bits
    28ec:	87 b1       	in	r24, 0x07	; 7
    28ee:	87 64       	ori	r24, 0x47	; 71
    28f0:	87 b9       	out	0x07, r24	; 7
  ADCSRA|= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);//ADC enabled, division factor 128
    28f2:	86 b1       	in	r24, 0x06	; 6
    28f4:	87 68       	ori	r24, 0x87	; 135
    28f6:	86 b9       	out	0x06, r24	; 6
  display to work correctly
Parameters: NONE
Return:void
***************************************************************/
void lcd_ports(){
  DDRF  |= 0x08;  //port F bit 3 is enable for LCD
    28f8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    28fc:	88 60       	ori	r24, 0x08	; 8
    28fe:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  PORTF &= 0xF7;  //port F bit 3 is initially low
    2902:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    2906:	87 7f       	andi	r24, 0xF7	; 247
    2908:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  init_tcnt2();//initalize timer/counter 2
  init_tcnt1();//initialize timer/coutner 1
  init_tcnt3();//initialize timer/counter 3
  adc_init();//initalize AD
  lcd_ports();//initalize LCD ports
  uart_init();//initialize UART
    290c:	0e 94 de 11 	call	0x23bc	; 0x23bc <uart_init>
  DDRB |= 0xC0;//OE_EN(pb6), PWM(pb7)
    2910:	87 b3       	in	r24, 0x17	; 23
    2912:	80 6c       	ori	r24, 0xC0	; 192
    2914:	87 bb       	out	0x17, r24	; 23
//***********************************************************************
//                            spi_init
//**********************************************************************
void spi_init(void){
  //PORTB ouput: ss(pb0), MOSI(pb2), sclk(pb1)
  DDRB  |= (1<<BIT0)|(1<<BIT1)|(1<<BIT2);
    2916:	87 b3       	in	r24, 0x17	; 23
    2918:	87 60       	ori	r24, 0x07	; 7
    291a:	87 bb       	out	0x17, r24	; 23
  SPCR   = (1<<SPE) | (1<<MSTR) ; //master mode, clk low on idle, leading edge sample
    291c:	80 e5       	ldi	r24, 0x50	; 80
    291e:	8d b9       	out	0x0d, r24	; 13
  SPSR   = (1<<SPI2X); //choose double speed operation
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	8e b9       	out	0x0e, r24	; 14
  adc_init();//initalize AD
  lcd_ports();//initalize LCD ports
  uart_init();//initialize UART
  DDRB |= 0xC0;//OE_EN(pb6), PWM(pb7)
  spi_init();//initialize SPI
  lcd_init();
    2924:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <lcd_init>
  init_twi();
    2928:	0e 94 90 11 	call	0x2320	; 0x2320 <init_twi>
  clear_display();
    292c:	0e 94 98 0c 	call	0x1930	; 0x1930 <clear_display>
  DDRC = 0x70;//set PORTC(4(SEL0),5(SEL1),6(SEL2)) as output (never changes)
    2930:	80 e7       	ldi	r24, 0x70	; 112
    2932:	84 bb       	out	0x14, r24	; 20
  DDRE = 0x6C;//set PORTE PIN 5,6,3,2 as ouputs(never changes)
    2934:	8c e6       	ldi	r24, 0x6C	; 108
    2936:	82 b9       	out	0x02, r24	; 2
  PORTE =0x64;//set SH/LD and CLK_INH high (low enabled), Reset Radio on powerup(BIT2 high)
    2938:	84 e6       	ldi	r24, 0x64	; 100
    293a:	83 b9       	out	0x03, r24	; 3
  DDRD = 0x4;//set pin 0 on PORTD as output
    293c:	84 e0       	ldi	r24, 0x04	; 4
    293e:	81 bb       	out	0x11, r24	; 17
  uint8_t digit_sel = 0;//digit select
  segment_data[2] =0xFC;//initalize colon ON
    2940:	8c ef       	ldi	r24, 0xFC	; 252
    2942:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <segment_data+0x2>
  //Enable interrupt 7
  EICRB |= (1<<BIT7) | (1<<BIT6);
    2946:	8a b7       	in	r24, 0x3a	; 58
    2948:	80 6c       	ori	r24, 0xC0	; 192
    294a:	8a bf       	out	0x3a, r24	; 58
  EIMSK|= (1<<BIT7);
    294c:	89 b7       	in	r24, 0x39	; 57
    294e:	80 68       	ori	r24, 0x80	; 128
    2950:	89 bf       	out	0x39, r24	; 57
  radio_init_m();//initialize radio
    2952:	0e 94 c7 00 	call	0x18e	; 0x18e <radio_init_m>
  sei();//enable global interruts
    2956:	78 94       	sei
  clear_display();
  DDRC = 0x70;//set PORTC(4(SEL0),5(SEL1),6(SEL2)) as output (never changes)
  DDRE = 0x6C;//set PORTE PIN 5,6,3,2 as ouputs(never changes)
  PORTE =0x64;//set SH/LD and CLK_INH high (low enabled), Reset Radio on powerup(BIT2 high)
  DDRD = 0x4;//set pin 0 on PORTD as output
  uint8_t digit_sel = 0;//digit select
    2958:	c0 e0       	ldi	r28, 0x00	; 0
Return:void
***************************************************************/
void display_mode(){
  SPDR = rssi;//write value to register
  while(bit_is_clear(SPSR,SPIF)){}//wait until data is sent
  PORTB ^=(1<<BIT0);//send rising edge to regclk on HC595
    295a:	11 e0       	ldi	r17, 0x01	; 1
    display_mode();//display mode on bargraph

    if (digit_sel>4) {//bound diigit select 0-4
      digit_sel =0;
    }
    DDRA = 0xFF;//make PORTA output for Seven Segment
    295c:	0f ef       	ldi	r16, 0xFF	; 255
    PORTA = segment_data[digit_sel];//send 7 segment code to LED segments
    //send PORTC the digit to display & power ON to seven seg(bit7=0)
    if (digit_sel == 0) {
      PORTC = 0b01000000;//Hours Tens digit
    295e:	80 e4       	ldi	r24, 0x40	; 64
    2960:	f8 2e       	mov	r15, r24
    }else if (digit_sel==1) {
      PORTC = 0b00110000;//Hours Ones  digit
    }else if (digit_sel==2) {
      PORTC = 0b00100000;//colon digit
    }else if (digit_sel==3) {
      PORTC = 0b00010000;//Minsutes tens digit
    2962:	90 e1       	ldi	r25, 0x10	; 16
    2964:	c9 2e       	mov	r12, r25
    if (digit_sel == 0) {
      PORTC = 0b01000000;//Hours Tens digit
    }else if (digit_sel==1) {
      PORTC = 0b00110000;//Hours Ones  digit
    }else if (digit_sel==2) {
      PORTC = 0b00100000;//colon digit
    2966:	20 e2       	ldi	r18, 0x20	; 32
    2968:	d2 2e       	mov	r13, r18
    PORTA = segment_data[digit_sel];//send 7 segment code to LED segments
    //send PORTC the digit to display & power ON to seven seg(bit7=0)
    if (digit_sel == 0) {
      PORTC = 0b01000000;//Hours Tens digit
    }else if (digit_sel==1) {
      PORTC = 0b00110000;//Hours Ones  digit
    296a:	30 e3       	ldi	r19, 0x30	; 48
    296c:	e3 2e       	mov	r14, r19
        if(rssi<=24) {rssi = 0xC0;} else
        if(rssi<=32) {rssi = 0xE0;} else
        if(rssi<=40) {rssi = 0xF0;} else
        if(rssi<=48) {rssi = 0xF8;} else
        if(rssi<=56) {rssi = 0xFC;} else
        if(rssi<=64) {rssi = 0xFE;} else
    296e:	4e ef       	ldi	r20, 0xFE	; 254
    2970:	94 2e       	mov	r9, r20
        if(rssi<=16) {rssi = 0x80;} else
        if(rssi<=24) {rssi = 0xC0;} else
        if(rssi<=32) {rssi = 0xE0;} else
        if(rssi<=40) {rssi = 0xF0;} else
        if(rssi<=48) {rssi = 0xF8;} else
        if(rssi<=56) {rssi = 0xFC;} else
    2972:	5c ef       	ldi	r21, 0xFC	; 252
    2974:	a5 2e       	mov	r10, r21
        if(rssi<= 8) {rssi = 0x00;} else
        if(rssi<=16) {rssi = 0x80;} else
        if(rssi<=24) {rssi = 0xC0;} else
        if(rssi<=32) {rssi = 0xE0;} else
        if(rssi<=40) {rssi = 0xF0;} else
        if(rssi<=48) {rssi = 0xF8;} else
    2976:	68 ef       	ldi	r22, 0xF8	; 248
    2978:	b6 2e       	mov	r11, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    297a:	8f e3       	ldi	r24, 0x3F	; 63
    297c:	9f e1       	ldi	r25, 0x1F	; 31
    297e:	01 97       	sbiw	r24, 0x01	; 1
    2980:	f1 f7       	brne	.-4      	; 0x297e <main+0x108>
    2982:	00 c0       	rjmp	.+0      	; 0x2984 <main+0x10e>
    2984:	00 00       	nop
  radio_init_m();//initialize radio
  sei();//enable global interruts

  while (1) {
    _delay_ms(2);
    decode_time();//break up the time to 4, BCD digits in the array
    2986:	0e 94 be 02 	call	0x57c	; 0x57c <decode_time>
  SPI protocol
Parameters: NONE
Return:void
***************************************************************/
void display_mode(){
  SPDR = rssi;//write value to register
    298a:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <rssi>
    298e:	8f b9       	out	0x0f, r24	; 15
  while(bit_is_clear(SPSR,SPIF)){}//wait until data is sent
    2990:	77 9b       	sbis	0x0e, 7	; 14
    2992:	fe cf       	rjmp	.-4      	; 0x2990 <main+0x11a>
  PORTB ^=(1<<BIT0);//send rising edge to regclk on HC595
    2994:	88 b3       	in	r24, 0x18	; 24
    2996:	81 27       	eor	r24, r17
    2998:	88 bb       	out	0x18, r24	; 24
  PORTB ^=(1<<BIT0);//send falling edge to reglck on HC595
    299a:	88 b3       	in	r24, 0x18	; 24
    299c:	81 27       	eor	r24, r17
    299e:	88 bb       	out	0x18, r24	; 24
    display_mode();//display mode on bargraph

    if (digit_sel>4) {//bound diigit select 0-4
      digit_sel =0;
    }
    DDRA = 0xFF;//make PORTA output for Seven Segment
    29a0:	0a bb       	out	0x1a, r16	; 26
  while (1) {
    _delay_ms(2);
    decode_time();//break up the time to 4, BCD digits in the array
    display_mode();//display mode on bargraph

    if (digit_sel>4) {//bound diigit select 0-4
    29a2:	c5 30       	cpi	r28, 0x05	; 5
    29a4:	00 f5       	brcc	.+64     	; 0x29e6 <main+0x170>
      digit_sel =0;
    }
    DDRA = 0xFF;//make PORTA output for Seven Segment
    PORTA = segment_data[digit_sel];//send 7 segment code to LED segments
    29a6:	ec 2f       	mov	r30, r28
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	e7 54       	subi	r30, 0x47	; 71
    29ac:	fd 4f       	sbci	r31, 0xFD	; 253
    29ae:	80 81       	ld	r24, Z
    29b0:	8b bb       	out	0x1b, r24	; 27
    //send PORTC the digit to display & power ON to seven seg(bit7=0)
    if (digit_sel == 0) {
    29b2:	cc 23       	and	r28, r28
    29b4:	d9 f0       	breq	.+54     	; 0x29ec <main+0x176>
      PORTC = 0b01000000;//Hours Tens digit
    }else if (digit_sel==1) {
    29b6:	c1 30       	cpi	r28, 0x01	; 1
    29b8:	f1 f1       	breq	.+124    	; 0x2a36 <main+0x1c0>
      PORTC = 0b00110000;//Hours Ones  digit
    }else if (digit_sel==2) {
    29ba:	c2 30       	cpi	r28, 0x02	; 2
    29bc:	f9 f1       	breq	.+126    	; 0x2a3c <main+0x1c6>
      PORTC = 0b00100000;//colon digit
    }else if (digit_sel==3) {
    29be:	c3 30       	cpi	r28, 0x03	; 3
    29c0:	09 f4       	brne	.+2      	; 0x29c4 <main+0x14e>
    29c2:	3f c0       	rjmp	.+126    	; 0x2a42 <main+0x1cc>
      PORTC = 0b00010000;//Minsutes tens digit
    }else if (digit_sel==4) {
      PORTC =0b00000000;//Minutes ones digit
    29c4:	15 ba       	out	0x15, r1	; 21
    29c6:	c5 e0       	ldi	r28, 0x05	; 5
    }
    digit_sel++;//update digit to display(increment)

    //Update power of the radio
    if (radio_pwr_flag==1) {
    29c8:	d0 91 42 02 	lds	r29, 0x0242	; 0x800242 <radio_pwr_flag>
    29cc:	d1 30       	cpi	r29, 0x01	; 1
    29ce:	a1 f0       	breq	.+40     	; 0x29f8 <main+0x182>
        radio_on_off=0;
        rssi= 0x00;//turn off rssi indication
      }
    }

    if (((mode>>BIT5)&1)==1) {//radio enabled
    29d0:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
    29d4:	85 ff       	sbrs	r24, 5
    29d6:	04 c0       	rjmp	.+8      	; 0x29e0 <main+0x16a>
      if (station_change_flag==1) {//Change station
    29d8:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <station_change_flag>
    29dc:	81 30       	cpi	r24, 0x01	; 1
    29de:	a1 f1       	breq	.+104    	; 0x2a48 <main+0x1d2>
        if(rssi<=64) {rssi = 0xFE;} else
        if(rssi>=64) {rssi = 0xFF;}
      }
    }

    alarm_radio_en();//handoff sound between alarm and radio
    29e0:	0e 94 77 0a 	call	0x14ee	; 0x14ee <alarm_radio_en>

  }//WHILE
    29e4:	ca cf       	rjmp	.-108    	; 0x297a <main+0x104>

    if (digit_sel>4) {//bound diigit select 0-4
      digit_sel =0;
    }
    DDRA = 0xFF;//make PORTA output for Seven Segment
    PORTA = segment_data[digit_sel];//send 7 segment code to LED segments
    29e6:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <segment_data>
    29ea:	8b bb       	out	0x1b, r24	; 27
    //send PORTC the digit to display & power ON to seven seg(bit7=0)
    if (digit_sel == 0) {
      PORTC = 0b01000000;//Hours Tens digit
    29ec:	f5 ba       	out	0x15, r15	; 21
    29ee:	c1 e0       	ldi	r28, 0x01	; 1
      PORTC =0b00000000;//Minutes ones digit
    }
    digit_sel++;//update digit to display(increment)

    //Update power of the radio
    if (radio_pwr_flag==1) {
    29f0:	d0 91 42 02 	lds	r29, 0x0242	; 0x800242 <radio_pwr_flag>
    29f4:	d1 30       	cpi	r29, 0x01	; 1
    29f6:	61 f7       	brne	.-40     	; 0x29d0 <main+0x15a>
      radio_pwr_flag &= ~(1<<BIT0);//reset flag
    29f8:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <radio_pwr_flag>
      if (((mode>>BIT5)&1)==1) {//radio EN true
    29fc:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <mode>
    2a00:	85 ff       	sbrs	r24, 5
    2a02:	12 c0       	rjmp	.+36     	; 0x2a28 <main+0x1b2>
        fm_pwr_up();
    2a04:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <fm_pwr_up>
        fm_tune_freq();
    2a08:	0e 94 34 12 	call	0x2468	; 0x2468 <fm_tune_freq>
        radio_on_off = 1;
    2a0c:	d0 93 40 02 	sts	0x0240, r29	; 0x800240 <__data_end>
        //rssi value
        fm_rsq_status();
    2a10:	0e 94 69 12 	call	0x24d2	; 0x24d2 <fm_rsq_status>
        rssi = si4734_tune_status_buf[4];
    2a14:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <si4734_tune_status_buf+0x4>
        if(rssi<= 8) {rssi = 0x00;} else
    2a18:	89 30       	cpi	r24, 0x09	; 9
    2a1a:	50 f0       	brcs	.+20     	; 0x2a30 <main+0x1ba>
        if(rssi<=16) {rssi = 0x80;} else
    2a1c:	81 31       	cpi	r24, 0x11	; 17
    2a1e:	08 f5       	brcc	.+66     	; 0x2a62 <main+0x1ec>
    2a20:	80 e8       	ldi	r24, 0x80	; 128
    2a22:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <rssi>
    2a26:	d4 cf       	rjmp	.-88     	; 0x29d0 <main+0x15a>
        if(rssi<=48) {rssi = 0xF8;} else
        if(rssi<=56) {rssi = 0xFC;} else
        if(rssi<=64) {rssi = 0xFE;} else
        if(rssi>=64) {rssi = 0xFF;}
      }else{
        radio_pwr_dwn();
    2a28:	0e 94 59 12 	call	0x24b2	; 0x24b2 <radio_pwr_dwn>
        radio_on_off=0;
    2a2c:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <__data_end>
        rssi= 0x00;//turn off rssi indication
    2a30:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <rssi>
    2a34:	cd cf       	rjmp	.-102    	; 0x29d0 <main+0x15a>
    PORTA = segment_data[digit_sel];//send 7 segment code to LED segments
    //send PORTC the digit to display & power ON to seven seg(bit7=0)
    if (digit_sel == 0) {
      PORTC = 0b01000000;//Hours Tens digit
    }else if (digit_sel==1) {
      PORTC = 0b00110000;//Hours Ones  digit
    2a36:	e5 ba       	out	0x15, r14	; 21
    2a38:	c2 e0       	ldi	r28, 0x02	; 2
    2a3a:	c6 cf       	rjmp	.-116    	; 0x29c8 <main+0x152>
    }else if (digit_sel==2) {
      PORTC = 0b00100000;//colon digit
    2a3c:	d5 ba       	out	0x15, r13	; 21
    2a3e:	c3 e0       	ldi	r28, 0x03	; 3
    2a40:	c3 cf       	rjmp	.-122    	; 0x29c8 <main+0x152>
    }else if (digit_sel==3) {
      PORTC = 0b00010000;//Minsutes tens digit
    2a42:	c5 ba       	out	0x15, r12	; 21
    2a44:	c4 e0       	ldi	r28, 0x04	; 4
    2a46:	c0 cf       	rjmp	.-128    	; 0x29c8 <main+0x152>
      }
    }

    if (((mode>>BIT5)&1)==1) {//radio enabled
      if (station_change_flag==1) {//Change station
        station_change_flag=0;//reset flag
    2a48:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <station_change_flag>
        fm_tune_freq();
    2a4c:	0e 94 34 12 	call	0x2468	; 0x2468 <fm_tune_freq>
        //rssi value
        fm_rsq_status();
    2a50:	0e 94 69 12 	call	0x24d2	; 0x24d2 <fm_rsq_status>
        rssi = si4734_tune_status_buf[4];
    2a54:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <si4734_tune_status_buf+0x4>
        if(rssi<= 8) {rssi = 0x00;} else
    2a58:	89 30       	cpi	r24, 0x09	; 9
    2a5a:	48 f4       	brcc	.+18     	; 0x2a6e <main+0x1f8>
    2a5c:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <rssi>
    2a60:	bf cf       	rjmp	.-130    	; 0x29e0 <main+0x16a>
        //rssi value
        fm_rsq_status();
        rssi = si4734_tune_status_buf[4];
        if(rssi<= 8) {rssi = 0x00;} else
        if(rssi<=16) {rssi = 0x80;} else
        if(rssi<=24) {rssi = 0xC0;} else
    2a62:	89 31       	cpi	r24, 0x19	; 25
    2a64:	50 f4       	brcc	.+20     	; 0x2a7a <main+0x204>
    2a66:	80 ec       	ldi	r24, 0xC0	; 192
    2a68:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <rssi>
    2a6c:	b1 cf       	rjmp	.-158    	; 0x29d0 <main+0x15a>
        fm_tune_freq();
        //rssi value
        fm_rsq_status();
        rssi = si4734_tune_status_buf[4];
        if(rssi<= 8) {rssi = 0x00;} else
        if(rssi<=16) {rssi = 0x80;} else
    2a6e:	81 31       	cpi	r24, 0x11	; 17
    2a70:	50 f4       	brcc	.+20     	; 0x2a86 <main+0x210>
    2a72:	80 e8       	ldi	r24, 0x80	; 128
    2a74:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <rssi>
    2a78:	b3 cf       	rjmp	.-154    	; 0x29e0 <main+0x16a>
        fm_rsq_status();
        rssi = si4734_tune_status_buf[4];
        if(rssi<= 8) {rssi = 0x00;} else
        if(rssi<=16) {rssi = 0x80;} else
        if(rssi<=24) {rssi = 0xC0;} else
        if(rssi<=32) {rssi = 0xE0;} else
    2a7a:	81 32       	cpi	r24, 0x21	; 33
    2a7c:	50 f4       	brcc	.+20     	; 0x2a92 <main+0x21c>
    2a7e:	80 ee       	ldi	r24, 0xE0	; 224
    2a80:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <rssi>
    2a84:	a5 cf       	rjmp	.-182    	; 0x29d0 <main+0x15a>
        //rssi value
        fm_rsq_status();
        rssi = si4734_tune_status_buf[4];
        if(rssi<= 8) {rssi = 0x00;} else
        if(rssi<=16) {rssi = 0x80;} else
        if(rssi<=24) {rssi = 0xC0;} else
    2a86:	89 31       	cpi	r24, 0x19	; 25
    2a88:	50 f4       	brcc	.+20     	; 0x2a9e <main+0x228>
    2a8a:	80 ec       	ldi	r24, 0xC0	; 192
    2a8c:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <rssi>
    2a90:	a7 cf       	rjmp	.-178    	; 0x29e0 <main+0x16a>
        rssi = si4734_tune_status_buf[4];
        if(rssi<= 8) {rssi = 0x00;} else
        if(rssi<=16) {rssi = 0x80;} else
        if(rssi<=24) {rssi = 0xC0;} else
        if(rssi<=32) {rssi = 0xE0;} else
        if(rssi<=40) {rssi = 0xF0;} else
    2a92:	89 32       	cpi	r24, 0x29	; 41
    2a94:	50 f4       	brcc	.+20     	; 0x2aaa <main+0x234>
    2a96:	80 ef       	ldi	r24, 0xF0	; 240
    2a98:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <rssi>
    2a9c:	99 cf       	rjmp	.-206    	; 0x29d0 <main+0x15a>
        fm_rsq_status();
        rssi = si4734_tune_status_buf[4];
        if(rssi<= 8) {rssi = 0x00;} else
        if(rssi<=16) {rssi = 0x80;} else
        if(rssi<=24) {rssi = 0xC0;} else
        if(rssi<=32) {rssi = 0xE0;} else
    2a9e:	81 32       	cpi	r24, 0x21	; 33
    2aa0:	48 f4       	brcc	.+18     	; 0x2ab4 <main+0x23e>
    2aa2:	80 ee       	ldi	r24, 0xE0	; 224
    2aa4:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <rssi>
    2aa8:	9b cf       	rjmp	.-202    	; 0x29e0 <main+0x16a>
        if(rssi<= 8) {rssi = 0x00;} else
        if(rssi<=16) {rssi = 0x80;} else
        if(rssi<=24) {rssi = 0xC0;} else
        if(rssi<=32) {rssi = 0xE0;} else
        if(rssi<=40) {rssi = 0xF0;} else
        if(rssi<=48) {rssi = 0xF8;} else
    2aaa:	81 33       	cpi	r24, 0x31	; 49
    2aac:	48 f4       	brcc	.+18     	; 0x2ac0 <main+0x24a>
    2aae:	b0 92 41 02 	sts	0x0241, r11	; 0x800241 <rssi>
    2ab2:	8e cf       	rjmp	.-228    	; 0x29d0 <main+0x15a>
        rssi = si4734_tune_status_buf[4];
        if(rssi<= 8) {rssi = 0x00;} else
        if(rssi<=16) {rssi = 0x80;} else
        if(rssi<=24) {rssi = 0xC0;} else
        if(rssi<=32) {rssi = 0xE0;} else
        if(rssi<=40) {rssi = 0xF0;} else
    2ab4:	89 32       	cpi	r24, 0x29	; 41
    2ab6:	48 f4       	brcc	.+18     	; 0x2aca <main+0x254>
    2ab8:	80 ef       	ldi	r24, 0xF0	; 240
    2aba:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <rssi>
    2abe:	90 cf       	rjmp	.-224    	; 0x29e0 <main+0x16a>
        if(rssi<=16) {rssi = 0x80;} else
        if(rssi<=24) {rssi = 0xC0;} else
        if(rssi<=32) {rssi = 0xE0;} else
        if(rssi<=40) {rssi = 0xF0;} else
        if(rssi<=48) {rssi = 0xF8;} else
        if(rssi<=56) {rssi = 0xFC;} else
    2ac0:	89 33       	cpi	r24, 0x39	; 57
    2ac2:	40 f4       	brcc	.+16     	; 0x2ad4 <main+0x25e>
    2ac4:	a0 92 41 02 	sts	0x0241, r10	; 0x800241 <rssi>
    2ac8:	83 cf       	rjmp	.-250    	; 0x29d0 <main+0x15a>
        if(rssi<= 8) {rssi = 0x00;} else
        if(rssi<=16) {rssi = 0x80;} else
        if(rssi<=24) {rssi = 0xC0;} else
        if(rssi<=32) {rssi = 0xE0;} else
        if(rssi<=40) {rssi = 0xF0;} else
        if(rssi<=48) {rssi = 0xF8;} else
    2aca:	81 33       	cpi	r24, 0x31	; 49
    2acc:	40 f4       	brcc	.+16     	; 0x2ade <main+0x268>
    2ace:	b0 92 41 02 	sts	0x0241, r11	; 0x800241 <rssi>
    2ad2:	86 cf       	rjmp	.-244    	; 0x29e0 <main+0x16a>
        if(rssi<=24) {rssi = 0xC0;} else
        if(rssi<=32) {rssi = 0xE0;} else
        if(rssi<=40) {rssi = 0xF0;} else
        if(rssi<=48) {rssi = 0xF8;} else
        if(rssi<=56) {rssi = 0xFC;} else
        if(rssi<=64) {rssi = 0xFE;} else
    2ad4:	81 34       	cpi	r24, 0x41	; 65
    2ad6:	40 f4       	brcc	.+16     	; 0x2ae8 <main+0x272>
    2ad8:	90 92 41 02 	sts	0x0241, r9	; 0x800241 <rssi>
    2adc:	79 cf       	rjmp	.-270    	; 0x29d0 <main+0x15a>
        if(rssi<=16) {rssi = 0x80;} else
        if(rssi<=24) {rssi = 0xC0;} else
        if(rssi<=32) {rssi = 0xE0;} else
        if(rssi<=40) {rssi = 0xF0;} else
        if(rssi<=48) {rssi = 0xF8;} else
        if(rssi<=56) {rssi = 0xFC;} else
    2ade:	89 33       	cpi	r24, 0x39	; 57
    2ae0:	30 f4       	brcc	.+12     	; 0x2aee <main+0x278>
    2ae2:	a0 92 41 02 	sts	0x0241, r10	; 0x800241 <rssi>
    2ae6:	7c cf       	rjmp	.-264    	; 0x29e0 <main+0x16a>
        if(rssi<=32) {rssi = 0xE0;} else
        if(rssi<=40) {rssi = 0xF0;} else
        if(rssi<=48) {rssi = 0xF8;} else
        if(rssi<=56) {rssi = 0xFC;} else
        if(rssi<=64) {rssi = 0xFE;} else
        if(rssi>=64) {rssi = 0xFF;}
    2ae8:	00 93 41 02 	sts	0x0241, r16	; 0x800241 <rssi>
    2aec:	71 cf       	rjmp	.-286    	; 0x29d0 <main+0x15a>
        if(rssi<=24) {rssi = 0xC0;} else
        if(rssi<=32) {rssi = 0xE0;} else
        if(rssi<=40) {rssi = 0xF0;} else
        if(rssi<=48) {rssi = 0xF8;} else
        if(rssi<=56) {rssi = 0xFC;} else
        if(rssi<=64) {rssi = 0xFE;} else
    2aee:	81 34       	cpi	r24, 0x41	; 65
    2af0:	18 f4       	brcc	.+6      	; 0x2af8 <main+0x282>
    2af2:	90 92 41 02 	sts	0x0241, r9	; 0x800241 <rssi>
    2af6:	74 cf       	rjmp	.-280    	; 0x29e0 <main+0x16a>
        if(rssi>=64) {rssi = 0xFF;}
    2af8:	00 93 41 02 	sts	0x0241, r16	; 0x800241 <rssi>
    2afc:	71 cf       	rjmp	.-286    	; 0x29e0 <main+0x16a>

00002afe <__divmodhi4>:
    2afe:	97 fb       	bst	r25, 7
    2b00:	07 2e       	mov	r0, r23
    2b02:	16 f4       	brtc	.+4      	; 0x2b08 <__divmodhi4+0xa>
    2b04:	00 94       	com	r0
    2b06:	07 d0       	rcall	.+14     	; 0x2b16 <__divmodhi4_neg1>
    2b08:	77 fd       	sbrc	r23, 7
    2b0a:	09 d0       	rcall	.+18     	; 0x2b1e <__divmodhi4_neg2>
    2b0c:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <__udivmodhi4>
    2b10:	07 fc       	sbrc	r0, 7
    2b12:	05 d0       	rcall	.+10     	; 0x2b1e <__divmodhi4_neg2>
    2b14:	3e f4       	brtc	.+14     	; 0x2b24 <__divmodhi4_exit>

00002b16 <__divmodhi4_neg1>:
    2b16:	90 95       	com	r25
    2b18:	81 95       	neg	r24
    2b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b1c:	08 95       	ret

00002b1e <__divmodhi4_neg2>:
    2b1e:	70 95       	com	r23
    2b20:	61 95       	neg	r22
    2b22:	7f 4f       	sbci	r23, 0xFF	; 255

00002b24 <__divmodhi4_exit>:
    2b24:	08 95       	ret

00002b26 <__divmodsi4>:
    2b26:	05 2e       	mov	r0, r21
    2b28:	97 fb       	bst	r25, 7
    2b2a:	1e f4       	brtc	.+6      	; 0x2b32 <__divmodsi4+0xc>
    2b2c:	00 94       	com	r0
    2b2e:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <__negsi2>
    2b32:	57 fd       	sbrc	r21, 7
    2b34:	07 d0       	rcall	.+14     	; 0x2b44 <__divmodsi4_neg2>
    2b36:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <__udivmodsi4>
    2b3a:	07 fc       	sbrc	r0, 7
    2b3c:	03 d0       	rcall	.+6      	; 0x2b44 <__divmodsi4_neg2>
    2b3e:	4e f4       	brtc	.+18     	; 0x2b52 <__divmodsi4_exit>
    2b40:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <__negsi2>

00002b44 <__divmodsi4_neg2>:
    2b44:	50 95       	com	r21
    2b46:	40 95       	com	r20
    2b48:	30 95       	com	r19
    2b4a:	21 95       	neg	r18
    2b4c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b4e:	4f 4f       	sbci	r20, 0xFF	; 255
    2b50:	5f 4f       	sbci	r21, 0xFF	; 255

00002b52 <__divmodsi4_exit>:
    2b52:	08 95       	ret

00002b54 <__negsi2>:
    2b54:	90 95       	com	r25
    2b56:	80 95       	com	r24
    2b58:	70 95       	com	r23
    2b5a:	61 95       	neg	r22
    2b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b5e:	8f 4f       	sbci	r24, 0xFF	; 255
    2b60:	9f 4f       	sbci	r25, 0xFF	; 255
    2b62:	08 95       	ret

00002b64 <__tablejump2__>:
    2b64:	ee 0f       	add	r30, r30
    2b66:	ff 1f       	adc	r31, r31
    2b68:	00 24       	eor	r0, r0
    2b6a:	00 1c       	adc	r0, r0
    2b6c:	0b be       	out	0x3b, r0	; 59
    2b6e:	07 90       	elpm	r0, Z+
    2b70:	f6 91       	elpm	r31, Z
    2b72:	e0 2d       	mov	r30, r0
    2b74:	09 94       	ijmp

00002b76 <__umulhisi3>:
    2b76:	a2 9f       	mul	r26, r18
    2b78:	b0 01       	movw	r22, r0
    2b7a:	b3 9f       	mul	r27, r19
    2b7c:	c0 01       	movw	r24, r0
    2b7e:	a3 9f       	mul	r26, r19
    2b80:	70 0d       	add	r23, r0
    2b82:	81 1d       	adc	r24, r1
    2b84:	11 24       	eor	r1, r1
    2b86:	91 1d       	adc	r25, r1
    2b88:	b2 9f       	mul	r27, r18
    2b8a:	70 0d       	add	r23, r0
    2b8c:	81 1d       	adc	r24, r1
    2b8e:	11 24       	eor	r1, r1
    2b90:	91 1d       	adc	r25, r1
    2b92:	08 95       	ret

00002b94 <__udivmodhi4>:
    2b94:	aa 1b       	sub	r26, r26
    2b96:	bb 1b       	sub	r27, r27
    2b98:	51 e1       	ldi	r21, 0x11	; 17
    2b9a:	07 c0       	rjmp	.+14     	; 0x2baa <__udivmodhi4_ep>

00002b9c <__udivmodhi4_loop>:
    2b9c:	aa 1f       	adc	r26, r26
    2b9e:	bb 1f       	adc	r27, r27
    2ba0:	a6 17       	cp	r26, r22
    2ba2:	b7 07       	cpc	r27, r23
    2ba4:	10 f0       	brcs	.+4      	; 0x2baa <__udivmodhi4_ep>
    2ba6:	a6 1b       	sub	r26, r22
    2ba8:	b7 0b       	sbc	r27, r23

00002baa <__udivmodhi4_ep>:
    2baa:	88 1f       	adc	r24, r24
    2bac:	99 1f       	adc	r25, r25
    2bae:	5a 95       	dec	r21
    2bb0:	a9 f7       	brne	.-22     	; 0x2b9c <__udivmodhi4_loop>
    2bb2:	80 95       	com	r24
    2bb4:	90 95       	com	r25
    2bb6:	bc 01       	movw	r22, r24
    2bb8:	cd 01       	movw	r24, r26
    2bba:	08 95       	ret

00002bbc <__udivmodsi4>:
    2bbc:	a1 e2       	ldi	r26, 0x21	; 33
    2bbe:	1a 2e       	mov	r1, r26
    2bc0:	aa 1b       	sub	r26, r26
    2bc2:	bb 1b       	sub	r27, r27
    2bc4:	fd 01       	movw	r30, r26
    2bc6:	0d c0       	rjmp	.+26     	; 0x2be2 <__udivmodsi4_ep>

00002bc8 <__udivmodsi4_loop>:
    2bc8:	aa 1f       	adc	r26, r26
    2bca:	bb 1f       	adc	r27, r27
    2bcc:	ee 1f       	adc	r30, r30
    2bce:	ff 1f       	adc	r31, r31
    2bd0:	a2 17       	cp	r26, r18
    2bd2:	b3 07       	cpc	r27, r19
    2bd4:	e4 07       	cpc	r30, r20
    2bd6:	f5 07       	cpc	r31, r21
    2bd8:	20 f0       	brcs	.+8      	; 0x2be2 <__udivmodsi4_ep>
    2bda:	a2 1b       	sub	r26, r18
    2bdc:	b3 0b       	sbc	r27, r19
    2bde:	e4 0b       	sbc	r30, r20
    2be0:	f5 0b       	sbc	r31, r21

00002be2 <__udivmodsi4_ep>:
    2be2:	66 1f       	adc	r22, r22
    2be4:	77 1f       	adc	r23, r23
    2be6:	88 1f       	adc	r24, r24
    2be8:	99 1f       	adc	r25, r25
    2bea:	1a 94       	dec	r1
    2bec:	69 f7       	brne	.-38     	; 0x2bc8 <__udivmodsi4_loop>
    2bee:	60 95       	com	r22
    2bf0:	70 95       	com	r23
    2bf2:	80 95       	com	r24
    2bf4:	90 95       	com	r25
    2bf6:	9b 01       	movw	r18, r22
    2bf8:	ac 01       	movw	r20, r24
    2bfa:	bd 01       	movw	r22, r26
    2bfc:	cf 01       	movw	r24, r30
    2bfe:	08 95       	ret

00002c00 <__subsf3>:
    2c00:	50 58       	subi	r21, 0x80	; 128

00002c02 <__addsf3>:
    2c02:	bb 27       	eor	r27, r27
    2c04:	aa 27       	eor	r26, r26
    2c06:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__addsf3x>
    2c0a:	0c 94 f7 16 	jmp	0x2dee	; 0x2dee <__fp_round>
    2c0e:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__fp_pscA>
    2c12:	38 f0       	brcs	.+14     	; 0x2c22 <__addsf3+0x20>
    2c14:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__fp_pscB>
    2c18:	20 f0       	brcs	.+8      	; 0x2c22 <__addsf3+0x20>
    2c1a:	39 f4       	brne	.+14     	; 0x2c2a <__addsf3+0x28>
    2c1c:	9f 3f       	cpi	r25, 0xFF	; 255
    2c1e:	19 f4       	brne	.+6      	; 0x2c26 <__addsf3+0x24>
    2c20:	26 f4       	brtc	.+8      	; 0x2c2a <__addsf3+0x28>
    2c22:	0c 94 e6 16 	jmp	0x2dcc	; 0x2dcc <__fp_nan>
    2c26:	0e f4       	brtc	.+2      	; 0x2c2a <__addsf3+0x28>
    2c28:	e0 95       	com	r30
    2c2a:	e7 fb       	bst	r30, 7
    2c2c:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__fp_inf>

00002c30 <__addsf3x>:
    2c30:	e9 2f       	mov	r30, r25
    2c32:	0e 94 08 17 	call	0x2e10	; 0x2e10 <__fp_split3>
    2c36:	58 f3       	brcs	.-42     	; 0x2c0e <__addsf3+0xc>
    2c38:	ba 17       	cp	r27, r26
    2c3a:	62 07       	cpc	r22, r18
    2c3c:	73 07       	cpc	r23, r19
    2c3e:	84 07       	cpc	r24, r20
    2c40:	95 07       	cpc	r25, r21
    2c42:	20 f0       	brcs	.+8      	; 0x2c4c <__addsf3x+0x1c>
    2c44:	79 f4       	brne	.+30     	; 0x2c64 <__addsf3x+0x34>
    2c46:	a6 f5       	brtc	.+104    	; 0x2cb0 <__addsf3x+0x80>
    2c48:	0c 94 2a 17 	jmp	0x2e54	; 0x2e54 <__fp_zero>
    2c4c:	0e f4       	brtc	.+2      	; 0x2c50 <__addsf3x+0x20>
    2c4e:	e0 95       	com	r30
    2c50:	0b 2e       	mov	r0, r27
    2c52:	ba 2f       	mov	r27, r26
    2c54:	a0 2d       	mov	r26, r0
    2c56:	0b 01       	movw	r0, r22
    2c58:	b9 01       	movw	r22, r18
    2c5a:	90 01       	movw	r18, r0
    2c5c:	0c 01       	movw	r0, r24
    2c5e:	ca 01       	movw	r24, r20
    2c60:	a0 01       	movw	r20, r0
    2c62:	11 24       	eor	r1, r1
    2c64:	ff 27       	eor	r31, r31
    2c66:	59 1b       	sub	r21, r25
    2c68:	99 f0       	breq	.+38     	; 0x2c90 <__addsf3x+0x60>
    2c6a:	59 3f       	cpi	r21, 0xF9	; 249
    2c6c:	50 f4       	brcc	.+20     	; 0x2c82 <__addsf3x+0x52>
    2c6e:	50 3e       	cpi	r21, 0xE0	; 224
    2c70:	68 f1       	brcs	.+90     	; 0x2ccc <__addsf3x+0x9c>
    2c72:	1a 16       	cp	r1, r26
    2c74:	f0 40       	sbci	r31, 0x00	; 0
    2c76:	a2 2f       	mov	r26, r18
    2c78:	23 2f       	mov	r18, r19
    2c7a:	34 2f       	mov	r19, r20
    2c7c:	44 27       	eor	r20, r20
    2c7e:	58 5f       	subi	r21, 0xF8	; 248
    2c80:	f3 cf       	rjmp	.-26     	; 0x2c68 <__addsf3x+0x38>
    2c82:	46 95       	lsr	r20
    2c84:	37 95       	ror	r19
    2c86:	27 95       	ror	r18
    2c88:	a7 95       	ror	r26
    2c8a:	f0 40       	sbci	r31, 0x00	; 0
    2c8c:	53 95       	inc	r21
    2c8e:	c9 f7       	brne	.-14     	; 0x2c82 <__addsf3x+0x52>
    2c90:	7e f4       	brtc	.+30     	; 0x2cb0 <__addsf3x+0x80>
    2c92:	1f 16       	cp	r1, r31
    2c94:	ba 0b       	sbc	r27, r26
    2c96:	62 0b       	sbc	r22, r18
    2c98:	73 0b       	sbc	r23, r19
    2c9a:	84 0b       	sbc	r24, r20
    2c9c:	ba f0       	brmi	.+46     	; 0x2ccc <__addsf3x+0x9c>
    2c9e:	91 50       	subi	r25, 0x01	; 1
    2ca0:	a1 f0       	breq	.+40     	; 0x2cca <__addsf3x+0x9a>
    2ca2:	ff 0f       	add	r31, r31
    2ca4:	bb 1f       	adc	r27, r27
    2ca6:	66 1f       	adc	r22, r22
    2ca8:	77 1f       	adc	r23, r23
    2caa:	88 1f       	adc	r24, r24
    2cac:	c2 f7       	brpl	.-16     	; 0x2c9e <__addsf3x+0x6e>
    2cae:	0e c0       	rjmp	.+28     	; 0x2ccc <__addsf3x+0x9c>
    2cb0:	ba 0f       	add	r27, r26
    2cb2:	62 1f       	adc	r22, r18
    2cb4:	73 1f       	adc	r23, r19
    2cb6:	84 1f       	adc	r24, r20
    2cb8:	48 f4       	brcc	.+18     	; 0x2ccc <__addsf3x+0x9c>
    2cba:	87 95       	ror	r24
    2cbc:	77 95       	ror	r23
    2cbe:	67 95       	ror	r22
    2cc0:	b7 95       	ror	r27
    2cc2:	f7 95       	ror	r31
    2cc4:	9e 3f       	cpi	r25, 0xFE	; 254
    2cc6:	08 f0       	brcs	.+2      	; 0x2cca <__addsf3x+0x9a>
    2cc8:	b0 cf       	rjmp	.-160    	; 0x2c2a <__addsf3+0x28>
    2cca:	93 95       	inc	r25
    2ccc:	88 0f       	add	r24, r24
    2cce:	08 f0       	brcs	.+2      	; 0x2cd2 <__addsf3x+0xa2>
    2cd0:	99 27       	eor	r25, r25
    2cd2:	ee 0f       	add	r30, r30
    2cd4:	97 95       	ror	r25
    2cd6:	87 95       	ror	r24
    2cd8:	08 95       	ret

00002cda <__fixsfsi>:
    2cda:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <__fixunssfsi>
    2cde:	68 94       	set
    2ce0:	b1 11       	cpse	r27, r1
    2ce2:	0c 94 2b 17 	jmp	0x2e56	; 0x2e56 <__fp_szero>
    2ce6:	08 95       	ret

00002ce8 <__fixunssfsi>:
    2ce8:	0e 94 10 17 	call	0x2e20	; 0x2e20 <__fp_splitA>
    2cec:	88 f0       	brcs	.+34     	; 0x2d10 <__fixunssfsi+0x28>
    2cee:	9f 57       	subi	r25, 0x7F	; 127
    2cf0:	98 f0       	brcs	.+38     	; 0x2d18 <__fixunssfsi+0x30>
    2cf2:	b9 2f       	mov	r27, r25
    2cf4:	99 27       	eor	r25, r25
    2cf6:	b7 51       	subi	r27, 0x17	; 23
    2cf8:	b0 f0       	brcs	.+44     	; 0x2d26 <__fixunssfsi+0x3e>
    2cfa:	e1 f0       	breq	.+56     	; 0x2d34 <__fixunssfsi+0x4c>
    2cfc:	66 0f       	add	r22, r22
    2cfe:	77 1f       	adc	r23, r23
    2d00:	88 1f       	adc	r24, r24
    2d02:	99 1f       	adc	r25, r25
    2d04:	1a f0       	brmi	.+6      	; 0x2d0c <__fixunssfsi+0x24>
    2d06:	ba 95       	dec	r27
    2d08:	c9 f7       	brne	.-14     	; 0x2cfc <__fixunssfsi+0x14>
    2d0a:	14 c0       	rjmp	.+40     	; 0x2d34 <__fixunssfsi+0x4c>
    2d0c:	b1 30       	cpi	r27, 0x01	; 1
    2d0e:	91 f0       	breq	.+36     	; 0x2d34 <__fixunssfsi+0x4c>
    2d10:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <__fp_zero>
    2d14:	b1 e0       	ldi	r27, 0x01	; 1
    2d16:	08 95       	ret
    2d18:	0c 94 2a 17 	jmp	0x2e54	; 0x2e54 <__fp_zero>
    2d1c:	67 2f       	mov	r22, r23
    2d1e:	78 2f       	mov	r23, r24
    2d20:	88 27       	eor	r24, r24
    2d22:	b8 5f       	subi	r27, 0xF8	; 248
    2d24:	39 f0       	breq	.+14     	; 0x2d34 <__fixunssfsi+0x4c>
    2d26:	b9 3f       	cpi	r27, 0xF9	; 249
    2d28:	cc f3       	brlt	.-14     	; 0x2d1c <__fixunssfsi+0x34>
    2d2a:	86 95       	lsr	r24
    2d2c:	77 95       	ror	r23
    2d2e:	67 95       	ror	r22
    2d30:	b3 95       	inc	r27
    2d32:	d9 f7       	brne	.-10     	; 0x2d2a <__fixunssfsi+0x42>
    2d34:	3e f4       	brtc	.+14     	; 0x2d44 <__fixunssfsi+0x5c>
    2d36:	90 95       	com	r25
    2d38:	80 95       	com	r24
    2d3a:	70 95       	com	r23
    2d3c:	61 95       	neg	r22
    2d3e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d40:	8f 4f       	sbci	r24, 0xFF	; 255
    2d42:	9f 4f       	sbci	r25, 0xFF	; 255
    2d44:	08 95       	ret

00002d46 <__floatunsisf>:
    2d46:	e8 94       	clt
    2d48:	09 c0       	rjmp	.+18     	; 0x2d5c <__floatsisf+0x12>

00002d4a <__floatsisf>:
    2d4a:	97 fb       	bst	r25, 7
    2d4c:	3e f4       	brtc	.+14     	; 0x2d5c <__floatsisf+0x12>
    2d4e:	90 95       	com	r25
    2d50:	80 95       	com	r24
    2d52:	70 95       	com	r23
    2d54:	61 95       	neg	r22
    2d56:	7f 4f       	sbci	r23, 0xFF	; 255
    2d58:	8f 4f       	sbci	r24, 0xFF	; 255
    2d5a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d5c:	99 23       	and	r25, r25
    2d5e:	a9 f0       	breq	.+42     	; 0x2d8a <__floatsisf+0x40>
    2d60:	f9 2f       	mov	r31, r25
    2d62:	96 e9       	ldi	r25, 0x96	; 150
    2d64:	bb 27       	eor	r27, r27
    2d66:	93 95       	inc	r25
    2d68:	f6 95       	lsr	r31
    2d6a:	87 95       	ror	r24
    2d6c:	77 95       	ror	r23
    2d6e:	67 95       	ror	r22
    2d70:	b7 95       	ror	r27
    2d72:	f1 11       	cpse	r31, r1
    2d74:	f8 cf       	rjmp	.-16     	; 0x2d66 <__floatsisf+0x1c>
    2d76:	fa f4       	brpl	.+62     	; 0x2db6 <__floatsisf+0x6c>
    2d78:	bb 0f       	add	r27, r27
    2d7a:	11 f4       	brne	.+4      	; 0x2d80 <__floatsisf+0x36>
    2d7c:	60 ff       	sbrs	r22, 0
    2d7e:	1b c0       	rjmp	.+54     	; 0x2db6 <__floatsisf+0x6c>
    2d80:	6f 5f       	subi	r22, 0xFF	; 255
    2d82:	7f 4f       	sbci	r23, 0xFF	; 255
    2d84:	8f 4f       	sbci	r24, 0xFF	; 255
    2d86:	9f 4f       	sbci	r25, 0xFF	; 255
    2d88:	16 c0       	rjmp	.+44     	; 0x2db6 <__floatsisf+0x6c>
    2d8a:	88 23       	and	r24, r24
    2d8c:	11 f0       	breq	.+4      	; 0x2d92 <__floatsisf+0x48>
    2d8e:	96 e9       	ldi	r25, 0x96	; 150
    2d90:	11 c0       	rjmp	.+34     	; 0x2db4 <__floatsisf+0x6a>
    2d92:	77 23       	and	r23, r23
    2d94:	21 f0       	breq	.+8      	; 0x2d9e <__floatsisf+0x54>
    2d96:	9e e8       	ldi	r25, 0x8E	; 142
    2d98:	87 2f       	mov	r24, r23
    2d9a:	76 2f       	mov	r23, r22
    2d9c:	05 c0       	rjmp	.+10     	; 0x2da8 <__floatsisf+0x5e>
    2d9e:	66 23       	and	r22, r22
    2da0:	71 f0       	breq	.+28     	; 0x2dbe <__floatsisf+0x74>
    2da2:	96 e8       	ldi	r25, 0x86	; 134
    2da4:	86 2f       	mov	r24, r22
    2da6:	70 e0       	ldi	r23, 0x00	; 0
    2da8:	60 e0       	ldi	r22, 0x00	; 0
    2daa:	2a f0       	brmi	.+10     	; 0x2db6 <__floatsisf+0x6c>
    2dac:	9a 95       	dec	r25
    2dae:	66 0f       	add	r22, r22
    2db0:	77 1f       	adc	r23, r23
    2db2:	88 1f       	adc	r24, r24
    2db4:	da f7       	brpl	.-10     	; 0x2dac <__floatsisf+0x62>
    2db6:	88 0f       	add	r24, r24
    2db8:	96 95       	lsr	r25
    2dba:	87 95       	ror	r24
    2dbc:	97 f9       	bld	r25, 7
    2dbe:	08 95       	ret

00002dc0 <__fp_inf>:
    2dc0:	97 f9       	bld	r25, 7
    2dc2:	9f 67       	ori	r25, 0x7F	; 127
    2dc4:	80 e8       	ldi	r24, 0x80	; 128
    2dc6:	70 e0       	ldi	r23, 0x00	; 0
    2dc8:	60 e0       	ldi	r22, 0x00	; 0
    2dca:	08 95       	ret

00002dcc <__fp_nan>:
    2dcc:	9f ef       	ldi	r25, 0xFF	; 255
    2dce:	80 ec       	ldi	r24, 0xC0	; 192
    2dd0:	08 95       	ret

00002dd2 <__fp_pscA>:
    2dd2:	00 24       	eor	r0, r0
    2dd4:	0a 94       	dec	r0
    2dd6:	16 16       	cp	r1, r22
    2dd8:	17 06       	cpc	r1, r23
    2dda:	18 06       	cpc	r1, r24
    2ddc:	09 06       	cpc	r0, r25
    2dde:	08 95       	ret

00002de0 <__fp_pscB>:
    2de0:	00 24       	eor	r0, r0
    2de2:	0a 94       	dec	r0
    2de4:	12 16       	cp	r1, r18
    2de6:	13 06       	cpc	r1, r19
    2de8:	14 06       	cpc	r1, r20
    2dea:	05 06       	cpc	r0, r21
    2dec:	08 95       	ret

00002dee <__fp_round>:
    2dee:	09 2e       	mov	r0, r25
    2df0:	03 94       	inc	r0
    2df2:	00 0c       	add	r0, r0
    2df4:	11 f4       	brne	.+4      	; 0x2dfa <__fp_round+0xc>
    2df6:	88 23       	and	r24, r24
    2df8:	52 f0       	brmi	.+20     	; 0x2e0e <__fp_round+0x20>
    2dfa:	bb 0f       	add	r27, r27
    2dfc:	40 f4       	brcc	.+16     	; 0x2e0e <__fp_round+0x20>
    2dfe:	bf 2b       	or	r27, r31
    2e00:	11 f4       	brne	.+4      	; 0x2e06 <__fp_round+0x18>
    2e02:	60 ff       	sbrs	r22, 0
    2e04:	04 c0       	rjmp	.+8      	; 0x2e0e <__fp_round+0x20>
    2e06:	6f 5f       	subi	r22, 0xFF	; 255
    2e08:	7f 4f       	sbci	r23, 0xFF	; 255
    2e0a:	8f 4f       	sbci	r24, 0xFF	; 255
    2e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e0e:	08 95       	ret

00002e10 <__fp_split3>:
    2e10:	57 fd       	sbrc	r21, 7
    2e12:	90 58       	subi	r25, 0x80	; 128
    2e14:	44 0f       	add	r20, r20
    2e16:	55 1f       	adc	r21, r21
    2e18:	59 f0       	breq	.+22     	; 0x2e30 <__fp_splitA+0x10>
    2e1a:	5f 3f       	cpi	r21, 0xFF	; 255
    2e1c:	71 f0       	breq	.+28     	; 0x2e3a <__fp_splitA+0x1a>
    2e1e:	47 95       	ror	r20

00002e20 <__fp_splitA>:
    2e20:	88 0f       	add	r24, r24
    2e22:	97 fb       	bst	r25, 7
    2e24:	99 1f       	adc	r25, r25
    2e26:	61 f0       	breq	.+24     	; 0x2e40 <__fp_splitA+0x20>
    2e28:	9f 3f       	cpi	r25, 0xFF	; 255
    2e2a:	79 f0       	breq	.+30     	; 0x2e4a <__fp_splitA+0x2a>
    2e2c:	87 95       	ror	r24
    2e2e:	08 95       	ret
    2e30:	12 16       	cp	r1, r18
    2e32:	13 06       	cpc	r1, r19
    2e34:	14 06       	cpc	r1, r20
    2e36:	55 1f       	adc	r21, r21
    2e38:	f2 cf       	rjmp	.-28     	; 0x2e1e <__fp_split3+0xe>
    2e3a:	46 95       	lsr	r20
    2e3c:	f1 df       	rcall	.-30     	; 0x2e20 <__fp_splitA>
    2e3e:	08 c0       	rjmp	.+16     	; 0x2e50 <__fp_splitA+0x30>
    2e40:	16 16       	cp	r1, r22
    2e42:	17 06       	cpc	r1, r23
    2e44:	18 06       	cpc	r1, r24
    2e46:	99 1f       	adc	r25, r25
    2e48:	f1 cf       	rjmp	.-30     	; 0x2e2c <__fp_splitA+0xc>
    2e4a:	86 95       	lsr	r24
    2e4c:	71 05       	cpc	r23, r1
    2e4e:	61 05       	cpc	r22, r1
    2e50:	08 94       	sec
    2e52:	08 95       	ret

00002e54 <__fp_zero>:
    2e54:	e8 94       	clt

00002e56 <__fp_szero>:
    2e56:	bb 27       	eor	r27, r27
    2e58:	66 27       	eor	r22, r22
    2e5a:	77 27       	eor	r23, r23
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	97 f9       	bld	r25, 7
    2e60:	08 95       	ret

00002e62 <__mulsf3>:
    2e62:	0e 94 44 17 	call	0x2e88	; 0x2e88 <__mulsf3x>
    2e66:	0c 94 f7 16 	jmp	0x2dee	; 0x2dee <__fp_round>
    2e6a:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <__fp_pscA>
    2e6e:	38 f0       	brcs	.+14     	; 0x2e7e <__mulsf3+0x1c>
    2e70:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__fp_pscB>
    2e74:	20 f0       	brcs	.+8      	; 0x2e7e <__mulsf3+0x1c>
    2e76:	95 23       	and	r25, r21
    2e78:	11 f0       	breq	.+4      	; 0x2e7e <__mulsf3+0x1c>
    2e7a:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__fp_inf>
    2e7e:	0c 94 e6 16 	jmp	0x2dcc	; 0x2dcc <__fp_nan>
    2e82:	11 24       	eor	r1, r1
    2e84:	0c 94 2b 17 	jmp	0x2e56	; 0x2e56 <__fp_szero>

00002e88 <__mulsf3x>:
    2e88:	0e 94 08 17 	call	0x2e10	; 0x2e10 <__fp_split3>
    2e8c:	70 f3       	brcs	.-36     	; 0x2e6a <__mulsf3+0x8>

00002e8e <__mulsf3_pse>:
    2e8e:	95 9f       	mul	r25, r21
    2e90:	c1 f3       	breq	.-16     	; 0x2e82 <__mulsf3+0x20>
    2e92:	95 0f       	add	r25, r21
    2e94:	50 e0       	ldi	r21, 0x00	; 0
    2e96:	55 1f       	adc	r21, r21
    2e98:	62 9f       	mul	r22, r18
    2e9a:	f0 01       	movw	r30, r0
    2e9c:	72 9f       	mul	r23, r18
    2e9e:	bb 27       	eor	r27, r27
    2ea0:	f0 0d       	add	r31, r0
    2ea2:	b1 1d       	adc	r27, r1
    2ea4:	63 9f       	mul	r22, r19
    2ea6:	aa 27       	eor	r26, r26
    2ea8:	f0 0d       	add	r31, r0
    2eaa:	b1 1d       	adc	r27, r1
    2eac:	aa 1f       	adc	r26, r26
    2eae:	64 9f       	mul	r22, r20
    2eb0:	66 27       	eor	r22, r22
    2eb2:	b0 0d       	add	r27, r0
    2eb4:	a1 1d       	adc	r26, r1
    2eb6:	66 1f       	adc	r22, r22
    2eb8:	82 9f       	mul	r24, r18
    2eba:	22 27       	eor	r18, r18
    2ebc:	b0 0d       	add	r27, r0
    2ebe:	a1 1d       	adc	r26, r1
    2ec0:	62 1f       	adc	r22, r18
    2ec2:	73 9f       	mul	r23, r19
    2ec4:	b0 0d       	add	r27, r0
    2ec6:	a1 1d       	adc	r26, r1
    2ec8:	62 1f       	adc	r22, r18
    2eca:	83 9f       	mul	r24, r19
    2ecc:	a0 0d       	add	r26, r0
    2ece:	61 1d       	adc	r22, r1
    2ed0:	22 1f       	adc	r18, r18
    2ed2:	74 9f       	mul	r23, r20
    2ed4:	33 27       	eor	r19, r19
    2ed6:	a0 0d       	add	r26, r0
    2ed8:	61 1d       	adc	r22, r1
    2eda:	23 1f       	adc	r18, r19
    2edc:	84 9f       	mul	r24, r20
    2ede:	60 0d       	add	r22, r0
    2ee0:	21 1d       	adc	r18, r1
    2ee2:	82 2f       	mov	r24, r18
    2ee4:	76 2f       	mov	r23, r22
    2ee6:	6a 2f       	mov	r22, r26
    2ee8:	11 24       	eor	r1, r1
    2eea:	9f 57       	subi	r25, 0x7F	; 127
    2eec:	50 40       	sbci	r21, 0x00	; 0
    2eee:	9a f0       	brmi	.+38     	; 0x2f16 <__mulsf3_pse+0x88>
    2ef0:	f1 f0       	breq	.+60     	; 0x2f2e <__mulsf3_pse+0xa0>
    2ef2:	88 23       	and	r24, r24
    2ef4:	4a f0       	brmi	.+18     	; 0x2f08 <__mulsf3_pse+0x7a>
    2ef6:	ee 0f       	add	r30, r30
    2ef8:	ff 1f       	adc	r31, r31
    2efa:	bb 1f       	adc	r27, r27
    2efc:	66 1f       	adc	r22, r22
    2efe:	77 1f       	adc	r23, r23
    2f00:	88 1f       	adc	r24, r24
    2f02:	91 50       	subi	r25, 0x01	; 1
    2f04:	50 40       	sbci	r21, 0x00	; 0
    2f06:	a9 f7       	brne	.-22     	; 0x2ef2 <__mulsf3_pse+0x64>
    2f08:	9e 3f       	cpi	r25, 0xFE	; 254
    2f0a:	51 05       	cpc	r21, r1
    2f0c:	80 f0       	brcs	.+32     	; 0x2f2e <__mulsf3_pse+0xa0>
    2f0e:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__fp_inf>
    2f12:	0c 94 2b 17 	jmp	0x2e56	; 0x2e56 <__fp_szero>
    2f16:	5f 3f       	cpi	r21, 0xFF	; 255
    2f18:	e4 f3       	brlt	.-8      	; 0x2f12 <__mulsf3_pse+0x84>
    2f1a:	98 3e       	cpi	r25, 0xE8	; 232
    2f1c:	d4 f3       	brlt	.-12     	; 0x2f12 <__mulsf3_pse+0x84>
    2f1e:	86 95       	lsr	r24
    2f20:	77 95       	ror	r23
    2f22:	67 95       	ror	r22
    2f24:	b7 95       	ror	r27
    2f26:	f7 95       	ror	r31
    2f28:	e7 95       	ror	r30
    2f2a:	9f 5f       	subi	r25, 0xFF	; 255
    2f2c:	c1 f7       	brne	.-16     	; 0x2f1e <__mulsf3_pse+0x90>
    2f2e:	fe 2b       	or	r31, r30
    2f30:	88 0f       	add	r24, r24
    2f32:	91 1d       	adc	r25, r1
    2f34:	96 95       	lsr	r25
    2f36:	87 95       	ror	r24
    2f38:	97 f9       	bld	r25, 7
    2f3a:	08 95       	ret

00002f3c <strcat>:
    2f3c:	fb 01       	movw	r30, r22
    2f3e:	dc 01       	movw	r26, r24
    2f40:	0d 90       	ld	r0, X+
    2f42:	00 20       	and	r0, r0
    2f44:	e9 f7       	brne	.-6      	; 0x2f40 <strcat+0x4>
    2f46:	11 97       	sbiw	r26, 0x01	; 1
    2f48:	01 90       	ld	r0, Z+
    2f4a:	0d 92       	st	X+, r0
    2f4c:	00 20       	and	r0, r0
    2f4e:	e1 f7       	brne	.-8      	; 0x2f48 <strcat+0xc>
    2f50:	08 95       	ret

00002f52 <strcpy>:
    2f52:	fb 01       	movw	r30, r22
    2f54:	dc 01       	movw	r26, r24
    2f56:	01 90       	ld	r0, Z+
    2f58:	0d 92       	st	X+, r0
    2f5a:	00 20       	and	r0, r0
    2f5c:	e1 f7       	brne	.-8      	; 0x2f56 <strcpy+0x4>
    2f5e:	08 95       	ret

00002f60 <__itoa_ncheck>:
    2f60:	bb 27       	eor	r27, r27
    2f62:	4a 30       	cpi	r20, 0x0A	; 10
    2f64:	31 f4       	brne	.+12     	; 0x2f72 <__itoa_ncheck+0x12>
    2f66:	99 23       	and	r25, r25
    2f68:	22 f4       	brpl	.+8      	; 0x2f72 <__itoa_ncheck+0x12>
    2f6a:	bd e2       	ldi	r27, 0x2D	; 45
    2f6c:	90 95       	com	r25
    2f6e:	81 95       	neg	r24
    2f70:	9f 4f       	sbci	r25, 0xFF	; 255
    2f72:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <__utoa_common>

00002f76 <__utoa_ncheck>:
    2f76:	bb 27       	eor	r27, r27

00002f78 <__utoa_common>:
    2f78:	fb 01       	movw	r30, r22
    2f7a:	55 27       	eor	r21, r21
    2f7c:	aa 27       	eor	r26, r26
    2f7e:	88 0f       	add	r24, r24
    2f80:	99 1f       	adc	r25, r25
    2f82:	aa 1f       	adc	r26, r26
    2f84:	a4 17       	cp	r26, r20
    2f86:	10 f0       	brcs	.+4      	; 0x2f8c <__utoa_common+0x14>
    2f88:	a4 1b       	sub	r26, r20
    2f8a:	83 95       	inc	r24
    2f8c:	50 51       	subi	r21, 0x10	; 16
    2f8e:	b9 f7       	brne	.-18     	; 0x2f7e <__utoa_common+0x6>
    2f90:	a0 5d       	subi	r26, 0xD0	; 208
    2f92:	aa 33       	cpi	r26, 0x3A	; 58
    2f94:	08 f0       	brcs	.+2      	; 0x2f98 <__utoa_common+0x20>
    2f96:	a9 5d       	subi	r26, 0xD9	; 217
    2f98:	a1 93       	st	Z+, r26
    2f9a:	00 97       	sbiw	r24, 0x00	; 0
    2f9c:	79 f7       	brne	.-34     	; 0x2f7c <__utoa_common+0x4>
    2f9e:	b1 11       	cpse	r27, r1
    2fa0:	b1 93       	st	Z+, r27
    2fa2:	11 92       	st	Z+, r1
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	0c 94 d5 17 	jmp	0x2faa	; 0x2faa <strrev>

00002faa <strrev>:
    2faa:	dc 01       	movw	r26, r24
    2fac:	fc 01       	movw	r30, r24
    2fae:	67 2f       	mov	r22, r23
    2fb0:	71 91       	ld	r23, Z+
    2fb2:	77 23       	and	r23, r23
    2fb4:	e1 f7       	brne	.-8      	; 0x2fae <strrev+0x4>
    2fb6:	32 97       	sbiw	r30, 0x02	; 2
    2fb8:	04 c0       	rjmp	.+8      	; 0x2fc2 <strrev+0x18>
    2fba:	7c 91       	ld	r23, X
    2fbc:	6d 93       	st	X+, r22
    2fbe:	70 83       	st	Z, r23
    2fc0:	62 91       	ld	r22, -Z
    2fc2:	ae 17       	cp	r26, r30
    2fc4:	bf 07       	cpc	r27, r31
    2fc6:	c8 f3       	brcs	.-14     	; 0x2fba <strrev+0x10>
    2fc8:	08 95       	ret

00002fca <_exit>:
    2fca:	f8 94       	cli

00002fcc <__stop_program>:
    2fcc:	ff cf       	rjmp	.-2      	; 0x2fcc <__stop_program>
